// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proxy/AlgoCenter.proto

#include "proxy/AlgoCenter.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proxy_2fAlgoCenter_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ItemData_proxy_2fAlgoCenter_2eproto;
namespace COMM_AlgoCenter {
class AlgoCenterRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlgoCenterRequest> _instance;
} _AlgoCenterRequest_default_instance_;
class ItemDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ItemData> _instance;
} _ItemData_default_instance_;
class AlgoCenterResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlgoCenterResponse> _instance;
} _AlgoCenterResponse_default_instance_;
}  // namespace COMM_AlgoCenter
static void InitDefaultsscc_info_AlgoCenterRequest_proxy_2fAlgoCenter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::COMM_AlgoCenter::_AlgoCenterRequest_default_instance_;
    new (ptr) ::COMM_AlgoCenter::AlgoCenterRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AlgoCenterRequest_proxy_2fAlgoCenter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AlgoCenterRequest_proxy_2fAlgoCenter_2eproto}, {}};

static void InitDefaultsscc_info_AlgoCenterResponse_proxy_2fAlgoCenter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::COMM_AlgoCenter::_AlgoCenterResponse_default_instance_;
    new (ptr) ::COMM_AlgoCenter::AlgoCenterResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AlgoCenterResponse_proxy_2fAlgoCenter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AlgoCenterResponse_proxy_2fAlgoCenter_2eproto}, {
      &scc_info_ItemData_proxy_2fAlgoCenter_2eproto.base,}};

static void InitDefaultsscc_info_ItemData_proxy_2fAlgoCenter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::COMM_AlgoCenter::_ItemData_default_instance_;
    new (ptr) ::COMM_AlgoCenter::ItemData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ItemData_proxy_2fAlgoCenter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ItemData_proxy_2fAlgoCenter_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proxy_2fAlgoCenter_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proxy_2fAlgoCenter_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proxy_2fAlgoCenter_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proxy_2fAlgoCenter_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::COMM_AlgoCenter::AlgoCenterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::COMM_AlgoCenter::AlgoCenterRequest, request_id_),
  PROTOBUF_FIELD_OFFSET(::COMM_AlgoCenter::AlgoCenterRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::COMM_AlgoCenter::AlgoCenterRequest, exp_list_),
  PROTOBUF_FIELD_OFFSET(::COMM_AlgoCenter::AlgoCenterRequest, ret_count_),
  PROTOBUF_FIELD_OFFSET(::COMM_AlgoCenter::AlgoCenterRequest, ll_id_),
  PROTOBUF_FIELD_OFFSET(::COMM_AlgoCenter::AlgoCenterRequest, res_type_),
  PROTOBUF_FIELD_OFFSET(::COMM_AlgoCenter::AlgoCenterRequest, res_name_),
  PROTOBUF_FIELD_OFFSET(::COMM_AlgoCenter::AlgoCenterRequest, keyname_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::COMM_AlgoCenter::ItemData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::COMM_AlgoCenter::ItemData, ll_id_),
  PROTOBUF_FIELD_OFFSET(::COMM_AlgoCenter::ItemData, res_type_),
  PROTOBUF_FIELD_OFFSET(::COMM_AlgoCenter::ItemData, source_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::COMM_AlgoCenter::AlgoCenterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::COMM_AlgoCenter::AlgoCenterResponse, user_id_),
  PROTOBUF_FIELD_OFFSET(::COMM_AlgoCenter::AlgoCenterResponse, item_list_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::COMM_AlgoCenter::AlgoCenterRequest)},
  { 13, -1, sizeof(::COMM_AlgoCenter::ItemData)},
  { 21, -1, sizeof(::COMM_AlgoCenter::AlgoCenterResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::COMM_AlgoCenter::_AlgoCenterRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::COMM_AlgoCenter::_ItemData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::COMM_AlgoCenter::_AlgoCenterResponse_default_instance_),
};

const char descriptor_table_protodef_proxy_2fAlgoCenter_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026proxy/AlgoCenter.proto\022\017COMM_AlgoCente"
  "r\"\246\001\n\021AlgoCenterRequest\022\022\n\nrequest_id\030\001 "
  "\001(\t\022\017\n\007user_id\030\002 \001(\003\022\020\n\010exp_list\030\003 \003(\005\022\021"
  "\n\tret_count\030\004 \001(\005\022\r\n\005ll_id\030\005 \001(\003\022\020\n\010res_"
  "type\030\006 \001(\005\022\020\n\010res_name\030\007 \001(\t\022\024\n\014keyname_"
  "list\030\010 \003(\t\";\n\010ItemData\022\r\n\005ll_id\030\001 \001(\003\022\020\n"
  "\010res_type\030\002 \001(\003\022\016\n\006source\030\003 \001(\005\"S\n\022AlgoC"
  "enterResponse\022\017\n\007user_id\030\001 \001(\003\022,\n\titem_l"
  "ist\030\002 \003(\0132\031.COMM_AlgoCenter.ItemDataB\022Z\020"
  "./;GateWayProtosb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proxy_2fAlgoCenter_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proxy_2fAlgoCenter_2eproto_sccs[3] = {
  &scc_info_AlgoCenterRequest_proxy_2fAlgoCenter_2eproto.base,
  &scc_info_AlgoCenterResponse_proxy_2fAlgoCenter_2eproto.base,
  &scc_info_ItemData_proxy_2fAlgoCenter_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proxy_2fAlgoCenter_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proxy_2fAlgoCenter_2eproto = {
  false, false, descriptor_table_protodef_proxy_2fAlgoCenter_2eproto, "proxy/AlgoCenter.proto", 384,
  &descriptor_table_proxy_2fAlgoCenter_2eproto_once, descriptor_table_proxy_2fAlgoCenter_2eproto_sccs, descriptor_table_proxy_2fAlgoCenter_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_proxy_2fAlgoCenter_2eproto::offsets,
  file_level_metadata_proxy_2fAlgoCenter_2eproto, 3, file_level_enum_descriptors_proxy_2fAlgoCenter_2eproto, file_level_service_descriptors_proxy_2fAlgoCenter_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proxy_2fAlgoCenter_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proxy_2fAlgoCenter_2eproto)), true);
namespace COMM_AlgoCenter {

// ===================================================================

class AlgoCenterRequest::_Internal {
 public:
};

AlgoCenterRequest::AlgoCenterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  exp_list_(arena),
  keyname_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:COMM_AlgoCenter.AlgoCenterRequest)
}
AlgoCenterRequest::AlgoCenterRequest(const AlgoCenterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      exp_list_(from.exp_list_),
      keyname_list_(from.keyname_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_request_id(), 
      GetArena());
  }
  res_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_res_name().empty()) {
    res_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_res_name(), 
      GetArena());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&res_type_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(res_type_));
  // @@protoc_insertion_point(copy_constructor:COMM_AlgoCenter.AlgoCenterRequest)
}

void AlgoCenterRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AlgoCenterRequest_proxy_2fAlgoCenter_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  res_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&res_type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(res_type_));
}

AlgoCenterRequest::~AlgoCenterRequest() {
  // @@protoc_insertion_point(destructor:COMM_AlgoCenter.AlgoCenterRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AlgoCenterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  res_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AlgoCenterRequest::ArenaDtor(void* object) {
  AlgoCenterRequest* _this = reinterpret_cast< AlgoCenterRequest* >(object);
  (void)_this;
}
void AlgoCenterRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AlgoCenterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlgoCenterRequest& AlgoCenterRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlgoCenterRequest_proxy_2fAlgoCenter_2eproto.base);
  return *internal_default_instance();
}


void AlgoCenterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:COMM_AlgoCenter.AlgoCenterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exp_list_.Clear();
  keyname_list_.Clear();
  request_id_.ClearToEmpty();
  res_name_.ClearToEmpty();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&res_type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(res_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlgoCenterRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "COMM_AlgoCenter.AlgoCenterRequest.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 exp_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_exp_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_exp_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ret_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ret_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 ll_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ll_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 res_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          res_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string res_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_res_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "COMM_AlgoCenter.AlgoCenterRequest.res_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string keyname_list = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keyname_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "COMM_AlgoCenter.AlgoCenterRequest.keyname_list"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AlgoCenterRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:COMM_AlgoCenter.AlgoCenterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "COMM_AlgoCenter.AlgoCenterRequest.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // int64 user_id = 2;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_user_id(), target);
  }

  // repeated int32 exp_list = 3;
  {
    int byte_size = _exp_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_exp_list(), byte_size, target);
    }
  }

  // int32 ret_count = 4;
  if (this->ret_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ret_count(), target);
  }

  // int64 ll_id = 5;
  if (this->ll_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_ll_id(), target);
  }

  // int32 res_type = 6;
  if (this->res_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_res_type(), target);
  }

  // string res_name = 7;
  if (this->res_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_res_name().data(), static_cast<int>(this->_internal_res_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "COMM_AlgoCenter.AlgoCenterRequest.res_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_res_name(), target);
  }

  // repeated string keyname_list = 8;
  for (int i = 0, n = this->_internal_keyname_list_size(); i < n; i++) {
    const auto& s = this->_internal_keyname_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "COMM_AlgoCenter.AlgoCenterRequest.keyname_list");
    target = stream->WriteString(8, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COMM_AlgoCenter.AlgoCenterRequest)
  return target;
}

size_t AlgoCenterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COMM_AlgoCenter.AlgoCenterRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 exp_list = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->exp_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _exp_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string keyname_list = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(keyname_list_.size());
  for (int i = 0, n = keyname_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      keyname_list_.Get(i));
  }

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string res_name = 7;
  if (this->res_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_res_name());
  }

  // int64 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_id());
  }

  // int64 ll_id = 5;
  if (this->ll_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ll_id());
  }

  // int32 ret_count = 4;
  if (this->ret_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret_count());
  }

  // int32 res_type = 6;
  if (this->res_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_res_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlgoCenterRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COMM_AlgoCenter.AlgoCenterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AlgoCenterRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlgoCenterRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COMM_AlgoCenter.AlgoCenterRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COMM_AlgoCenter.AlgoCenterRequest)
    MergeFrom(*source);
  }
}

void AlgoCenterRequest::MergeFrom(const AlgoCenterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COMM_AlgoCenter.AlgoCenterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  exp_list_.MergeFrom(from.exp_list_);
  keyname_list_.MergeFrom(from.keyname_list_);
  if (from.request_id().size() > 0) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (from.res_name().size() > 0) {
    _internal_set_res_name(from._internal_res_name());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.ll_id() != 0) {
    _internal_set_ll_id(from._internal_ll_id());
  }
  if (from.ret_count() != 0) {
    _internal_set_ret_count(from._internal_ret_count());
  }
  if (from.res_type() != 0) {
    _internal_set_res_type(from._internal_res_type());
  }
}

void AlgoCenterRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COMM_AlgoCenter.AlgoCenterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlgoCenterRequest::CopyFrom(const AlgoCenterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COMM_AlgoCenter.AlgoCenterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlgoCenterRequest::IsInitialized() const {
  return true;
}

void AlgoCenterRequest::InternalSwap(AlgoCenterRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  exp_list_.InternalSwap(&other->exp_list_);
  keyname_list_.InternalSwap(&other->keyname_list_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  res_name_.Swap(&other->res_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AlgoCenterRequest, res_type_)
      + sizeof(AlgoCenterRequest::res_type_)
      - PROTOBUF_FIELD_OFFSET(AlgoCenterRequest, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AlgoCenterRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ItemData::_Internal {
 public:
};

ItemData::ItemData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:COMM_AlgoCenter.ItemData)
}
ItemData::ItemData(const ItemData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ll_id_, &from.ll_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_) -
    reinterpret_cast<char*>(&ll_id_)) + sizeof(source_));
  // @@protoc_insertion_point(copy_constructor:COMM_AlgoCenter.ItemData)
}

void ItemData::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&ll_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&source_) -
      reinterpret_cast<char*>(&ll_id_)) + sizeof(source_));
}

ItemData::~ItemData() {
  // @@protoc_insertion_point(destructor:COMM_AlgoCenter.ItemData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ItemData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ItemData::ArenaDtor(void* object) {
  ItemData* _this = reinterpret_cast< ItemData* >(object);
  (void)_this;
}
void ItemData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ItemData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ItemData& ItemData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ItemData_proxy_2fAlgoCenter_2eproto.base);
  return *internal_default_instance();
}


void ItemData::Clear() {
// @@protoc_insertion_point(message_clear_start:COMM_AlgoCenter.ItemData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ll_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_) -
      reinterpret_cast<char*>(&ll_id_)) + sizeof(source_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 ll_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ll_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 res_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          res_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 source = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ItemData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:COMM_AlgoCenter.ItemData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ll_id = 1;
  if (this->ll_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_ll_id(), target);
  }

  // int64 res_type = 2;
  if (this->res_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_res_type(), target);
  }

  // int32 source = 3;
  if (this->source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_source(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COMM_AlgoCenter.ItemData)
  return target;
}

size_t ItemData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COMM_AlgoCenter.ItemData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 ll_id = 1;
  if (this->ll_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ll_id());
  }

  // int64 res_type = 2;
  if (this->res_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_res_type());
  }

  // int32 source = 3;
  if (this->source() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_source());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ItemData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COMM_AlgoCenter.ItemData)
  GOOGLE_DCHECK_NE(&from, this);
  const ItemData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ItemData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COMM_AlgoCenter.ItemData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COMM_AlgoCenter.ItemData)
    MergeFrom(*source);
  }
}

void ItemData::MergeFrom(const ItemData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COMM_AlgoCenter.ItemData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ll_id() != 0) {
    _internal_set_ll_id(from._internal_ll_id());
  }
  if (from.res_type() != 0) {
    _internal_set_res_type(from._internal_res_type());
  }
  if (from.source() != 0) {
    _internal_set_source(from._internal_source());
  }
}

void ItemData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COMM_AlgoCenter.ItemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemData::CopyFrom(const ItemData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COMM_AlgoCenter.ItemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemData::IsInitialized() const {
  return true;
}

void ItemData::InternalSwap(ItemData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ItemData, source_)
      + sizeof(ItemData::source_)
      - PROTOBUF_FIELD_OFFSET(ItemData, ll_id_)>(
          reinterpret_cast<char*>(&ll_id_),
          reinterpret_cast<char*>(&other->ll_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AlgoCenterResponse::_Internal {
 public:
};

AlgoCenterResponse::AlgoCenterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  item_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:COMM_AlgoCenter.AlgoCenterResponse)
}
AlgoCenterResponse::AlgoCenterResponse(const AlgoCenterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      item_list_(from.item_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:COMM_AlgoCenter.AlgoCenterResponse)
}

void AlgoCenterResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AlgoCenterResponse_proxy_2fAlgoCenter_2eproto.base);
  user_id_ = PROTOBUF_LONGLONG(0);
}

AlgoCenterResponse::~AlgoCenterResponse() {
  // @@protoc_insertion_point(destructor:COMM_AlgoCenter.AlgoCenterResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AlgoCenterResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AlgoCenterResponse::ArenaDtor(void* object) {
  AlgoCenterResponse* _this = reinterpret_cast< AlgoCenterResponse* >(object);
  (void)_this;
}
void AlgoCenterResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AlgoCenterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlgoCenterResponse& AlgoCenterResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlgoCenterResponse_proxy_2fAlgoCenter_2eproto.base);
  return *internal_default_instance();
}


void AlgoCenterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:COMM_AlgoCenter.AlgoCenterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_list_.Clear();
  user_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlgoCenterResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .COMM_AlgoCenter.ItemData item_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AlgoCenterResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:COMM_AlgoCenter.AlgoCenterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_user_id(), target);
  }

  // repeated .COMM_AlgoCenter.ItemData item_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_item_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:COMM_AlgoCenter.AlgoCenterResponse)
  return target;
}

size_t AlgoCenterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:COMM_AlgoCenter.AlgoCenterResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .COMM_AlgoCenter.ItemData item_list = 2;
  total_size += 1UL * this->_internal_item_list_size();
  for (const auto& msg : this->item_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlgoCenterResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:COMM_AlgoCenter.AlgoCenterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AlgoCenterResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlgoCenterResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:COMM_AlgoCenter.AlgoCenterResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:COMM_AlgoCenter.AlgoCenterResponse)
    MergeFrom(*source);
  }
}

void AlgoCenterResponse::MergeFrom(const AlgoCenterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:COMM_AlgoCenter.AlgoCenterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_list_.MergeFrom(from.item_list_);
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void AlgoCenterResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:COMM_AlgoCenter.AlgoCenterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlgoCenterResponse::CopyFrom(const AlgoCenterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:COMM_AlgoCenter.AlgoCenterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlgoCenterResponse::IsInitialized() const {
  return true;
}

void AlgoCenterResponse::InternalSwap(AlgoCenterResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  item_list_.InternalSwap(&other->item_list_);
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlgoCenterResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace COMM_AlgoCenter
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::COMM_AlgoCenter::AlgoCenterRequest* Arena::CreateMaybeMessage< ::COMM_AlgoCenter::AlgoCenterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::COMM_AlgoCenter::AlgoCenterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::COMM_AlgoCenter::ItemData* Arena::CreateMaybeMessage< ::COMM_AlgoCenter::ItemData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::COMM_AlgoCenter::ItemData >(arena);
}
template<> PROTOBUF_NOINLINE ::COMM_AlgoCenter::AlgoCenterResponse* Arena::CreateMaybeMessage< ::COMM_AlgoCenter::AlgoCenterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::COMM_AlgoCenter::AlgoCenterResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
