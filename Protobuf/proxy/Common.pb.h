// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proxy/Common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proxy_2fCommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proxy_2fCommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proxy_2fCommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proxy_2fCommon_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proxy_2fCommon_2eproto;
namespace GrpcProtos {
class CheckReply;
class CheckReplyDefaultTypeInternal;
extern CheckReplyDefaultTypeInternal _CheckReply_default_instance_;
class CheckRequest;
class CheckRequestDefaultTypeInternal;
extern CheckRequestDefaultTypeInternal _CheckRequest_default_instance_;
class EmptyResponse;
class EmptyResponseDefaultTypeInternal;
extern EmptyResponseDefaultTypeInternal _EmptyResponse_default_instance_;
class NotifyRequest;
class NotifyRequestDefaultTypeInternal;
extern NotifyRequestDefaultTypeInternal _NotifyRequest_default_instance_;
class OfflineRequest;
class OfflineRequestDefaultTypeInternal;
extern OfflineRequestDefaultTypeInternal _OfflineRequest_default_instance_;
class OnlineReply;
class OnlineReplyDefaultTypeInternal;
extern OnlineReplyDefaultTypeInternal _OnlineReply_default_instance_;
class OnlineRequest;
class OnlineRequestDefaultTypeInternal;
extern OnlineRequestDefaultTypeInternal _OnlineRequest_default_instance_;
class PingRequest;
class PingRequestDefaultTypeInternal;
extern PingRequestDefaultTypeInternal _PingRequest_default_instance_;
class RegisterReply;
class RegisterReplyDefaultTypeInternal;
extern RegisterReplyDefaultTypeInternal _RegisterReply_default_instance_;
class RegisterRequest;
class RegisterRequestDefaultTypeInternal;
extern RegisterRequestDefaultTypeInternal _RegisterRequest_default_instance_;
class ReloadRequest;
class ReloadRequestDefaultTypeInternal;
extern ReloadRequestDefaultTypeInternal _ReloadRequest_default_instance_;
class RelyInfo;
class RelyInfoDefaultTypeInternal;
extern RelyInfoDefaultTypeInternal _RelyInfo_default_instance_;
class ServiceInfo;
class ServiceInfoDefaultTypeInternal;
extern ServiceInfoDefaultTypeInternal _ServiceInfo_default_instance_;
class UnifiedRequest;
class UnifiedRequestDefaultTypeInternal;
extern UnifiedRequestDefaultTypeInternal _UnifiedRequest_default_instance_;
class UnifiedResponse;
class UnifiedResponseDefaultTypeInternal;
extern UnifiedResponseDefaultTypeInternal _UnifiedResponse_default_instance_;
class WatchServiceInfo;
class WatchServiceInfoDefaultTypeInternal;
extern WatchServiceInfoDefaultTypeInternal _WatchServiceInfo_default_instance_;
}  // namespace GrpcProtos
PROTOBUF_NAMESPACE_OPEN
template<> ::GrpcProtos::CheckReply* Arena::CreateMaybeMessage<::GrpcProtos::CheckReply>(Arena*);
template<> ::GrpcProtos::CheckRequest* Arena::CreateMaybeMessage<::GrpcProtos::CheckRequest>(Arena*);
template<> ::GrpcProtos::EmptyResponse* Arena::CreateMaybeMessage<::GrpcProtos::EmptyResponse>(Arena*);
template<> ::GrpcProtos::NotifyRequest* Arena::CreateMaybeMessage<::GrpcProtos::NotifyRequest>(Arena*);
template<> ::GrpcProtos::OfflineRequest* Arena::CreateMaybeMessage<::GrpcProtos::OfflineRequest>(Arena*);
template<> ::GrpcProtos::OnlineReply* Arena::CreateMaybeMessage<::GrpcProtos::OnlineReply>(Arena*);
template<> ::GrpcProtos::OnlineRequest* Arena::CreateMaybeMessage<::GrpcProtos::OnlineRequest>(Arena*);
template<> ::GrpcProtos::PingRequest* Arena::CreateMaybeMessage<::GrpcProtos::PingRequest>(Arena*);
template<> ::GrpcProtos::RegisterReply* Arena::CreateMaybeMessage<::GrpcProtos::RegisterReply>(Arena*);
template<> ::GrpcProtos::RegisterRequest* Arena::CreateMaybeMessage<::GrpcProtos::RegisterRequest>(Arena*);
template<> ::GrpcProtos::ReloadRequest* Arena::CreateMaybeMessage<::GrpcProtos::ReloadRequest>(Arena*);
template<> ::GrpcProtos::RelyInfo* Arena::CreateMaybeMessage<::GrpcProtos::RelyInfo>(Arena*);
template<> ::GrpcProtos::ServiceInfo* Arena::CreateMaybeMessage<::GrpcProtos::ServiceInfo>(Arena*);
template<> ::GrpcProtos::UnifiedRequest* Arena::CreateMaybeMessage<::GrpcProtos::UnifiedRequest>(Arena*);
template<> ::GrpcProtos::UnifiedResponse* Arena::CreateMaybeMessage<::GrpcProtos::UnifiedResponse>(Arena*);
template<> ::GrpcProtos::WatchServiceInfo* Arena::CreateMaybeMessage<::GrpcProtos::WatchServiceInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace GrpcProtos {

enum ServiceType : int {
  SERVICE_TYPE_NONE = 0,
  REGISTER_CENTER = 6000,
  SERVICE_ALGO_GATE_WAY = 9080,
  SERVICE_ALGO_CENTER = 9090,
  ServiceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ServiceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ServiceType_IsValid(int value);
constexpr ServiceType ServiceType_MIN = SERVICE_TYPE_NONE;
constexpr ServiceType ServiceType_MAX = SERVICE_ALGO_CENTER;
constexpr int ServiceType_ARRAYSIZE = ServiceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServiceType_descriptor();
template<typename T>
inline const std::string& ServiceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServiceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServiceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServiceType_descriptor(), enum_t_value);
}
inline bool ServiceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServiceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServiceType>(
    ServiceType_descriptor(), name, value);
}
enum CmdType : int {
  CMD_NONE = 0,
  CMD_REGISTER = 10,
  CMD_ONLINE = 20,
  CMD_OFFLINE = 30,
  CMD_PING = 40,
  CMD_CHECK = 50,
  CMD_RELOAD = 60,
  CMD_NOTIFY = 70,
  CMD_HELLO = 100,
  CMD_GET_DOWNLOAD_RECOMMEND = 908001,
  CmdType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CmdType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CmdType_IsValid(int value);
constexpr CmdType CmdType_MIN = CMD_NONE;
constexpr CmdType CmdType_MAX = CMD_GET_DOWNLOAD_RECOMMEND;
constexpr int CmdType_ARRAYSIZE = CmdType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CmdType_descriptor();
template<typename T>
inline const std::string& CmdType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CmdType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CmdType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CmdType_descriptor(), enum_t_value);
}
inline bool CmdType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CmdType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CmdType>(
    CmdType_descriptor(), name, value);
}
enum ResultType : int {
  OK = 0,
  ERR_Unknown = 1,
  ERR_Service_CMD = 2,
  ERR_NO_Server = 3,
  ERR_Decode_Request = 4,
  ERR_Encode_Response = 5,
  ERR_Call_Service = 6,
  ERR_Decode_Response = 7,
  ERR_Encode_Request = 8,
  ERR_Service_Cal = 9,
  ERR_Service_Timeout = 10,
  ERR_Grpc_Closed = 11,
  ERR_Rate_Limit = 12,
  ResultType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ResultType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ResultType_IsValid(int value);
constexpr ResultType ResultType_MIN = OK;
constexpr ResultType ResultType_MAX = ERR_Rate_Limit;
constexpr int ResultType_ARRAYSIZE = ResultType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResultType_descriptor();
template<typename T>
inline const std::string& ResultType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResultType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResultType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResultType_descriptor(), enum_t_value);
}
inline bool ResultType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ResultType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResultType>(
    ResultType_descriptor(), name, value);
}
enum ServiceStatus : int {
  Unknown = 0,
  Register = 1,
  Online = 2,
  Offline = 3,
  ServiceStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ServiceStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ServiceStatus_IsValid(int value);
constexpr ServiceStatus ServiceStatus_MIN = Unknown;
constexpr ServiceStatus ServiceStatus_MAX = Offline;
constexpr int ServiceStatus_ARRAYSIZE = ServiceStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServiceStatus_descriptor();
template<typename T>
inline const std::string& ServiceStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServiceStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServiceStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServiceStatus_descriptor(), enum_t_value);
}
inline bool ServiceStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServiceStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServiceStatus>(
    ServiceStatus_descriptor(), name, value);
}
enum ConnectMode : int {
  GRPC = 0,
  ConnectMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ConnectMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ConnectMode_IsValid(int value);
constexpr ConnectMode ConnectMode_MIN = GRPC;
constexpr ConnectMode ConnectMode_MAX = GRPC;
constexpr int ConnectMode_ARRAYSIZE = ConnectMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectMode_descriptor();
template<typename T>
inline const std::string& ConnectMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConnectMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConnectMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConnectMode_descriptor(), enum_t_value);
}
inline bool ConnectMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConnectMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConnectMode>(
    ConnectMode_descriptor(), name, value);
}
// ===================================================================

class UnifiedRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GrpcProtos.UnifiedRequest) */ {
 public:
  inline UnifiedRequest() : UnifiedRequest(nullptr) {}
  virtual ~UnifiedRequest();

  UnifiedRequest(const UnifiedRequest& from);
  UnifiedRequest(UnifiedRequest&& from) noexcept
    : UnifiedRequest() {
    *this = ::std::move(from);
  }

  inline UnifiedRequest& operator=(const UnifiedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnifiedRequest& operator=(UnifiedRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnifiedRequest& default_instance();

  static inline const UnifiedRequest* internal_default_instance() {
    return reinterpret_cast<const UnifiedRequest*>(
               &_UnifiedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UnifiedRequest& a, UnifiedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnifiedRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnifiedRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnifiedRequest* New() const final {
    return CreateMaybeMessage<UnifiedRequest>(nullptr);
  }

  UnifiedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnifiedRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnifiedRequest& from);
  void MergeFrom(const UnifiedRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnifiedRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GrpcProtos.UnifiedRequest";
  }
  protected:
  explicit UnifiedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2fCommon_2eproto);
    return ::descriptor_table_proxy_2fCommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 2,
    kCmdFieldNumber = 1,
  };
  // bytes request = 2;
  void clear_request();
  const std::string& request() const;
  void set_request(const std::string& value);
  void set_request(std::string&& value);
  void set_request(const char* value);
  void set_request(const void* value, size_t size);
  std::string* mutable_request();
  std::string* release_request();
  void set_allocated_request(std::string* request);
  private:
  const std::string& _internal_request() const;
  void _internal_set_request(const std::string& value);
  std::string* _internal_mutable_request();
  public:

  // int32 cmd = 1;
  void clear_cmd();
  ::PROTOBUF_NAMESPACE_ID::int32 cmd() const;
  void set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cmd() const;
  void _internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GrpcProtos.UnifiedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_;
  ::PROTOBUF_NAMESPACE_ID::int32 cmd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2fCommon_2eproto;
};
// -------------------------------------------------------------------

class UnifiedResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GrpcProtos.UnifiedResponse) */ {
 public:
  inline UnifiedResponse() : UnifiedResponse(nullptr) {}
  virtual ~UnifiedResponse();

  UnifiedResponse(const UnifiedResponse& from);
  UnifiedResponse(UnifiedResponse&& from) noexcept
    : UnifiedResponse() {
    *this = ::std::move(from);
  }

  inline UnifiedResponse& operator=(const UnifiedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnifiedResponse& operator=(UnifiedResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnifiedResponse& default_instance();

  static inline const UnifiedResponse* internal_default_instance() {
    return reinterpret_cast<const UnifiedResponse*>(
               &_UnifiedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UnifiedResponse& a, UnifiedResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UnifiedResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnifiedResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnifiedResponse* New() const final {
    return CreateMaybeMessage<UnifiedResponse>(nullptr);
  }

  UnifiedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnifiedResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnifiedResponse& from);
  void MergeFrom(const UnifiedResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnifiedResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GrpcProtos.UnifiedResponse";
  }
  protected:
  explicit UnifiedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2fCommon_2eproto);
    return ::descriptor_table_proxy_2fCommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 3,
    kCmdFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // bytes response = 3;
  void clear_response();
  const std::string& response() const;
  void set_response(const std::string& value);
  void set_response(std::string&& value);
  void set_response(const char* value);
  void set_response(const void* value, size_t size);
  std::string* mutable_response();
  std::string* release_response();
  void set_allocated_response(std::string* response);
  private:
  const std::string& _internal_response() const;
  void _internal_set_response(const std::string& value);
  std::string* _internal_mutable_response();
  public:

  // int32 cmd = 1;
  void clear_cmd();
  ::PROTOBUF_NAMESPACE_ID::int32 cmd() const;
  void set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cmd() const;
  void _internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 result = 2;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GrpcProtos.UnifiedResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_;
  ::PROTOBUF_NAMESPACE_ID::int32 cmd_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2fCommon_2eproto;
};
// -------------------------------------------------------------------

class RelyInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GrpcProtos.RelyInfo) */ {
 public:
  inline RelyInfo() : RelyInfo(nullptr) {}
  virtual ~RelyInfo();

  RelyInfo(const RelyInfo& from);
  RelyInfo(RelyInfo&& from) noexcept
    : RelyInfo() {
    *this = ::std::move(from);
  }

  inline RelyInfo& operator=(const RelyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelyInfo& operator=(RelyInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RelyInfo& default_instance();

  static inline const RelyInfo* internal_default_instance() {
    return reinterpret_cast<const RelyInfo*>(
               &_RelyInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RelyInfo& a, RelyInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RelyInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelyInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RelyInfo* New() const final {
    return CreateMaybeMessage<RelyInfo>(nullptr);
  }

  RelyInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RelyInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RelyInfo& from);
  void MergeFrom(const RelyInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelyInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GrpcProtos.RelyInfo";
  }
  protected:
  explicit RelyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2fCommon_2eproto);
    return ::descriptor_table_proxy_2fCommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelySemverFieldNumber = 2,
    kRelyServiceTypeFieldNumber = 1,
  };
  // string rely_semver = 2;
  void clear_rely_semver();
  const std::string& rely_semver() const;
  void set_rely_semver(const std::string& value);
  void set_rely_semver(std::string&& value);
  void set_rely_semver(const char* value);
  void set_rely_semver(const char* value, size_t size);
  std::string* mutable_rely_semver();
  std::string* release_rely_semver();
  void set_allocated_rely_semver(std::string* rely_semver);
  private:
  const std::string& _internal_rely_semver() const;
  void _internal_set_rely_semver(const std::string& value);
  std::string* _internal_mutable_rely_semver();
  public:

  // int32 rely_service_type = 1;
  void clear_rely_service_type();
  ::PROTOBUF_NAMESPACE_ID::int32 rely_service_type() const;
  void set_rely_service_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rely_service_type() const;
  void _internal_set_rely_service_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GrpcProtos.RelyInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rely_semver_;
  ::PROTOBUF_NAMESPACE_ID::int32 rely_service_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2fCommon_2eproto;
};
// -------------------------------------------------------------------

class ServiceInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GrpcProtos.ServiceInfo) */ {
 public:
  inline ServiceInfo() : ServiceInfo(nullptr) {}
  virtual ~ServiceInfo();

  ServiceInfo(const ServiceInfo& from);
  ServiceInfo(ServiceInfo&& from) noexcept
    : ServiceInfo() {
    *this = ::std::move(from);
  }

  inline ServiceInfo& operator=(const ServiceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceInfo& operator=(ServiceInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceInfo& default_instance();

  static inline const ServiceInfo* internal_default_instance() {
    return reinterpret_cast<const ServiceInfo*>(
               &_ServiceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ServiceInfo& a, ServiceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceInfo* New() const final {
    return CreateMaybeMessage<ServiceInfo>(nullptr);
  }

  ServiceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceInfo& from);
  void MergeFrom(const ServiceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GrpcProtos.ServiceInfo";
  }
  protected:
  explicit ServiceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2fCommon_2eproto);
    return ::descriptor_table_proxy_2fCommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelyListFieldNumber = 6,
    kSemverFieldNumber = 2,
    kAddrFieldNumber = 3,
    kHostNameFieldNumber = 4,
    kGroupTabFieldNumber = 9,
    kServiceNameFieldNumber = 10,
    kNicknameFieldNumber = 11,
    kServiceTypeFieldNumber = 1,
    kStatusFieldNumber = 5,
    kServiceWeightFieldNumber = 7,
    kConnectModeFieldNumber = 8,
  };
  // repeated .GrpcProtos.RelyInfo rely_list = 6;
  int rely_list_size() const;
  private:
  int _internal_rely_list_size() const;
  public:
  void clear_rely_list();
  ::GrpcProtos::RelyInfo* mutable_rely_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GrpcProtos::RelyInfo >*
      mutable_rely_list();
  private:
  const ::GrpcProtos::RelyInfo& _internal_rely_list(int index) const;
  ::GrpcProtos::RelyInfo* _internal_add_rely_list();
  public:
  const ::GrpcProtos::RelyInfo& rely_list(int index) const;
  ::GrpcProtos::RelyInfo* add_rely_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GrpcProtos::RelyInfo >&
      rely_list() const;

  // string semver = 2;
  void clear_semver();
  const std::string& semver() const;
  void set_semver(const std::string& value);
  void set_semver(std::string&& value);
  void set_semver(const char* value);
  void set_semver(const char* value, size_t size);
  std::string* mutable_semver();
  std::string* release_semver();
  void set_allocated_semver(std::string* semver);
  private:
  const std::string& _internal_semver() const;
  void _internal_set_semver(const std::string& value);
  std::string* _internal_mutable_semver();
  public:

  // string addr = 3;
  void clear_addr();
  const std::string& addr() const;
  void set_addr(const std::string& value);
  void set_addr(std::string&& value);
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  std::string* mutable_addr();
  std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  private:
  const std::string& _internal_addr() const;
  void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // string host_name = 4;
  void clear_host_name();
  const std::string& host_name() const;
  void set_host_name(const std::string& value);
  void set_host_name(std::string&& value);
  void set_host_name(const char* value);
  void set_host_name(const char* value, size_t size);
  std::string* mutable_host_name();
  std::string* release_host_name();
  void set_allocated_host_name(std::string* host_name);
  private:
  const std::string& _internal_host_name() const;
  void _internal_set_host_name(const std::string& value);
  std::string* _internal_mutable_host_name();
  public:

  // string group_tab = 9;
  void clear_group_tab();
  const std::string& group_tab() const;
  void set_group_tab(const std::string& value);
  void set_group_tab(std::string&& value);
  void set_group_tab(const char* value);
  void set_group_tab(const char* value, size_t size);
  std::string* mutable_group_tab();
  std::string* release_group_tab();
  void set_allocated_group_tab(std::string* group_tab);
  private:
  const std::string& _internal_group_tab() const;
  void _internal_set_group_tab(const std::string& value);
  std::string* _internal_mutable_group_tab();
  public:

  // string service_name = 10;
  void clear_service_name();
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // string nickname = 11;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // int32 service_type = 1;
  void clear_service_type();
  ::PROTOBUF_NAMESPACE_ID::int32 service_type() const;
  void set_service_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_service_type() const;
  void _internal_set_service_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 status = 5;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 service_weight = 7;
  void clear_service_weight();
  ::PROTOBUF_NAMESPACE_ID::int32 service_weight() const;
  void set_service_weight(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_service_weight() const;
  void _internal_set_service_weight(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 connect_mode = 8;
  void clear_connect_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 connect_mode() const;
  void set_connect_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_connect_mode() const;
  void _internal_set_connect_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GrpcProtos.ServiceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GrpcProtos::RelyInfo > rely_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr semver_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_tab_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::int32 service_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 service_weight_;
  ::PROTOBUF_NAMESPACE_ID::int32 connect_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2fCommon_2eproto;
};
// -------------------------------------------------------------------

class WatchServiceInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GrpcProtos.WatchServiceInfo) */ {
 public:
  inline WatchServiceInfo() : WatchServiceInfo(nullptr) {}
  virtual ~WatchServiceInfo();

  WatchServiceInfo(const WatchServiceInfo& from);
  WatchServiceInfo(WatchServiceInfo&& from) noexcept
    : WatchServiceInfo() {
    *this = ::std::move(from);
  }

  inline WatchServiceInfo& operator=(const WatchServiceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchServiceInfo& operator=(WatchServiceInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WatchServiceInfo& default_instance();

  static inline const WatchServiceInfo* internal_default_instance() {
    return reinterpret_cast<const WatchServiceInfo*>(
               &_WatchServiceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WatchServiceInfo& a, WatchServiceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchServiceInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchServiceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchServiceInfo* New() const final {
    return CreateMaybeMessage<WatchServiceInfo>(nullptr);
  }

  WatchServiceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchServiceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WatchServiceInfo& from);
  void MergeFrom(const WatchServiceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchServiceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GrpcProtos.WatchServiceInfo";
  }
  protected:
  explicit WatchServiceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2fCommon_2eproto);
    return ::descriptor_table_proxy_2fCommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceListFieldNumber = 2,
    kServiceTypeFieldNumber = 1,
  };
  // repeated .GrpcProtos.ServiceInfo service_list = 2;
  int service_list_size() const;
  private:
  int _internal_service_list_size() const;
  public:
  void clear_service_list();
  ::GrpcProtos::ServiceInfo* mutable_service_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GrpcProtos::ServiceInfo >*
      mutable_service_list();
  private:
  const ::GrpcProtos::ServiceInfo& _internal_service_list(int index) const;
  ::GrpcProtos::ServiceInfo* _internal_add_service_list();
  public:
  const ::GrpcProtos::ServiceInfo& service_list(int index) const;
  ::GrpcProtos::ServiceInfo* add_service_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GrpcProtos::ServiceInfo >&
      service_list() const;

  // int32 service_type = 1;
  void clear_service_type();
  ::PROTOBUF_NAMESPACE_ID::int32 service_type() const;
  void set_service_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_service_type() const;
  void _internal_set_service_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GrpcProtos.WatchServiceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GrpcProtos::ServiceInfo > service_list_;
  ::PROTOBUF_NAMESPACE_ID::int32 service_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2fCommon_2eproto;
};
// -------------------------------------------------------------------

class RegisterRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GrpcProtos.RegisterRequest) */ {
 public:
  inline RegisterRequest() : RegisterRequest(nullptr) {}
  virtual ~RegisterRequest();

  RegisterRequest(const RegisterRequest& from);
  RegisterRequest(RegisterRequest&& from) noexcept
    : RegisterRequest() {
    *this = ::std::move(from);
  }

  inline RegisterRequest& operator=(const RegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterRequest& operator=(RegisterRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterRequest& default_instance();

  static inline const RegisterRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterRequest*>(
               &_RegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RegisterRequest& a, RegisterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterRequest* New() const final {
    return CreateMaybeMessage<RegisterRequest>(nullptr);
  }

  RegisterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterRequest& from);
  void MergeFrom(const RegisterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GrpcProtos.RegisterRequest";
  }
  protected:
  explicit RegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2fCommon_2eproto);
    return ::descriptor_table_proxy_2fCommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceInfoFieldNumber = 1,
  };
  // .GrpcProtos.ServiceInfo service_info = 1;
  bool has_service_info() const;
  private:
  bool _internal_has_service_info() const;
  public:
  void clear_service_info();
  const ::GrpcProtos::ServiceInfo& service_info() const;
  ::GrpcProtos::ServiceInfo* release_service_info();
  ::GrpcProtos::ServiceInfo* mutable_service_info();
  void set_allocated_service_info(::GrpcProtos::ServiceInfo* service_info);
  private:
  const ::GrpcProtos::ServiceInfo& _internal_service_info() const;
  ::GrpcProtos::ServiceInfo* _internal_mutable_service_info();
  public:
  void unsafe_arena_set_allocated_service_info(
      ::GrpcProtos::ServiceInfo* service_info);
  ::GrpcProtos::ServiceInfo* unsafe_arena_release_service_info();

  // @@protoc_insertion_point(class_scope:GrpcProtos.RegisterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::GrpcProtos::ServiceInfo* service_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2fCommon_2eproto;
};
// -------------------------------------------------------------------

class RegisterReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GrpcProtos.RegisterReply) */ {
 public:
  inline RegisterReply() : RegisterReply(nullptr) {}
  virtual ~RegisterReply();

  RegisterReply(const RegisterReply& from);
  RegisterReply(RegisterReply&& from) noexcept
    : RegisterReply() {
    *this = ::std::move(from);
  }

  inline RegisterReply& operator=(const RegisterReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterReply& operator=(RegisterReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterReply& default_instance();

  static inline const RegisterReply* internal_default_instance() {
    return reinterpret_cast<const RegisterReply*>(
               &_RegisterReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RegisterReply& a, RegisterReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterReply* New() const final {
    return CreateMaybeMessage<RegisterReply>(nullptr);
  }

  RegisterReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterReply& from);
  void MergeFrom(const RegisterReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GrpcProtos.RegisterReply";
  }
  protected:
  explicit RegisterReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2fCommon_2eproto);
    return ::descriptor_table_proxy_2fCommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWatchListFieldNumber = 1,
  };
  // repeated .GrpcProtos.WatchServiceInfo watch_list = 1;
  int watch_list_size() const;
  private:
  int _internal_watch_list_size() const;
  public:
  void clear_watch_list();
  ::GrpcProtos::WatchServiceInfo* mutable_watch_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GrpcProtos::WatchServiceInfo >*
      mutable_watch_list();
  private:
  const ::GrpcProtos::WatchServiceInfo& _internal_watch_list(int index) const;
  ::GrpcProtos::WatchServiceInfo* _internal_add_watch_list();
  public:
  const ::GrpcProtos::WatchServiceInfo& watch_list(int index) const;
  ::GrpcProtos::WatchServiceInfo* add_watch_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GrpcProtos::WatchServiceInfo >&
      watch_list() const;

  // @@protoc_insertion_point(class_scope:GrpcProtos.RegisterReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GrpcProtos::WatchServiceInfo > watch_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2fCommon_2eproto;
};
// -------------------------------------------------------------------

class OnlineRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GrpcProtos.OnlineRequest) */ {
 public:
  inline OnlineRequest() : OnlineRequest(nullptr) {}
  virtual ~OnlineRequest();

  OnlineRequest(const OnlineRequest& from);
  OnlineRequest(OnlineRequest&& from) noexcept
    : OnlineRequest() {
    *this = ::std::move(from);
  }

  inline OnlineRequest& operator=(const OnlineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnlineRequest& operator=(OnlineRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnlineRequest& default_instance();

  static inline const OnlineRequest* internal_default_instance() {
    return reinterpret_cast<const OnlineRequest*>(
               &_OnlineRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(OnlineRequest& a, OnlineRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OnlineRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnlineRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnlineRequest* New() const final {
    return CreateMaybeMessage<OnlineRequest>(nullptr);
  }

  OnlineRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnlineRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnlineRequest& from);
  void MergeFrom(const OnlineRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnlineRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GrpcProtos.OnlineRequest";
  }
  protected:
  explicit OnlineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2fCommon_2eproto);
    return ::descriptor_table_proxy_2fCommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceInfoFieldNumber = 1,
  };
  // .GrpcProtos.ServiceInfo service_info = 1;
  bool has_service_info() const;
  private:
  bool _internal_has_service_info() const;
  public:
  void clear_service_info();
  const ::GrpcProtos::ServiceInfo& service_info() const;
  ::GrpcProtos::ServiceInfo* release_service_info();
  ::GrpcProtos::ServiceInfo* mutable_service_info();
  void set_allocated_service_info(::GrpcProtos::ServiceInfo* service_info);
  private:
  const ::GrpcProtos::ServiceInfo& _internal_service_info() const;
  ::GrpcProtos::ServiceInfo* _internal_mutable_service_info();
  public:
  void unsafe_arena_set_allocated_service_info(
      ::GrpcProtos::ServiceInfo* service_info);
  ::GrpcProtos::ServiceInfo* unsafe_arena_release_service_info();

  // @@protoc_insertion_point(class_scope:GrpcProtos.OnlineRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::GrpcProtos::ServiceInfo* service_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2fCommon_2eproto;
};
// -------------------------------------------------------------------

class OnlineReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GrpcProtos.OnlineReply) */ {
 public:
  inline OnlineReply() : OnlineReply(nullptr) {}
  virtual ~OnlineReply();

  OnlineReply(const OnlineReply& from);
  OnlineReply(OnlineReply&& from) noexcept
    : OnlineReply() {
    *this = ::std::move(from);
  }

  inline OnlineReply& operator=(const OnlineReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnlineReply& operator=(OnlineReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnlineReply& default_instance();

  static inline const OnlineReply* internal_default_instance() {
    return reinterpret_cast<const OnlineReply*>(
               &_OnlineReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(OnlineReply& a, OnlineReply& b) {
    a.Swap(&b);
  }
  inline void Swap(OnlineReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnlineReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnlineReply* New() const final {
    return CreateMaybeMessage<OnlineReply>(nullptr);
  }

  OnlineReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnlineReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnlineReply& from);
  void MergeFrom(const OnlineReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnlineReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GrpcProtos.OnlineReply";
  }
  protected:
  explicit OnlineReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2fCommon_2eproto);
    return ::descriptor_table_proxy_2fCommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWatchListFieldNumber = 1,
  };
  // repeated .GrpcProtos.WatchServiceInfo watch_list = 1;
  int watch_list_size() const;
  private:
  int _internal_watch_list_size() const;
  public:
  void clear_watch_list();
  ::GrpcProtos::WatchServiceInfo* mutable_watch_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GrpcProtos::WatchServiceInfo >*
      mutable_watch_list();
  private:
  const ::GrpcProtos::WatchServiceInfo& _internal_watch_list(int index) const;
  ::GrpcProtos::WatchServiceInfo* _internal_add_watch_list();
  public:
  const ::GrpcProtos::WatchServiceInfo& watch_list(int index) const;
  ::GrpcProtos::WatchServiceInfo* add_watch_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GrpcProtos::WatchServiceInfo >&
      watch_list() const;

  // @@protoc_insertion_point(class_scope:GrpcProtos.OnlineReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GrpcProtos::WatchServiceInfo > watch_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2fCommon_2eproto;
};
// -------------------------------------------------------------------

class OfflineRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GrpcProtos.OfflineRequest) */ {
 public:
  inline OfflineRequest() : OfflineRequest(nullptr) {}
  virtual ~OfflineRequest();

  OfflineRequest(const OfflineRequest& from);
  OfflineRequest(OfflineRequest&& from) noexcept
    : OfflineRequest() {
    *this = ::std::move(from);
  }

  inline OfflineRequest& operator=(const OfflineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OfflineRequest& operator=(OfflineRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OfflineRequest& default_instance();

  static inline const OfflineRequest* internal_default_instance() {
    return reinterpret_cast<const OfflineRequest*>(
               &_OfflineRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(OfflineRequest& a, OfflineRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OfflineRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OfflineRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OfflineRequest* New() const final {
    return CreateMaybeMessage<OfflineRequest>(nullptr);
  }

  OfflineRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OfflineRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OfflineRequest& from);
  void MergeFrom(const OfflineRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OfflineRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GrpcProtos.OfflineRequest";
  }
  protected:
  explicit OfflineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2fCommon_2eproto);
    return ::descriptor_table_proxy_2fCommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceInfoFieldNumber = 1,
  };
  // .GrpcProtos.ServiceInfo service_info = 1;
  bool has_service_info() const;
  private:
  bool _internal_has_service_info() const;
  public:
  void clear_service_info();
  const ::GrpcProtos::ServiceInfo& service_info() const;
  ::GrpcProtos::ServiceInfo* release_service_info();
  ::GrpcProtos::ServiceInfo* mutable_service_info();
  void set_allocated_service_info(::GrpcProtos::ServiceInfo* service_info);
  private:
  const ::GrpcProtos::ServiceInfo& _internal_service_info() const;
  ::GrpcProtos::ServiceInfo* _internal_mutable_service_info();
  public:
  void unsafe_arena_set_allocated_service_info(
      ::GrpcProtos::ServiceInfo* service_info);
  ::GrpcProtos::ServiceInfo* unsafe_arena_release_service_info();

  // @@protoc_insertion_point(class_scope:GrpcProtos.OfflineRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::GrpcProtos::ServiceInfo* service_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2fCommon_2eproto;
};
// -------------------------------------------------------------------

class PingRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GrpcProtos.PingRequest) */ {
 public:
  inline PingRequest() : PingRequest(nullptr) {}
  virtual ~PingRequest();

  PingRequest(const PingRequest& from);
  PingRequest(PingRequest&& from) noexcept
    : PingRequest() {
    *this = ::std::move(from);
  }

  inline PingRequest& operator=(const PingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingRequest& operator=(PingRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PingRequest& default_instance();

  static inline const PingRequest* internal_default_instance() {
    return reinterpret_cast<const PingRequest*>(
               &_PingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PingRequest& a, PingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PingRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PingRequest* New() const final {
    return CreateMaybeMessage<PingRequest>(nullptr);
  }

  PingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PingRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PingRequest& from);
  void MergeFrom(const PingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GrpcProtos.PingRequest";
  }
  protected:
  explicit PingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2fCommon_2eproto);
    return ::descriptor_table_proxy_2fCommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceInfoFieldNumber = 1,
  };
  // .GrpcProtos.ServiceInfo service_info = 1;
  bool has_service_info() const;
  private:
  bool _internal_has_service_info() const;
  public:
  void clear_service_info();
  const ::GrpcProtos::ServiceInfo& service_info() const;
  ::GrpcProtos::ServiceInfo* release_service_info();
  ::GrpcProtos::ServiceInfo* mutable_service_info();
  void set_allocated_service_info(::GrpcProtos::ServiceInfo* service_info);
  private:
  const ::GrpcProtos::ServiceInfo& _internal_service_info() const;
  ::GrpcProtos::ServiceInfo* _internal_mutable_service_info();
  public:
  void unsafe_arena_set_allocated_service_info(
      ::GrpcProtos::ServiceInfo* service_info);
  ::GrpcProtos::ServiceInfo* unsafe_arena_release_service_info();

  // @@protoc_insertion_point(class_scope:GrpcProtos.PingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::GrpcProtos::ServiceInfo* service_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2fCommon_2eproto;
};
// -------------------------------------------------------------------

class CheckRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GrpcProtos.CheckRequest) */ {
 public:
  inline CheckRequest() : CheckRequest(nullptr) {}
  virtual ~CheckRequest();

  CheckRequest(const CheckRequest& from);
  CheckRequest(CheckRequest&& from) noexcept
    : CheckRequest() {
    *this = ::std::move(from);
  }

  inline CheckRequest& operator=(const CheckRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckRequest& operator=(CheckRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckRequest& default_instance();

  static inline const CheckRequest* internal_default_instance() {
    return reinterpret_cast<const CheckRequest*>(
               &_CheckRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CheckRequest& a, CheckRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckRequest* New() const final {
    return CreateMaybeMessage<CheckRequest>(nullptr);
  }

  CheckRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckRequest& from);
  void MergeFrom(const CheckRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GrpcProtos.CheckRequest";
  }
  protected:
  explicit CheckRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2fCommon_2eproto);
    return ::descriptor_table_proxy_2fCommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWatchListFieldNumber = 2,
    kServiceInfoFieldNumber = 1,
  };
  // repeated .GrpcProtos.WatchServiceInfo watch_list = 2;
  int watch_list_size() const;
  private:
  int _internal_watch_list_size() const;
  public:
  void clear_watch_list();
  ::GrpcProtos::WatchServiceInfo* mutable_watch_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GrpcProtos::WatchServiceInfo >*
      mutable_watch_list();
  private:
  const ::GrpcProtos::WatchServiceInfo& _internal_watch_list(int index) const;
  ::GrpcProtos::WatchServiceInfo* _internal_add_watch_list();
  public:
  const ::GrpcProtos::WatchServiceInfo& watch_list(int index) const;
  ::GrpcProtos::WatchServiceInfo* add_watch_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GrpcProtos::WatchServiceInfo >&
      watch_list() const;

  // .GrpcProtos.ServiceInfo service_info = 1;
  bool has_service_info() const;
  private:
  bool _internal_has_service_info() const;
  public:
  void clear_service_info();
  const ::GrpcProtos::ServiceInfo& service_info() const;
  ::GrpcProtos::ServiceInfo* release_service_info();
  ::GrpcProtos::ServiceInfo* mutable_service_info();
  void set_allocated_service_info(::GrpcProtos::ServiceInfo* service_info);
  private:
  const ::GrpcProtos::ServiceInfo& _internal_service_info() const;
  ::GrpcProtos::ServiceInfo* _internal_mutable_service_info();
  public:
  void unsafe_arena_set_allocated_service_info(
      ::GrpcProtos::ServiceInfo* service_info);
  ::GrpcProtos::ServiceInfo* unsafe_arena_release_service_info();

  // @@protoc_insertion_point(class_scope:GrpcProtos.CheckRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GrpcProtos::WatchServiceInfo > watch_list_;
  ::GrpcProtos::ServiceInfo* service_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2fCommon_2eproto;
};
// -------------------------------------------------------------------

class CheckReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GrpcProtos.CheckReply) */ {
 public:
  inline CheckReply() : CheckReply(nullptr) {}
  virtual ~CheckReply();

  CheckReply(const CheckReply& from);
  CheckReply(CheckReply&& from) noexcept
    : CheckReply() {
    *this = ::std::move(from);
  }

  inline CheckReply& operator=(const CheckReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckReply& operator=(CheckReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckReply& default_instance();

  static inline const CheckReply* internal_default_instance() {
    return reinterpret_cast<const CheckReply*>(
               &_CheckReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CheckReply& a, CheckReply& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckReply* New() const final {
    return CreateMaybeMessage<CheckReply>(nullptr);
  }

  CheckReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckReply& from);
  void MergeFrom(const CheckReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GrpcProtos.CheckReply";
  }
  protected:
  explicit CheckReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2fCommon_2eproto);
    return ::descriptor_table_proxy_2fCommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWatchListFieldNumber = 1,
  };
  // repeated .GrpcProtos.WatchServiceInfo watch_list = 1;
  int watch_list_size() const;
  private:
  int _internal_watch_list_size() const;
  public:
  void clear_watch_list();
  ::GrpcProtos::WatchServiceInfo* mutable_watch_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GrpcProtos::WatchServiceInfo >*
      mutable_watch_list();
  private:
  const ::GrpcProtos::WatchServiceInfo& _internal_watch_list(int index) const;
  ::GrpcProtos::WatchServiceInfo* _internal_add_watch_list();
  public:
  const ::GrpcProtos::WatchServiceInfo& watch_list(int index) const;
  ::GrpcProtos::WatchServiceInfo* add_watch_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GrpcProtos::WatchServiceInfo >&
      watch_list() const;

  // @@protoc_insertion_point(class_scope:GrpcProtos.CheckReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GrpcProtos::WatchServiceInfo > watch_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2fCommon_2eproto;
};
// -------------------------------------------------------------------

class ReloadRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GrpcProtos.ReloadRequest) */ {
 public:
  inline ReloadRequest() : ReloadRequest(nullptr) {}
  virtual ~ReloadRequest();

  ReloadRequest(const ReloadRequest& from);
  ReloadRequest(ReloadRequest&& from) noexcept
    : ReloadRequest() {
    *this = ::std::move(from);
  }

  inline ReloadRequest& operator=(const ReloadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReloadRequest& operator=(ReloadRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReloadRequest& default_instance();

  static inline const ReloadRequest* internal_default_instance() {
    return reinterpret_cast<const ReloadRequest*>(
               &_ReloadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ReloadRequest& a, ReloadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReloadRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReloadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReloadRequest* New() const final {
    return CreateMaybeMessage<ReloadRequest>(nullptr);
  }

  ReloadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReloadRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReloadRequest& from);
  void MergeFrom(const ReloadRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReloadRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GrpcProtos.ReloadRequest";
  }
  protected:
  explicit ReloadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2fCommon_2eproto);
    return ::descriptor_table_proxy_2fCommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceInfoFieldNumber = 1,
  };
  // .GrpcProtos.ServiceInfo service_info = 1;
  bool has_service_info() const;
  private:
  bool _internal_has_service_info() const;
  public:
  void clear_service_info();
  const ::GrpcProtos::ServiceInfo& service_info() const;
  ::GrpcProtos::ServiceInfo* release_service_info();
  ::GrpcProtos::ServiceInfo* mutable_service_info();
  void set_allocated_service_info(::GrpcProtos::ServiceInfo* service_info);
  private:
  const ::GrpcProtos::ServiceInfo& _internal_service_info() const;
  ::GrpcProtos::ServiceInfo* _internal_mutable_service_info();
  public:
  void unsafe_arena_set_allocated_service_info(
      ::GrpcProtos::ServiceInfo* service_info);
  ::GrpcProtos::ServiceInfo* unsafe_arena_release_service_info();

  // @@protoc_insertion_point(class_scope:GrpcProtos.ReloadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::GrpcProtos::ServiceInfo* service_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2fCommon_2eproto;
};
// -------------------------------------------------------------------

class NotifyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GrpcProtos.NotifyRequest) */ {
 public:
  inline NotifyRequest() : NotifyRequest(nullptr) {}
  virtual ~NotifyRequest();

  NotifyRequest(const NotifyRequest& from);
  NotifyRequest(NotifyRequest&& from) noexcept
    : NotifyRequest() {
    *this = ::std::move(from);
  }

  inline NotifyRequest& operator=(const NotifyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifyRequest& operator=(NotifyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NotifyRequest& default_instance();

  static inline const NotifyRequest* internal_default_instance() {
    return reinterpret_cast<const NotifyRequest*>(
               &_NotifyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(NotifyRequest& a, NotifyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NotifyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotifyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NotifyRequest* New() const final {
    return CreateMaybeMessage<NotifyRequest>(nullptr);
  }

  NotifyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NotifyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NotifyRequest& from);
  void MergeFrom(const NotifyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GrpcProtos.NotifyRequest";
  }
  protected:
  explicit NotifyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2fCommon_2eproto);
    return ::descriptor_table_proxy_2fCommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceInfoFieldNumber = 1,
  };
  // .GrpcProtos.ServiceInfo service_info = 1;
  bool has_service_info() const;
  private:
  bool _internal_has_service_info() const;
  public:
  void clear_service_info();
  const ::GrpcProtos::ServiceInfo& service_info() const;
  ::GrpcProtos::ServiceInfo* release_service_info();
  ::GrpcProtos::ServiceInfo* mutable_service_info();
  void set_allocated_service_info(::GrpcProtos::ServiceInfo* service_info);
  private:
  const ::GrpcProtos::ServiceInfo& _internal_service_info() const;
  ::GrpcProtos::ServiceInfo* _internal_mutable_service_info();
  public:
  void unsafe_arena_set_allocated_service_info(
      ::GrpcProtos::ServiceInfo* service_info);
  ::GrpcProtos::ServiceInfo* unsafe_arena_release_service_info();

  // @@protoc_insertion_point(class_scope:GrpcProtos.NotifyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::GrpcProtos::ServiceInfo* service_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2fCommon_2eproto;
};
// -------------------------------------------------------------------

class EmptyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GrpcProtos.EmptyResponse) */ {
 public:
  inline EmptyResponse() : EmptyResponse(nullptr) {}
  virtual ~EmptyResponse();

  EmptyResponse(const EmptyResponse& from);
  EmptyResponse(EmptyResponse&& from) noexcept
    : EmptyResponse() {
    *this = ::std::move(from);
  }

  inline EmptyResponse& operator=(const EmptyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmptyResponse& operator=(EmptyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EmptyResponse& default_instance();

  static inline const EmptyResponse* internal_default_instance() {
    return reinterpret_cast<const EmptyResponse*>(
               &_EmptyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(EmptyResponse& a, EmptyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EmptyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmptyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EmptyResponse* New() const final {
    return CreateMaybeMessage<EmptyResponse>(nullptr);
  }

  EmptyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EmptyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EmptyResponse& from);
  void MergeFrom(const EmptyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmptyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GrpcProtos.EmptyResponse";
  }
  protected:
  explicit EmptyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2fCommon_2eproto);
    return ::descriptor_table_proxy_2fCommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:GrpcProtos.EmptyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2fCommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UnifiedRequest

// int32 cmd = 1;
inline void UnifiedRequest::clear_cmd() {
  cmd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnifiedRequest::_internal_cmd() const {
  return cmd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnifiedRequest::cmd() const {
  // @@protoc_insertion_point(field_get:GrpcProtos.UnifiedRequest.cmd)
  return _internal_cmd();
}
inline void UnifiedRequest::_internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cmd_ = value;
}
inline void UnifiedRequest::set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:GrpcProtos.UnifiedRequest.cmd)
}

// bytes request = 2;
inline void UnifiedRequest::clear_request() {
  request_.ClearToEmpty();
}
inline const std::string& UnifiedRequest::request() const {
  // @@protoc_insertion_point(field_get:GrpcProtos.UnifiedRequest.request)
  return _internal_request();
}
inline void UnifiedRequest::set_request(const std::string& value) {
  _internal_set_request(value);
  // @@protoc_insertion_point(field_set:GrpcProtos.UnifiedRequest.request)
}
inline std::string* UnifiedRequest::mutable_request() {
  // @@protoc_insertion_point(field_mutable:GrpcProtos.UnifiedRequest.request)
  return _internal_mutable_request();
}
inline const std::string& UnifiedRequest::_internal_request() const {
  return request_.Get();
}
inline void UnifiedRequest::_internal_set_request(const std::string& value) {
  
  request_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UnifiedRequest::set_request(std::string&& value) {
  
  request_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GrpcProtos.UnifiedRequest.request)
}
inline void UnifiedRequest::set_request(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:GrpcProtos.UnifiedRequest.request)
}
inline void UnifiedRequest::set_request(const void* value,
    size_t size) {
  
  request_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GrpcProtos.UnifiedRequest.request)
}
inline std::string* UnifiedRequest::_internal_mutable_request() {
  
  return request_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnifiedRequest::release_request() {
  // @@protoc_insertion_point(field_release:GrpcProtos.UnifiedRequest.request)
  return request_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnifiedRequest::set_allocated_request(std::string* request) {
  if (request != nullptr) {
    
  } else {
    
  }
  request_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GrpcProtos.UnifiedRequest.request)
}

// -------------------------------------------------------------------

// UnifiedResponse

// int32 cmd = 1;
inline void UnifiedResponse::clear_cmd() {
  cmd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnifiedResponse::_internal_cmd() const {
  return cmd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnifiedResponse::cmd() const {
  // @@protoc_insertion_point(field_get:GrpcProtos.UnifiedResponse.cmd)
  return _internal_cmd();
}
inline void UnifiedResponse::_internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cmd_ = value;
}
inline void UnifiedResponse::set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:GrpcProtos.UnifiedResponse.cmd)
}

// int32 result = 2;
inline void UnifiedResponse::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnifiedResponse::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnifiedResponse::result() const {
  // @@protoc_insertion_point(field_get:GrpcProtos.UnifiedResponse.result)
  return _internal_result();
}
inline void UnifiedResponse::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void UnifiedResponse::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:GrpcProtos.UnifiedResponse.result)
}

// bytes response = 3;
inline void UnifiedResponse::clear_response() {
  response_.ClearToEmpty();
}
inline const std::string& UnifiedResponse::response() const {
  // @@protoc_insertion_point(field_get:GrpcProtos.UnifiedResponse.response)
  return _internal_response();
}
inline void UnifiedResponse::set_response(const std::string& value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:GrpcProtos.UnifiedResponse.response)
}
inline std::string* UnifiedResponse::mutable_response() {
  // @@protoc_insertion_point(field_mutable:GrpcProtos.UnifiedResponse.response)
  return _internal_mutable_response();
}
inline const std::string& UnifiedResponse::_internal_response() const {
  return response_.Get();
}
inline void UnifiedResponse::_internal_set_response(const std::string& value) {
  
  response_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UnifiedResponse::set_response(std::string&& value) {
  
  response_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GrpcProtos.UnifiedResponse.response)
}
inline void UnifiedResponse::set_response(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  response_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:GrpcProtos.UnifiedResponse.response)
}
inline void UnifiedResponse::set_response(const void* value,
    size_t size) {
  
  response_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GrpcProtos.UnifiedResponse.response)
}
inline std::string* UnifiedResponse::_internal_mutable_response() {
  
  return response_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnifiedResponse::release_response() {
  // @@protoc_insertion_point(field_release:GrpcProtos.UnifiedResponse.response)
  return response_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnifiedResponse::set_allocated_response(std::string* response) {
  if (response != nullptr) {
    
  } else {
    
  }
  response_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GrpcProtos.UnifiedResponse.response)
}

// -------------------------------------------------------------------

// RelyInfo

// int32 rely_service_type = 1;
inline void RelyInfo::clear_rely_service_type() {
  rely_service_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RelyInfo::_internal_rely_service_type() const {
  return rely_service_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RelyInfo::rely_service_type() const {
  // @@protoc_insertion_point(field_get:GrpcProtos.RelyInfo.rely_service_type)
  return _internal_rely_service_type();
}
inline void RelyInfo::_internal_set_rely_service_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rely_service_type_ = value;
}
inline void RelyInfo::set_rely_service_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rely_service_type(value);
  // @@protoc_insertion_point(field_set:GrpcProtos.RelyInfo.rely_service_type)
}

// string rely_semver = 2;
inline void RelyInfo::clear_rely_semver() {
  rely_semver_.ClearToEmpty();
}
inline const std::string& RelyInfo::rely_semver() const {
  // @@protoc_insertion_point(field_get:GrpcProtos.RelyInfo.rely_semver)
  return _internal_rely_semver();
}
inline void RelyInfo::set_rely_semver(const std::string& value) {
  _internal_set_rely_semver(value);
  // @@protoc_insertion_point(field_set:GrpcProtos.RelyInfo.rely_semver)
}
inline std::string* RelyInfo::mutable_rely_semver() {
  // @@protoc_insertion_point(field_mutable:GrpcProtos.RelyInfo.rely_semver)
  return _internal_mutable_rely_semver();
}
inline const std::string& RelyInfo::_internal_rely_semver() const {
  return rely_semver_.Get();
}
inline void RelyInfo::_internal_set_rely_semver(const std::string& value) {
  
  rely_semver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RelyInfo::set_rely_semver(std::string&& value) {
  
  rely_semver_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GrpcProtos.RelyInfo.rely_semver)
}
inline void RelyInfo::set_rely_semver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rely_semver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:GrpcProtos.RelyInfo.rely_semver)
}
inline void RelyInfo::set_rely_semver(const char* value,
    size_t size) {
  
  rely_semver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GrpcProtos.RelyInfo.rely_semver)
}
inline std::string* RelyInfo::_internal_mutable_rely_semver() {
  
  return rely_semver_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RelyInfo::release_rely_semver() {
  // @@protoc_insertion_point(field_release:GrpcProtos.RelyInfo.rely_semver)
  return rely_semver_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RelyInfo::set_allocated_rely_semver(std::string* rely_semver) {
  if (rely_semver != nullptr) {
    
  } else {
    
  }
  rely_semver_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rely_semver,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GrpcProtos.RelyInfo.rely_semver)
}

// -------------------------------------------------------------------

// ServiceInfo

// int32 service_type = 1;
inline void ServiceInfo::clear_service_type() {
  service_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceInfo::_internal_service_type() const {
  return service_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceInfo::service_type() const {
  // @@protoc_insertion_point(field_get:GrpcProtos.ServiceInfo.service_type)
  return _internal_service_type();
}
inline void ServiceInfo::_internal_set_service_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  service_type_ = value;
}
inline void ServiceInfo::set_service_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_service_type(value);
  // @@protoc_insertion_point(field_set:GrpcProtos.ServiceInfo.service_type)
}

// string semver = 2;
inline void ServiceInfo::clear_semver() {
  semver_.ClearToEmpty();
}
inline const std::string& ServiceInfo::semver() const {
  // @@protoc_insertion_point(field_get:GrpcProtos.ServiceInfo.semver)
  return _internal_semver();
}
inline void ServiceInfo::set_semver(const std::string& value) {
  _internal_set_semver(value);
  // @@protoc_insertion_point(field_set:GrpcProtos.ServiceInfo.semver)
}
inline std::string* ServiceInfo::mutable_semver() {
  // @@protoc_insertion_point(field_mutable:GrpcProtos.ServiceInfo.semver)
  return _internal_mutable_semver();
}
inline const std::string& ServiceInfo::_internal_semver() const {
  return semver_.Get();
}
inline void ServiceInfo::_internal_set_semver(const std::string& value) {
  
  semver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServiceInfo::set_semver(std::string&& value) {
  
  semver_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GrpcProtos.ServiceInfo.semver)
}
inline void ServiceInfo::set_semver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  semver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:GrpcProtos.ServiceInfo.semver)
}
inline void ServiceInfo::set_semver(const char* value,
    size_t size) {
  
  semver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GrpcProtos.ServiceInfo.semver)
}
inline std::string* ServiceInfo::_internal_mutable_semver() {
  
  return semver_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServiceInfo::release_semver() {
  // @@protoc_insertion_point(field_release:GrpcProtos.ServiceInfo.semver)
  return semver_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServiceInfo::set_allocated_semver(std::string* semver) {
  if (semver != nullptr) {
    
  } else {
    
  }
  semver_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), semver,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GrpcProtos.ServiceInfo.semver)
}

// string addr = 3;
inline void ServiceInfo::clear_addr() {
  addr_.ClearToEmpty();
}
inline const std::string& ServiceInfo::addr() const {
  // @@protoc_insertion_point(field_get:GrpcProtos.ServiceInfo.addr)
  return _internal_addr();
}
inline void ServiceInfo::set_addr(const std::string& value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:GrpcProtos.ServiceInfo.addr)
}
inline std::string* ServiceInfo::mutable_addr() {
  // @@protoc_insertion_point(field_mutable:GrpcProtos.ServiceInfo.addr)
  return _internal_mutable_addr();
}
inline const std::string& ServiceInfo::_internal_addr() const {
  return addr_.Get();
}
inline void ServiceInfo::_internal_set_addr(const std::string& value) {
  
  addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServiceInfo::set_addr(std::string&& value) {
  
  addr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GrpcProtos.ServiceInfo.addr)
}
inline void ServiceInfo::set_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:GrpcProtos.ServiceInfo.addr)
}
inline void ServiceInfo::set_addr(const char* value,
    size_t size) {
  
  addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GrpcProtos.ServiceInfo.addr)
}
inline std::string* ServiceInfo::_internal_mutable_addr() {
  
  return addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServiceInfo::release_addr() {
  // @@protoc_insertion_point(field_release:GrpcProtos.ServiceInfo.addr)
  return addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServiceInfo::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GrpcProtos.ServiceInfo.addr)
}

// string host_name = 4;
inline void ServiceInfo::clear_host_name() {
  host_name_.ClearToEmpty();
}
inline const std::string& ServiceInfo::host_name() const {
  // @@protoc_insertion_point(field_get:GrpcProtos.ServiceInfo.host_name)
  return _internal_host_name();
}
inline void ServiceInfo::set_host_name(const std::string& value) {
  _internal_set_host_name(value);
  // @@protoc_insertion_point(field_set:GrpcProtos.ServiceInfo.host_name)
}
inline std::string* ServiceInfo::mutable_host_name() {
  // @@protoc_insertion_point(field_mutable:GrpcProtos.ServiceInfo.host_name)
  return _internal_mutable_host_name();
}
inline const std::string& ServiceInfo::_internal_host_name() const {
  return host_name_.Get();
}
inline void ServiceInfo::_internal_set_host_name(const std::string& value) {
  
  host_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServiceInfo::set_host_name(std::string&& value) {
  
  host_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GrpcProtos.ServiceInfo.host_name)
}
inline void ServiceInfo::set_host_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:GrpcProtos.ServiceInfo.host_name)
}
inline void ServiceInfo::set_host_name(const char* value,
    size_t size) {
  
  host_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GrpcProtos.ServiceInfo.host_name)
}
inline std::string* ServiceInfo::_internal_mutable_host_name() {
  
  return host_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServiceInfo::release_host_name() {
  // @@protoc_insertion_point(field_release:GrpcProtos.ServiceInfo.host_name)
  return host_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServiceInfo::set_allocated_host_name(std::string* host_name) {
  if (host_name != nullptr) {
    
  } else {
    
  }
  host_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GrpcProtos.ServiceInfo.host_name)
}

// int32 status = 5;
inline void ServiceInfo::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceInfo::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceInfo::status() const {
  // @@protoc_insertion_point(field_get:GrpcProtos.ServiceInfo.status)
  return _internal_status();
}
inline void ServiceInfo::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void ServiceInfo::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:GrpcProtos.ServiceInfo.status)
}

// repeated .GrpcProtos.RelyInfo rely_list = 6;
inline int ServiceInfo::_internal_rely_list_size() const {
  return rely_list_.size();
}
inline int ServiceInfo::rely_list_size() const {
  return _internal_rely_list_size();
}
inline void ServiceInfo::clear_rely_list() {
  rely_list_.Clear();
}
inline ::GrpcProtos::RelyInfo* ServiceInfo::mutable_rely_list(int index) {
  // @@protoc_insertion_point(field_mutable:GrpcProtos.ServiceInfo.rely_list)
  return rely_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GrpcProtos::RelyInfo >*
ServiceInfo::mutable_rely_list() {
  // @@protoc_insertion_point(field_mutable_list:GrpcProtos.ServiceInfo.rely_list)
  return &rely_list_;
}
inline const ::GrpcProtos::RelyInfo& ServiceInfo::_internal_rely_list(int index) const {
  return rely_list_.Get(index);
}
inline const ::GrpcProtos::RelyInfo& ServiceInfo::rely_list(int index) const {
  // @@protoc_insertion_point(field_get:GrpcProtos.ServiceInfo.rely_list)
  return _internal_rely_list(index);
}
inline ::GrpcProtos::RelyInfo* ServiceInfo::_internal_add_rely_list() {
  return rely_list_.Add();
}
inline ::GrpcProtos::RelyInfo* ServiceInfo::add_rely_list() {
  // @@protoc_insertion_point(field_add:GrpcProtos.ServiceInfo.rely_list)
  return _internal_add_rely_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GrpcProtos::RelyInfo >&
ServiceInfo::rely_list() const {
  // @@protoc_insertion_point(field_list:GrpcProtos.ServiceInfo.rely_list)
  return rely_list_;
}

// int32 service_weight = 7;
inline void ServiceInfo::clear_service_weight() {
  service_weight_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceInfo::_internal_service_weight() const {
  return service_weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceInfo::service_weight() const {
  // @@protoc_insertion_point(field_get:GrpcProtos.ServiceInfo.service_weight)
  return _internal_service_weight();
}
inline void ServiceInfo::_internal_set_service_weight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  service_weight_ = value;
}
inline void ServiceInfo::set_service_weight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_service_weight(value);
  // @@protoc_insertion_point(field_set:GrpcProtos.ServiceInfo.service_weight)
}

// int32 connect_mode = 8;
inline void ServiceInfo::clear_connect_mode() {
  connect_mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceInfo::_internal_connect_mode() const {
  return connect_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceInfo::connect_mode() const {
  // @@protoc_insertion_point(field_get:GrpcProtos.ServiceInfo.connect_mode)
  return _internal_connect_mode();
}
inline void ServiceInfo::_internal_set_connect_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  connect_mode_ = value;
}
inline void ServiceInfo::set_connect_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_connect_mode(value);
  // @@protoc_insertion_point(field_set:GrpcProtos.ServiceInfo.connect_mode)
}

// string group_tab = 9;
inline void ServiceInfo::clear_group_tab() {
  group_tab_.ClearToEmpty();
}
inline const std::string& ServiceInfo::group_tab() const {
  // @@protoc_insertion_point(field_get:GrpcProtos.ServiceInfo.group_tab)
  return _internal_group_tab();
}
inline void ServiceInfo::set_group_tab(const std::string& value) {
  _internal_set_group_tab(value);
  // @@protoc_insertion_point(field_set:GrpcProtos.ServiceInfo.group_tab)
}
inline std::string* ServiceInfo::mutable_group_tab() {
  // @@protoc_insertion_point(field_mutable:GrpcProtos.ServiceInfo.group_tab)
  return _internal_mutable_group_tab();
}
inline const std::string& ServiceInfo::_internal_group_tab() const {
  return group_tab_.Get();
}
inline void ServiceInfo::_internal_set_group_tab(const std::string& value) {
  
  group_tab_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServiceInfo::set_group_tab(std::string&& value) {
  
  group_tab_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GrpcProtos.ServiceInfo.group_tab)
}
inline void ServiceInfo::set_group_tab(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_tab_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:GrpcProtos.ServiceInfo.group_tab)
}
inline void ServiceInfo::set_group_tab(const char* value,
    size_t size) {
  
  group_tab_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GrpcProtos.ServiceInfo.group_tab)
}
inline std::string* ServiceInfo::_internal_mutable_group_tab() {
  
  return group_tab_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServiceInfo::release_group_tab() {
  // @@protoc_insertion_point(field_release:GrpcProtos.ServiceInfo.group_tab)
  return group_tab_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServiceInfo::set_allocated_group_tab(std::string* group_tab) {
  if (group_tab != nullptr) {
    
  } else {
    
  }
  group_tab_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_tab,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GrpcProtos.ServiceInfo.group_tab)
}

// string service_name = 10;
inline void ServiceInfo::clear_service_name() {
  service_name_.ClearToEmpty();
}
inline const std::string& ServiceInfo::service_name() const {
  // @@protoc_insertion_point(field_get:GrpcProtos.ServiceInfo.service_name)
  return _internal_service_name();
}
inline void ServiceInfo::set_service_name(const std::string& value) {
  _internal_set_service_name(value);
  // @@protoc_insertion_point(field_set:GrpcProtos.ServiceInfo.service_name)
}
inline std::string* ServiceInfo::mutable_service_name() {
  // @@protoc_insertion_point(field_mutable:GrpcProtos.ServiceInfo.service_name)
  return _internal_mutable_service_name();
}
inline const std::string& ServiceInfo::_internal_service_name() const {
  return service_name_.Get();
}
inline void ServiceInfo::_internal_set_service_name(const std::string& value) {
  
  service_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServiceInfo::set_service_name(std::string&& value) {
  
  service_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GrpcProtos.ServiceInfo.service_name)
}
inline void ServiceInfo::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:GrpcProtos.ServiceInfo.service_name)
}
inline void ServiceInfo::set_service_name(const char* value,
    size_t size) {
  
  service_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GrpcProtos.ServiceInfo.service_name)
}
inline std::string* ServiceInfo::_internal_mutable_service_name() {
  
  return service_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServiceInfo::release_service_name() {
  // @@protoc_insertion_point(field_release:GrpcProtos.ServiceInfo.service_name)
  return service_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServiceInfo::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GrpcProtos.ServiceInfo.service_name)
}

// string nickname = 11;
inline void ServiceInfo::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& ServiceInfo::nickname() const {
  // @@protoc_insertion_point(field_get:GrpcProtos.ServiceInfo.nickname)
  return _internal_nickname();
}
inline void ServiceInfo::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:GrpcProtos.ServiceInfo.nickname)
}
inline std::string* ServiceInfo::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:GrpcProtos.ServiceInfo.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& ServiceInfo::_internal_nickname() const {
  return nickname_.Get();
}
inline void ServiceInfo::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServiceInfo::set_nickname(std::string&& value) {
  
  nickname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GrpcProtos.ServiceInfo.nickname)
}
inline void ServiceInfo::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:GrpcProtos.ServiceInfo.nickname)
}
inline void ServiceInfo::set_nickname(const char* value,
    size_t size) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GrpcProtos.ServiceInfo.nickname)
}
inline std::string* ServiceInfo::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServiceInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:GrpcProtos.ServiceInfo.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServiceInfo::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GrpcProtos.ServiceInfo.nickname)
}

// -------------------------------------------------------------------

// WatchServiceInfo

// int32 service_type = 1;
inline void WatchServiceInfo::clear_service_type() {
  service_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WatchServiceInfo::_internal_service_type() const {
  return service_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WatchServiceInfo::service_type() const {
  // @@protoc_insertion_point(field_get:GrpcProtos.WatchServiceInfo.service_type)
  return _internal_service_type();
}
inline void WatchServiceInfo::_internal_set_service_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  service_type_ = value;
}
inline void WatchServiceInfo::set_service_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_service_type(value);
  // @@protoc_insertion_point(field_set:GrpcProtos.WatchServiceInfo.service_type)
}

// repeated .GrpcProtos.ServiceInfo service_list = 2;
inline int WatchServiceInfo::_internal_service_list_size() const {
  return service_list_.size();
}
inline int WatchServiceInfo::service_list_size() const {
  return _internal_service_list_size();
}
inline void WatchServiceInfo::clear_service_list() {
  service_list_.Clear();
}
inline ::GrpcProtos::ServiceInfo* WatchServiceInfo::mutable_service_list(int index) {
  // @@protoc_insertion_point(field_mutable:GrpcProtos.WatchServiceInfo.service_list)
  return service_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GrpcProtos::ServiceInfo >*
WatchServiceInfo::mutable_service_list() {
  // @@protoc_insertion_point(field_mutable_list:GrpcProtos.WatchServiceInfo.service_list)
  return &service_list_;
}
inline const ::GrpcProtos::ServiceInfo& WatchServiceInfo::_internal_service_list(int index) const {
  return service_list_.Get(index);
}
inline const ::GrpcProtos::ServiceInfo& WatchServiceInfo::service_list(int index) const {
  // @@protoc_insertion_point(field_get:GrpcProtos.WatchServiceInfo.service_list)
  return _internal_service_list(index);
}
inline ::GrpcProtos::ServiceInfo* WatchServiceInfo::_internal_add_service_list() {
  return service_list_.Add();
}
inline ::GrpcProtos::ServiceInfo* WatchServiceInfo::add_service_list() {
  // @@protoc_insertion_point(field_add:GrpcProtos.WatchServiceInfo.service_list)
  return _internal_add_service_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GrpcProtos::ServiceInfo >&
WatchServiceInfo::service_list() const {
  // @@protoc_insertion_point(field_list:GrpcProtos.WatchServiceInfo.service_list)
  return service_list_;
}

// -------------------------------------------------------------------

// RegisterRequest

// .GrpcProtos.ServiceInfo service_info = 1;
inline bool RegisterRequest::_internal_has_service_info() const {
  return this != internal_default_instance() && service_info_ != nullptr;
}
inline bool RegisterRequest::has_service_info() const {
  return _internal_has_service_info();
}
inline void RegisterRequest::clear_service_info() {
  if (GetArena() == nullptr && service_info_ != nullptr) {
    delete service_info_;
  }
  service_info_ = nullptr;
}
inline const ::GrpcProtos::ServiceInfo& RegisterRequest::_internal_service_info() const {
  const ::GrpcProtos::ServiceInfo* p = service_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::GrpcProtos::ServiceInfo&>(
      ::GrpcProtos::_ServiceInfo_default_instance_);
}
inline const ::GrpcProtos::ServiceInfo& RegisterRequest::service_info() const {
  // @@protoc_insertion_point(field_get:GrpcProtos.RegisterRequest.service_info)
  return _internal_service_info();
}
inline void RegisterRequest::unsafe_arena_set_allocated_service_info(
    ::GrpcProtos::ServiceInfo* service_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(service_info_);
  }
  service_info_ = service_info;
  if (service_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GrpcProtos.RegisterRequest.service_info)
}
inline ::GrpcProtos::ServiceInfo* RegisterRequest::release_service_info() {
  
  ::GrpcProtos::ServiceInfo* temp = service_info_;
  service_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::GrpcProtos::ServiceInfo* RegisterRequest::unsafe_arena_release_service_info() {
  // @@protoc_insertion_point(field_release:GrpcProtos.RegisterRequest.service_info)
  
  ::GrpcProtos::ServiceInfo* temp = service_info_;
  service_info_ = nullptr;
  return temp;
}
inline ::GrpcProtos::ServiceInfo* RegisterRequest::_internal_mutable_service_info() {
  
  if (service_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::GrpcProtos::ServiceInfo>(GetArena());
    service_info_ = p;
  }
  return service_info_;
}
inline ::GrpcProtos::ServiceInfo* RegisterRequest::mutable_service_info() {
  // @@protoc_insertion_point(field_mutable:GrpcProtos.RegisterRequest.service_info)
  return _internal_mutable_service_info();
}
inline void RegisterRequest::set_allocated_service_info(::GrpcProtos::ServiceInfo* service_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete service_info_;
  }
  if (service_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(service_info);
    if (message_arena != submessage_arena) {
      service_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service_info, submessage_arena);
    }
    
  } else {
    
  }
  service_info_ = service_info;
  // @@protoc_insertion_point(field_set_allocated:GrpcProtos.RegisterRequest.service_info)
}

// -------------------------------------------------------------------

// RegisterReply

// repeated .GrpcProtos.WatchServiceInfo watch_list = 1;
inline int RegisterReply::_internal_watch_list_size() const {
  return watch_list_.size();
}
inline int RegisterReply::watch_list_size() const {
  return _internal_watch_list_size();
}
inline void RegisterReply::clear_watch_list() {
  watch_list_.Clear();
}
inline ::GrpcProtos::WatchServiceInfo* RegisterReply::mutable_watch_list(int index) {
  // @@protoc_insertion_point(field_mutable:GrpcProtos.RegisterReply.watch_list)
  return watch_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GrpcProtos::WatchServiceInfo >*
RegisterReply::mutable_watch_list() {
  // @@protoc_insertion_point(field_mutable_list:GrpcProtos.RegisterReply.watch_list)
  return &watch_list_;
}
inline const ::GrpcProtos::WatchServiceInfo& RegisterReply::_internal_watch_list(int index) const {
  return watch_list_.Get(index);
}
inline const ::GrpcProtos::WatchServiceInfo& RegisterReply::watch_list(int index) const {
  // @@protoc_insertion_point(field_get:GrpcProtos.RegisterReply.watch_list)
  return _internal_watch_list(index);
}
inline ::GrpcProtos::WatchServiceInfo* RegisterReply::_internal_add_watch_list() {
  return watch_list_.Add();
}
inline ::GrpcProtos::WatchServiceInfo* RegisterReply::add_watch_list() {
  // @@protoc_insertion_point(field_add:GrpcProtos.RegisterReply.watch_list)
  return _internal_add_watch_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GrpcProtos::WatchServiceInfo >&
RegisterReply::watch_list() const {
  // @@protoc_insertion_point(field_list:GrpcProtos.RegisterReply.watch_list)
  return watch_list_;
}

// -------------------------------------------------------------------

// OnlineRequest

// .GrpcProtos.ServiceInfo service_info = 1;
inline bool OnlineRequest::_internal_has_service_info() const {
  return this != internal_default_instance() && service_info_ != nullptr;
}
inline bool OnlineRequest::has_service_info() const {
  return _internal_has_service_info();
}
inline void OnlineRequest::clear_service_info() {
  if (GetArena() == nullptr && service_info_ != nullptr) {
    delete service_info_;
  }
  service_info_ = nullptr;
}
inline const ::GrpcProtos::ServiceInfo& OnlineRequest::_internal_service_info() const {
  const ::GrpcProtos::ServiceInfo* p = service_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::GrpcProtos::ServiceInfo&>(
      ::GrpcProtos::_ServiceInfo_default_instance_);
}
inline const ::GrpcProtos::ServiceInfo& OnlineRequest::service_info() const {
  // @@protoc_insertion_point(field_get:GrpcProtos.OnlineRequest.service_info)
  return _internal_service_info();
}
inline void OnlineRequest::unsafe_arena_set_allocated_service_info(
    ::GrpcProtos::ServiceInfo* service_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(service_info_);
  }
  service_info_ = service_info;
  if (service_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GrpcProtos.OnlineRequest.service_info)
}
inline ::GrpcProtos::ServiceInfo* OnlineRequest::release_service_info() {
  
  ::GrpcProtos::ServiceInfo* temp = service_info_;
  service_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::GrpcProtos::ServiceInfo* OnlineRequest::unsafe_arena_release_service_info() {
  // @@protoc_insertion_point(field_release:GrpcProtos.OnlineRequest.service_info)
  
  ::GrpcProtos::ServiceInfo* temp = service_info_;
  service_info_ = nullptr;
  return temp;
}
inline ::GrpcProtos::ServiceInfo* OnlineRequest::_internal_mutable_service_info() {
  
  if (service_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::GrpcProtos::ServiceInfo>(GetArena());
    service_info_ = p;
  }
  return service_info_;
}
inline ::GrpcProtos::ServiceInfo* OnlineRequest::mutable_service_info() {
  // @@protoc_insertion_point(field_mutable:GrpcProtos.OnlineRequest.service_info)
  return _internal_mutable_service_info();
}
inline void OnlineRequest::set_allocated_service_info(::GrpcProtos::ServiceInfo* service_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete service_info_;
  }
  if (service_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(service_info);
    if (message_arena != submessage_arena) {
      service_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service_info, submessage_arena);
    }
    
  } else {
    
  }
  service_info_ = service_info;
  // @@protoc_insertion_point(field_set_allocated:GrpcProtos.OnlineRequest.service_info)
}

// -------------------------------------------------------------------

// OnlineReply

// repeated .GrpcProtos.WatchServiceInfo watch_list = 1;
inline int OnlineReply::_internal_watch_list_size() const {
  return watch_list_.size();
}
inline int OnlineReply::watch_list_size() const {
  return _internal_watch_list_size();
}
inline void OnlineReply::clear_watch_list() {
  watch_list_.Clear();
}
inline ::GrpcProtos::WatchServiceInfo* OnlineReply::mutable_watch_list(int index) {
  // @@protoc_insertion_point(field_mutable:GrpcProtos.OnlineReply.watch_list)
  return watch_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GrpcProtos::WatchServiceInfo >*
OnlineReply::mutable_watch_list() {
  // @@protoc_insertion_point(field_mutable_list:GrpcProtos.OnlineReply.watch_list)
  return &watch_list_;
}
inline const ::GrpcProtos::WatchServiceInfo& OnlineReply::_internal_watch_list(int index) const {
  return watch_list_.Get(index);
}
inline const ::GrpcProtos::WatchServiceInfo& OnlineReply::watch_list(int index) const {
  // @@protoc_insertion_point(field_get:GrpcProtos.OnlineReply.watch_list)
  return _internal_watch_list(index);
}
inline ::GrpcProtos::WatchServiceInfo* OnlineReply::_internal_add_watch_list() {
  return watch_list_.Add();
}
inline ::GrpcProtos::WatchServiceInfo* OnlineReply::add_watch_list() {
  // @@protoc_insertion_point(field_add:GrpcProtos.OnlineReply.watch_list)
  return _internal_add_watch_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GrpcProtos::WatchServiceInfo >&
OnlineReply::watch_list() const {
  // @@protoc_insertion_point(field_list:GrpcProtos.OnlineReply.watch_list)
  return watch_list_;
}

// -------------------------------------------------------------------

// OfflineRequest

// .GrpcProtos.ServiceInfo service_info = 1;
inline bool OfflineRequest::_internal_has_service_info() const {
  return this != internal_default_instance() && service_info_ != nullptr;
}
inline bool OfflineRequest::has_service_info() const {
  return _internal_has_service_info();
}
inline void OfflineRequest::clear_service_info() {
  if (GetArena() == nullptr && service_info_ != nullptr) {
    delete service_info_;
  }
  service_info_ = nullptr;
}
inline const ::GrpcProtos::ServiceInfo& OfflineRequest::_internal_service_info() const {
  const ::GrpcProtos::ServiceInfo* p = service_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::GrpcProtos::ServiceInfo&>(
      ::GrpcProtos::_ServiceInfo_default_instance_);
}
inline const ::GrpcProtos::ServiceInfo& OfflineRequest::service_info() const {
  // @@protoc_insertion_point(field_get:GrpcProtos.OfflineRequest.service_info)
  return _internal_service_info();
}
inline void OfflineRequest::unsafe_arena_set_allocated_service_info(
    ::GrpcProtos::ServiceInfo* service_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(service_info_);
  }
  service_info_ = service_info;
  if (service_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GrpcProtos.OfflineRequest.service_info)
}
inline ::GrpcProtos::ServiceInfo* OfflineRequest::release_service_info() {
  
  ::GrpcProtos::ServiceInfo* temp = service_info_;
  service_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::GrpcProtos::ServiceInfo* OfflineRequest::unsafe_arena_release_service_info() {
  // @@protoc_insertion_point(field_release:GrpcProtos.OfflineRequest.service_info)
  
  ::GrpcProtos::ServiceInfo* temp = service_info_;
  service_info_ = nullptr;
  return temp;
}
inline ::GrpcProtos::ServiceInfo* OfflineRequest::_internal_mutable_service_info() {
  
  if (service_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::GrpcProtos::ServiceInfo>(GetArena());
    service_info_ = p;
  }
  return service_info_;
}
inline ::GrpcProtos::ServiceInfo* OfflineRequest::mutable_service_info() {
  // @@protoc_insertion_point(field_mutable:GrpcProtos.OfflineRequest.service_info)
  return _internal_mutable_service_info();
}
inline void OfflineRequest::set_allocated_service_info(::GrpcProtos::ServiceInfo* service_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete service_info_;
  }
  if (service_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(service_info);
    if (message_arena != submessage_arena) {
      service_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service_info, submessage_arena);
    }
    
  } else {
    
  }
  service_info_ = service_info;
  // @@protoc_insertion_point(field_set_allocated:GrpcProtos.OfflineRequest.service_info)
}

// -------------------------------------------------------------------

// PingRequest

// .GrpcProtos.ServiceInfo service_info = 1;
inline bool PingRequest::_internal_has_service_info() const {
  return this != internal_default_instance() && service_info_ != nullptr;
}
inline bool PingRequest::has_service_info() const {
  return _internal_has_service_info();
}
inline void PingRequest::clear_service_info() {
  if (GetArena() == nullptr && service_info_ != nullptr) {
    delete service_info_;
  }
  service_info_ = nullptr;
}
inline const ::GrpcProtos::ServiceInfo& PingRequest::_internal_service_info() const {
  const ::GrpcProtos::ServiceInfo* p = service_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::GrpcProtos::ServiceInfo&>(
      ::GrpcProtos::_ServiceInfo_default_instance_);
}
inline const ::GrpcProtos::ServiceInfo& PingRequest::service_info() const {
  // @@protoc_insertion_point(field_get:GrpcProtos.PingRequest.service_info)
  return _internal_service_info();
}
inline void PingRequest::unsafe_arena_set_allocated_service_info(
    ::GrpcProtos::ServiceInfo* service_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(service_info_);
  }
  service_info_ = service_info;
  if (service_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GrpcProtos.PingRequest.service_info)
}
inline ::GrpcProtos::ServiceInfo* PingRequest::release_service_info() {
  
  ::GrpcProtos::ServiceInfo* temp = service_info_;
  service_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::GrpcProtos::ServiceInfo* PingRequest::unsafe_arena_release_service_info() {
  // @@protoc_insertion_point(field_release:GrpcProtos.PingRequest.service_info)
  
  ::GrpcProtos::ServiceInfo* temp = service_info_;
  service_info_ = nullptr;
  return temp;
}
inline ::GrpcProtos::ServiceInfo* PingRequest::_internal_mutable_service_info() {
  
  if (service_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::GrpcProtos::ServiceInfo>(GetArena());
    service_info_ = p;
  }
  return service_info_;
}
inline ::GrpcProtos::ServiceInfo* PingRequest::mutable_service_info() {
  // @@protoc_insertion_point(field_mutable:GrpcProtos.PingRequest.service_info)
  return _internal_mutable_service_info();
}
inline void PingRequest::set_allocated_service_info(::GrpcProtos::ServiceInfo* service_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete service_info_;
  }
  if (service_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(service_info);
    if (message_arena != submessage_arena) {
      service_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service_info, submessage_arena);
    }
    
  } else {
    
  }
  service_info_ = service_info;
  // @@protoc_insertion_point(field_set_allocated:GrpcProtos.PingRequest.service_info)
}

// -------------------------------------------------------------------

// CheckRequest

// .GrpcProtos.ServiceInfo service_info = 1;
inline bool CheckRequest::_internal_has_service_info() const {
  return this != internal_default_instance() && service_info_ != nullptr;
}
inline bool CheckRequest::has_service_info() const {
  return _internal_has_service_info();
}
inline void CheckRequest::clear_service_info() {
  if (GetArena() == nullptr && service_info_ != nullptr) {
    delete service_info_;
  }
  service_info_ = nullptr;
}
inline const ::GrpcProtos::ServiceInfo& CheckRequest::_internal_service_info() const {
  const ::GrpcProtos::ServiceInfo* p = service_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::GrpcProtos::ServiceInfo&>(
      ::GrpcProtos::_ServiceInfo_default_instance_);
}
inline const ::GrpcProtos::ServiceInfo& CheckRequest::service_info() const {
  // @@protoc_insertion_point(field_get:GrpcProtos.CheckRequest.service_info)
  return _internal_service_info();
}
inline void CheckRequest::unsafe_arena_set_allocated_service_info(
    ::GrpcProtos::ServiceInfo* service_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(service_info_);
  }
  service_info_ = service_info;
  if (service_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GrpcProtos.CheckRequest.service_info)
}
inline ::GrpcProtos::ServiceInfo* CheckRequest::release_service_info() {
  
  ::GrpcProtos::ServiceInfo* temp = service_info_;
  service_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::GrpcProtos::ServiceInfo* CheckRequest::unsafe_arena_release_service_info() {
  // @@protoc_insertion_point(field_release:GrpcProtos.CheckRequest.service_info)
  
  ::GrpcProtos::ServiceInfo* temp = service_info_;
  service_info_ = nullptr;
  return temp;
}
inline ::GrpcProtos::ServiceInfo* CheckRequest::_internal_mutable_service_info() {
  
  if (service_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::GrpcProtos::ServiceInfo>(GetArena());
    service_info_ = p;
  }
  return service_info_;
}
inline ::GrpcProtos::ServiceInfo* CheckRequest::mutable_service_info() {
  // @@protoc_insertion_point(field_mutable:GrpcProtos.CheckRequest.service_info)
  return _internal_mutable_service_info();
}
inline void CheckRequest::set_allocated_service_info(::GrpcProtos::ServiceInfo* service_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete service_info_;
  }
  if (service_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(service_info);
    if (message_arena != submessage_arena) {
      service_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service_info, submessage_arena);
    }
    
  } else {
    
  }
  service_info_ = service_info;
  // @@protoc_insertion_point(field_set_allocated:GrpcProtos.CheckRequest.service_info)
}

// repeated .GrpcProtos.WatchServiceInfo watch_list = 2;
inline int CheckRequest::_internal_watch_list_size() const {
  return watch_list_.size();
}
inline int CheckRequest::watch_list_size() const {
  return _internal_watch_list_size();
}
inline void CheckRequest::clear_watch_list() {
  watch_list_.Clear();
}
inline ::GrpcProtos::WatchServiceInfo* CheckRequest::mutable_watch_list(int index) {
  // @@protoc_insertion_point(field_mutable:GrpcProtos.CheckRequest.watch_list)
  return watch_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GrpcProtos::WatchServiceInfo >*
CheckRequest::mutable_watch_list() {
  // @@protoc_insertion_point(field_mutable_list:GrpcProtos.CheckRequest.watch_list)
  return &watch_list_;
}
inline const ::GrpcProtos::WatchServiceInfo& CheckRequest::_internal_watch_list(int index) const {
  return watch_list_.Get(index);
}
inline const ::GrpcProtos::WatchServiceInfo& CheckRequest::watch_list(int index) const {
  // @@protoc_insertion_point(field_get:GrpcProtos.CheckRequest.watch_list)
  return _internal_watch_list(index);
}
inline ::GrpcProtos::WatchServiceInfo* CheckRequest::_internal_add_watch_list() {
  return watch_list_.Add();
}
inline ::GrpcProtos::WatchServiceInfo* CheckRequest::add_watch_list() {
  // @@protoc_insertion_point(field_add:GrpcProtos.CheckRequest.watch_list)
  return _internal_add_watch_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GrpcProtos::WatchServiceInfo >&
CheckRequest::watch_list() const {
  // @@protoc_insertion_point(field_list:GrpcProtos.CheckRequest.watch_list)
  return watch_list_;
}

// -------------------------------------------------------------------

// CheckReply

// repeated .GrpcProtos.WatchServiceInfo watch_list = 1;
inline int CheckReply::_internal_watch_list_size() const {
  return watch_list_.size();
}
inline int CheckReply::watch_list_size() const {
  return _internal_watch_list_size();
}
inline void CheckReply::clear_watch_list() {
  watch_list_.Clear();
}
inline ::GrpcProtos::WatchServiceInfo* CheckReply::mutable_watch_list(int index) {
  // @@protoc_insertion_point(field_mutable:GrpcProtos.CheckReply.watch_list)
  return watch_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GrpcProtos::WatchServiceInfo >*
CheckReply::mutable_watch_list() {
  // @@protoc_insertion_point(field_mutable_list:GrpcProtos.CheckReply.watch_list)
  return &watch_list_;
}
inline const ::GrpcProtos::WatchServiceInfo& CheckReply::_internal_watch_list(int index) const {
  return watch_list_.Get(index);
}
inline const ::GrpcProtos::WatchServiceInfo& CheckReply::watch_list(int index) const {
  // @@protoc_insertion_point(field_get:GrpcProtos.CheckReply.watch_list)
  return _internal_watch_list(index);
}
inline ::GrpcProtos::WatchServiceInfo* CheckReply::_internal_add_watch_list() {
  return watch_list_.Add();
}
inline ::GrpcProtos::WatchServiceInfo* CheckReply::add_watch_list() {
  // @@protoc_insertion_point(field_add:GrpcProtos.CheckReply.watch_list)
  return _internal_add_watch_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GrpcProtos::WatchServiceInfo >&
CheckReply::watch_list() const {
  // @@protoc_insertion_point(field_list:GrpcProtos.CheckReply.watch_list)
  return watch_list_;
}

// -------------------------------------------------------------------

// ReloadRequest

// .GrpcProtos.ServiceInfo service_info = 1;
inline bool ReloadRequest::_internal_has_service_info() const {
  return this != internal_default_instance() && service_info_ != nullptr;
}
inline bool ReloadRequest::has_service_info() const {
  return _internal_has_service_info();
}
inline void ReloadRequest::clear_service_info() {
  if (GetArena() == nullptr && service_info_ != nullptr) {
    delete service_info_;
  }
  service_info_ = nullptr;
}
inline const ::GrpcProtos::ServiceInfo& ReloadRequest::_internal_service_info() const {
  const ::GrpcProtos::ServiceInfo* p = service_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::GrpcProtos::ServiceInfo&>(
      ::GrpcProtos::_ServiceInfo_default_instance_);
}
inline const ::GrpcProtos::ServiceInfo& ReloadRequest::service_info() const {
  // @@protoc_insertion_point(field_get:GrpcProtos.ReloadRequest.service_info)
  return _internal_service_info();
}
inline void ReloadRequest::unsafe_arena_set_allocated_service_info(
    ::GrpcProtos::ServiceInfo* service_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(service_info_);
  }
  service_info_ = service_info;
  if (service_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GrpcProtos.ReloadRequest.service_info)
}
inline ::GrpcProtos::ServiceInfo* ReloadRequest::release_service_info() {
  
  ::GrpcProtos::ServiceInfo* temp = service_info_;
  service_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::GrpcProtos::ServiceInfo* ReloadRequest::unsafe_arena_release_service_info() {
  // @@protoc_insertion_point(field_release:GrpcProtos.ReloadRequest.service_info)
  
  ::GrpcProtos::ServiceInfo* temp = service_info_;
  service_info_ = nullptr;
  return temp;
}
inline ::GrpcProtos::ServiceInfo* ReloadRequest::_internal_mutable_service_info() {
  
  if (service_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::GrpcProtos::ServiceInfo>(GetArena());
    service_info_ = p;
  }
  return service_info_;
}
inline ::GrpcProtos::ServiceInfo* ReloadRequest::mutable_service_info() {
  // @@protoc_insertion_point(field_mutable:GrpcProtos.ReloadRequest.service_info)
  return _internal_mutable_service_info();
}
inline void ReloadRequest::set_allocated_service_info(::GrpcProtos::ServiceInfo* service_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete service_info_;
  }
  if (service_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(service_info);
    if (message_arena != submessage_arena) {
      service_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service_info, submessage_arena);
    }
    
  } else {
    
  }
  service_info_ = service_info;
  // @@protoc_insertion_point(field_set_allocated:GrpcProtos.ReloadRequest.service_info)
}

// -------------------------------------------------------------------

// NotifyRequest

// .GrpcProtos.ServiceInfo service_info = 1;
inline bool NotifyRequest::_internal_has_service_info() const {
  return this != internal_default_instance() && service_info_ != nullptr;
}
inline bool NotifyRequest::has_service_info() const {
  return _internal_has_service_info();
}
inline void NotifyRequest::clear_service_info() {
  if (GetArena() == nullptr && service_info_ != nullptr) {
    delete service_info_;
  }
  service_info_ = nullptr;
}
inline const ::GrpcProtos::ServiceInfo& NotifyRequest::_internal_service_info() const {
  const ::GrpcProtos::ServiceInfo* p = service_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::GrpcProtos::ServiceInfo&>(
      ::GrpcProtos::_ServiceInfo_default_instance_);
}
inline const ::GrpcProtos::ServiceInfo& NotifyRequest::service_info() const {
  // @@protoc_insertion_point(field_get:GrpcProtos.NotifyRequest.service_info)
  return _internal_service_info();
}
inline void NotifyRequest::unsafe_arena_set_allocated_service_info(
    ::GrpcProtos::ServiceInfo* service_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(service_info_);
  }
  service_info_ = service_info;
  if (service_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GrpcProtos.NotifyRequest.service_info)
}
inline ::GrpcProtos::ServiceInfo* NotifyRequest::release_service_info() {
  
  ::GrpcProtos::ServiceInfo* temp = service_info_;
  service_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::GrpcProtos::ServiceInfo* NotifyRequest::unsafe_arena_release_service_info() {
  // @@protoc_insertion_point(field_release:GrpcProtos.NotifyRequest.service_info)
  
  ::GrpcProtos::ServiceInfo* temp = service_info_;
  service_info_ = nullptr;
  return temp;
}
inline ::GrpcProtos::ServiceInfo* NotifyRequest::_internal_mutable_service_info() {
  
  if (service_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::GrpcProtos::ServiceInfo>(GetArena());
    service_info_ = p;
  }
  return service_info_;
}
inline ::GrpcProtos::ServiceInfo* NotifyRequest::mutable_service_info() {
  // @@protoc_insertion_point(field_mutable:GrpcProtos.NotifyRequest.service_info)
  return _internal_mutable_service_info();
}
inline void NotifyRequest::set_allocated_service_info(::GrpcProtos::ServiceInfo* service_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete service_info_;
  }
  if (service_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(service_info);
    if (message_arena != submessage_arena) {
      service_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service_info, submessage_arena);
    }
    
  } else {
    
  }
  service_info_ = service_info;
  // @@protoc_insertion_point(field_set_allocated:GrpcProtos.NotifyRequest.service_info)
}

// -------------------------------------------------------------------

// EmptyResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace GrpcProtos

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::GrpcProtos::ServiceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GrpcProtos::ServiceType>() {
  return ::GrpcProtos::ServiceType_descriptor();
}
template <> struct is_proto_enum< ::GrpcProtos::CmdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GrpcProtos::CmdType>() {
  return ::GrpcProtos::CmdType_descriptor();
}
template <> struct is_proto_enum< ::GrpcProtos::ResultType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GrpcProtos::ResultType>() {
  return ::GrpcProtos::ResultType_descriptor();
}
template <> struct is_proto_enum< ::GrpcProtos::ServiceStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GrpcProtos::ServiceStatus>() {
  return ::GrpcProtos::ServiceStatus_descriptor();
}
template <> struct is_proto_enum< ::GrpcProtos::ConnectMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GrpcProtos::ConnectMode>() {
  return ::GrpcProtos::ConnectMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proxy_2fCommon_2eproto
