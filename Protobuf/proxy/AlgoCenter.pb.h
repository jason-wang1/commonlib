// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proxy/AlgoCenter.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proxy_2fAlgoCenter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proxy_2fAlgoCenter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proxy_2fAlgoCenter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proxy_2fAlgoCenter_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proxy_2fAlgoCenter_2eproto;
namespace COMM_AlgoCenter {
class AlgoCenterRequest;
class AlgoCenterRequestDefaultTypeInternal;
extern AlgoCenterRequestDefaultTypeInternal _AlgoCenterRequest_default_instance_;
class AlgoCenterResponse;
class AlgoCenterResponseDefaultTypeInternal;
extern AlgoCenterResponseDefaultTypeInternal _AlgoCenterResponse_default_instance_;
class ItemData;
class ItemDataDefaultTypeInternal;
extern ItemDataDefaultTypeInternal _ItemData_default_instance_;
}  // namespace COMM_AlgoCenter
PROTOBUF_NAMESPACE_OPEN
template<> ::COMM_AlgoCenter::AlgoCenterRequest* Arena::CreateMaybeMessage<::COMM_AlgoCenter::AlgoCenterRequest>(Arena*);
template<> ::COMM_AlgoCenter::AlgoCenterResponse* Arena::CreateMaybeMessage<::COMM_AlgoCenter::AlgoCenterResponse>(Arena*);
template<> ::COMM_AlgoCenter::ItemData* Arena::CreateMaybeMessage<::COMM_AlgoCenter::ItemData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace COMM_AlgoCenter {

// ===================================================================

class AlgoCenterRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:COMM_AlgoCenter.AlgoCenterRequest) */ {
 public:
  inline AlgoCenterRequest() : AlgoCenterRequest(nullptr) {}
  virtual ~AlgoCenterRequest();

  AlgoCenterRequest(const AlgoCenterRequest& from);
  AlgoCenterRequest(AlgoCenterRequest&& from) noexcept
    : AlgoCenterRequest() {
    *this = ::std::move(from);
  }

  inline AlgoCenterRequest& operator=(const AlgoCenterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlgoCenterRequest& operator=(AlgoCenterRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlgoCenterRequest& default_instance();

  static inline const AlgoCenterRequest* internal_default_instance() {
    return reinterpret_cast<const AlgoCenterRequest*>(
               &_AlgoCenterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AlgoCenterRequest& a, AlgoCenterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AlgoCenterRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlgoCenterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlgoCenterRequest* New() const final {
    return CreateMaybeMessage<AlgoCenterRequest>(nullptr);
  }

  AlgoCenterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlgoCenterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlgoCenterRequest& from);
  void MergeFrom(const AlgoCenterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlgoCenterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "COMM_AlgoCenter.AlgoCenterRequest";
  }
  protected:
  explicit AlgoCenterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2fAlgoCenter_2eproto);
    return ::descriptor_table_proxy_2fAlgoCenter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExpListFieldNumber = 3,
    kKeynameListFieldNumber = 8,
    kRequestIdFieldNumber = 1,
    kResNameFieldNumber = 7,
    kUserIdFieldNumber = 2,
    kLlIdFieldNumber = 5,
    kRetCountFieldNumber = 4,
    kResTypeFieldNumber = 6,
  };
  // repeated int32 exp_list = 3;
  int exp_list_size() const;
  private:
  int _internal_exp_list_size() const;
  public:
  void clear_exp_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_exp_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_exp_list() const;
  void _internal_add_exp_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_exp_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 exp_list(int index) const;
  void set_exp_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_exp_list(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      exp_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_exp_list();

  // repeated string keyname_list = 8;
  int keyname_list_size() const;
  private:
  int _internal_keyname_list_size() const;
  public:
  void clear_keyname_list();
  const std::string& keyname_list(int index) const;
  std::string* mutable_keyname_list(int index);
  void set_keyname_list(int index, const std::string& value);
  void set_keyname_list(int index, std::string&& value);
  void set_keyname_list(int index, const char* value);
  void set_keyname_list(int index, const char* value, size_t size);
  std::string* add_keyname_list();
  void add_keyname_list(const std::string& value);
  void add_keyname_list(std::string&& value);
  void add_keyname_list(const char* value);
  void add_keyname_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& keyname_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_keyname_list();
  private:
  const std::string& _internal_keyname_list(int index) const;
  std::string* _internal_add_keyname_list();
  public:

  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string res_name = 7;
  void clear_res_name();
  const std::string& res_name() const;
  void set_res_name(const std::string& value);
  void set_res_name(std::string&& value);
  void set_res_name(const char* value);
  void set_res_name(const char* value, size_t size);
  std::string* mutable_res_name();
  std::string* release_res_name();
  void set_allocated_res_name(std::string* res_name);
  private:
  const std::string& _internal_res_name() const;
  void _internal_set_res_name(const std::string& value);
  std::string* _internal_mutable_res_name();
  public:

  // int64 user_id = 2;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 ll_id = 5;
  void clear_ll_id();
  ::PROTOBUF_NAMESPACE_ID::int64 ll_id() const;
  void set_ll_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ll_id() const;
  void _internal_set_ll_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 ret_count = 4;
  void clear_ret_count();
  ::PROTOBUF_NAMESPACE_ID::int32 ret_count() const;
  void set_ret_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ret_count() const;
  void _internal_set_ret_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 res_type = 6;
  void clear_res_type();
  ::PROTOBUF_NAMESPACE_ID::int32 res_type() const;
  void set_res_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_res_type() const;
  void _internal_set_res_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:COMM_AlgoCenter.AlgoCenterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > exp_list_;
  mutable std::atomic<int> _exp_list_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> keyname_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 ll_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 ret_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 res_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2fAlgoCenter_2eproto;
};
// -------------------------------------------------------------------

class ItemData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:COMM_AlgoCenter.ItemData) */ {
 public:
  inline ItemData() : ItemData(nullptr) {}
  virtual ~ItemData();

  ItemData(const ItemData& from);
  ItemData(ItemData&& from) noexcept
    : ItemData() {
    *this = ::std::move(from);
  }

  inline ItemData& operator=(const ItemData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemData& operator=(ItemData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ItemData& default_instance();

  static inline const ItemData* internal_default_instance() {
    return reinterpret_cast<const ItemData*>(
               &_ItemData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ItemData& a, ItemData& b) {
    a.Swap(&b);
  }
  inline void Swap(ItemData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ItemData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ItemData* New() const final {
    return CreateMaybeMessage<ItemData>(nullptr);
  }

  ItemData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ItemData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ItemData& from);
  void MergeFrom(const ItemData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "COMM_AlgoCenter.ItemData";
  }
  protected:
  explicit ItemData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2fAlgoCenter_2eproto);
    return ::descriptor_table_proxy_2fAlgoCenter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLlIdFieldNumber = 1,
    kResTypeFieldNumber = 2,
    kSourceFieldNumber = 3,
  };
  // int64 ll_id = 1;
  void clear_ll_id();
  ::PROTOBUF_NAMESPACE_ID::int64 ll_id() const;
  void set_ll_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ll_id() const;
  void _internal_set_ll_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 res_type = 2;
  void clear_res_type();
  ::PROTOBUF_NAMESPACE_ID::int64 res_type() const;
  void set_res_type(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_res_type() const;
  void _internal_set_res_type(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 source = 3;
  void clear_source();
  ::PROTOBUF_NAMESPACE_ID::int32 source() const;
  void set_source(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_source() const;
  void _internal_set_source(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:COMM_AlgoCenter.ItemData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 ll_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 res_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 source_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2fAlgoCenter_2eproto;
};
// -------------------------------------------------------------------

class AlgoCenterResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:COMM_AlgoCenter.AlgoCenterResponse) */ {
 public:
  inline AlgoCenterResponse() : AlgoCenterResponse(nullptr) {}
  virtual ~AlgoCenterResponse();

  AlgoCenterResponse(const AlgoCenterResponse& from);
  AlgoCenterResponse(AlgoCenterResponse&& from) noexcept
    : AlgoCenterResponse() {
    *this = ::std::move(from);
  }

  inline AlgoCenterResponse& operator=(const AlgoCenterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlgoCenterResponse& operator=(AlgoCenterResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlgoCenterResponse& default_instance();

  static inline const AlgoCenterResponse* internal_default_instance() {
    return reinterpret_cast<const AlgoCenterResponse*>(
               &_AlgoCenterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AlgoCenterResponse& a, AlgoCenterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AlgoCenterResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlgoCenterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlgoCenterResponse* New() const final {
    return CreateMaybeMessage<AlgoCenterResponse>(nullptr);
  }

  AlgoCenterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlgoCenterResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlgoCenterResponse& from);
  void MergeFrom(const AlgoCenterResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlgoCenterResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "COMM_AlgoCenter.AlgoCenterResponse";
  }
  protected:
  explicit AlgoCenterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2fAlgoCenter_2eproto);
    return ::descriptor_table_proxy_2fAlgoCenter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemListFieldNumber = 2,
    kUserIdFieldNumber = 1,
  };
  // repeated .COMM_AlgoCenter.ItemData item_list = 2;
  int item_list_size() const;
  private:
  int _internal_item_list_size() const;
  public:
  void clear_item_list();
  ::COMM_AlgoCenter::ItemData* mutable_item_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::COMM_AlgoCenter::ItemData >*
      mutable_item_list();
  private:
  const ::COMM_AlgoCenter::ItemData& _internal_item_list(int index) const;
  ::COMM_AlgoCenter::ItemData* _internal_add_item_list();
  public:
  const ::COMM_AlgoCenter::ItemData& item_list(int index) const;
  ::COMM_AlgoCenter::ItemData* add_item_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::COMM_AlgoCenter::ItemData >&
      item_list() const;

  // int64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:COMM_AlgoCenter.AlgoCenterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::COMM_AlgoCenter::ItemData > item_list_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2fAlgoCenter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AlgoCenterRequest

// string request_id = 1;
inline void AlgoCenterRequest::clear_request_id() {
  request_id_.ClearToEmpty();
}
inline const std::string& AlgoCenterRequest::request_id() const {
  // @@protoc_insertion_point(field_get:COMM_AlgoCenter.AlgoCenterRequest.request_id)
  return _internal_request_id();
}
inline void AlgoCenterRequest::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:COMM_AlgoCenter.AlgoCenterRequest.request_id)
}
inline std::string* AlgoCenterRequest::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:COMM_AlgoCenter.AlgoCenterRequest.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& AlgoCenterRequest::_internal_request_id() const {
  return request_id_.Get();
}
inline void AlgoCenterRequest::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AlgoCenterRequest::set_request_id(std::string&& value) {
  
  request_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:COMM_AlgoCenter.AlgoCenterRequest.request_id)
}
inline void AlgoCenterRequest::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:COMM_AlgoCenter.AlgoCenterRequest.request_id)
}
inline void AlgoCenterRequest::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:COMM_AlgoCenter.AlgoCenterRequest.request_id)
}
inline std::string* AlgoCenterRequest::_internal_mutable_request_id() {
  
  return request_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AlgoCenterRequest::release_request_id() {
  // @@protoc_insertion_point(field_release:COMM_AlgoCenter.AlgoCenterRequest.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlgoCenterRequest::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:COMM_AlgoCenter.AlgoCenterRequest.request_id)
}

// int64 user_id = 2;
inline void AlgoCenterRequest::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AlgoCenterRequest::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AlgoCenterRequest::user_id() const {
  // @@protoc_insertion_point(field_get:COMM_AlgoCenter.AlgoCenterRequest.user_id)
  return _internal_user_id();
}
inline void AlgoCenterRequest::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void AlgoCenterRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:COMM_AlgoCenter.AlgoCenterRequest.user_id)
}

// repeated int32 exp_list = 3;
inline int AlgoCenterRequest::_internal_exp_list_size() const {
  return exp_list_.size();
}
inline int AlgoCenterRequest::exp_list_size() const {
  return _internal_exp_list_size();
}
inline void AlgoCenterRequest::clear_exp_list() {
  exp_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlgoCenterRequest::_internal_exp_list(int index) const {
  return exp_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlgoCenterRequest::exp_list(int index) const {
  // @@protoc_insertion_point(field_get:COMM_AlgoCenter.AlgoCenterRequest.exp_list)
  return _internal_exp_list(index);
}
inline void AlgoCenterRequest::set_exp_list(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  exp_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:COMM_AlgoCenter.AlgoCenterRequest.exp_list)
}
inline void AlgoCenterRequest::_internal_add_exp_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  exp_list_.Add(value);
}
inline void AlgoCenterRequest::add_exp_list(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_exp_list(value);
  // @@protoc_insertion_point(field_add:COMM_AlgoCenter.AlgoCenterRequest.exp_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
AlgoCenterRequest::_internal_exp_list() const {
  return exp_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
AlgoCenterRequest::exp_list() const {
  // @@protoc_insertion_point(field_list:COMM_AlgoCenter.AlgoCenterRequest.exp_list)
  return _internal_exp_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
AlgoCenterRequest::_internal_mutable_exp_list() {
  return &exp_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
AlgoCenterRequest::mutable_exp_list() {
  // @@protoc_insertion_point(field_mutable_list:COMM_AlgoCenter.AlgoCenterRequest.exp_list)
  return _internal_mutable_exp_list();
}

// int32 ret_count = 4;
inline void AlgoCenterRequest::clear_ret_count() {
  ret_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlgoCenterRequest::_internal_ret_count() const {
  return ret_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlgoCenterRequest::ret_count() const {
  // @@protoc_insertion_point(field_get:COMM_AlgoCenter.AlgoCenterRequest.ret_count)
  return _internal_ret_count();
}
inline void AlgoCenterRequest::_internal_set_ret_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ret_count_ = value;
}
inline void AlgoCenterRequest::set_ret_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ret_count(value);
  // @@protoc_insertion_point(field_set:COMM_AlgoCenter.AlgoCenterRequest.ret_count)
}

// int64 ll_id = 5;
inline void AlgoCenterRequest::clear_ll_id() {
  ll_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AlgoCenterRequest::_internal_ll_id() const {
  return ll_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AlgoCenterRequest::ll_id() const {
  // @@protoc_insertion_point(field_get:COMM_AlgoCenter.AlgoCenterRequest.ll_id)
  return _internal_ll_id();
}
inline void AlgoCenterRequest::_internal_set_ll_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ll_id_ = value;
}
inline void AlgoCenterRequest::set_ll_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ll_id(value);
  // @@protoc_insertion_point(field_set:COMM_AlgoCenter.AlgoCenterRequest.ll_id)
}

// int32 res_type = 6;
inline void AlgoCenterRequest::clear_res_type() {
  res_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlgoCenterRequest::_internal_res_type() const {
  return res_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlgoCenterRequest::res_type() const {
  // @@protoc_insertion_point(field_get:COMM_AlgoCenter.AlgoCenterRequest.res_type)
  return _internal_res_type();
}
inline void AlgoCenterRequest::_internal_set_res_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  res_type_ = value;
}
inline void AlgoCenterRequest::set_res_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_res_type(value);
  // @@protoc_insertion_point(field_set:COMM_AlgoCenter.AlgoCenterRequest.res_type)
}

// string res_name = 7;
inline void AlgoCenterRequest::clear_res_name() {
  res_name_.ClearToEmpty();
}
inline const std::string& AlgoCenterRequest::res_name() const {
  // @@protoc_insertion_point(field_get:COMM_AlgoCenter.AlgoCenterRequest.res_name)
  return _internal_res_name();
}
inline void AlgoCenterRequest::set_res_name(const std::string& value) {
  _internal_set_res_name(value);
  // @@protoc_insertion_point(field_set:COMM_AlgoCenter.AlgoCenterRequest.res_name)
}
inline std::string* AlgoCenterRequest::mutable_res_name() {
  // @@protoc_insertion_point(field_mutable:COMM_AlgoCenter.AlgoCenterRequest.res_name)
  return _internal_mutable_res_name();
}
inline const std::string& AlgoCenterRequest::_internal_res_name() const {
  return res_name_.Get();
}
inline void AlgoCenterRequest::_internal_set_res_name(const std::string& value) {
  
  res_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AlgoCenterRequest::set_res_name(std::string&& value) {
  
  res_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:COMM_AlgoCenter.AlgoCenterRequest.res_name)
}
inline void AlgoCenterRequest::set_res_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  res_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:COMM_AlgoCenter.AlgoCenterRequest.res_name)
}
inline void AlgoCenterRequest::set_res_name(const char* value,
    size_t size) {
  
  res_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:COMM_AlgoCenter.AlgoCenterRequest.res_name)
}
inline std::string* AlgoCenterRequest::_internal_mutable_res_name() {
  
  return res_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AlgoCenterRequest::release_res_name() {
  // @@protoc_insertion_point(field_release:COMM_AlgoCenter.AlgoCenterRequest.res_name)
  return res_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlgoCenterRequest::set_allocated_res_name(std::string* res_name) {
  if (res_name != nullptr) {
    
  } else {
    
  }
  res_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:COMM_AlgoCenter.AlgoCenterRequest.res_name)
}

// repeated string keyname_list = 8;
inline int AlgoCenterRequest::_internal_keyname_list_size() const {
  return keyname_list_.size();
}
inline int AlgoCenterRequest::keyname_list_size() const {
  return _internal_keyname_list_size();
}
inline void AlgoCenterRequest::clear_keyname_list() {
  keyname_list_.Clear();
}
inline std::string* AlgoCenterRequest::add_keyname_list() {
  // @@protoc_insertion_point(field_add_mutable:COMM_AlgoCenter.AlgoCenterRequest.keyname_list)
  return _internal_add_keyname_list();
}
inline const std::string& AlgoCenterRequest::_internal_keyname_list(int index) const {
  return keyname_list_.Get(index);
}
inline const std::string& AlgoCenterRequest::keyname_list(int index) const {
  // @@protoc_insertion_point(field_get:COMM_AlgoCenter.AlgoCenterRequest.keyname_list)
  return _internal_keyname_list(index);
}
inline std::string* AlgoCenterRequest::mutable_keyname_list(int index) {
  // @@protoc_insertion_point(field_mutable:COMM_AlgoCenter.AlgoCenterRequest.keyname_list)
  return keyname_list_.Mutable(index);
}
inline void AlgoCenterRequest::set_keyname_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:COMM_AlgoCenter.AlgoCenterRequest.keyname_list)
  keyname_list_.Mutable(index)->assign(value);
}
inline void AlgoCenterRequest::set_keyname_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:COMM_AlgoCenter.AlgoCenterRequest.keyname_list)
  keyname_list_.Mutable(index)->assign(std::move(value));
}
inline void AlgoCenterRequest::set_keyname_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keyname_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:COMM_AlgoCenter.AlgoCenterRequest.keyname_list)
}
inline void AlgoCenterRequest::set_keyname_list(int index, const char* value, size_t size) {
  keyname_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:COMM_AlgoCenter.AlgoCenterRequest.keyname_list)
}
inline std::string* AlgoCenterRequest::_internal_add_keyname_list() {
  return keyname_list_.Add();
}
inline void AlgoCenterRequest::add_keyname_list(const std::string& value) {
  keyname_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:COMM_AlgoCenter.AlgoCenterRequest.keyname_list)
}
inline void AlgoCenterRequest::add_keyname_list(std::string&& value) {
  keyname_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:COMM_AlgoCenter.AlgoCenterRequest.keyname_list)
}
inline void AlgoCenterRequest::add_keyname_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keyname_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:COMM_AlgoCenter.AlgoCenterRequest.keyname_list)
}
inline void AlgoCenterRequest::add_keyname_list(const char* value, size_t size) {
  keyname_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:COMM_AlgoCenter.AlgoCenterRequest.keyname_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AlgoCenterRequest::keyname_list() const {
  // @@protoc_insertion_point(field_list:COMM_AlgoCenter.AlgoCenterRequest.keyname_list)
  return keyname_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AlgoCenterRequest::mutable_keyname_list() {
  // @@protoc_insertion_point(field_mutable_list:COMM_AlgoCenter.AlgoCenterRequest.keyname_list)
  return &keyname_list_;
}

// -------------------------------------------------------------------

// ItemData

// int64 ll_id = 1;
inline void ItemData::clear_ll_id() {
  ll_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ItemData::_internal_ll_id() const {
  return ll_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ItemData::ll_id() const {
  // @@protoc_insertion_point(field_get:COMM_AlgoCenter.ItemData.ll_id)
  return _internal_ll_id();
}
inline void ItemData::_internal_set_ll_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ll_id_ = value;
}
inline void ItemData::set_ll_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ll_id(value);
  // @@protoc_insertion_point(field_set:COMM_AlgoCenter.ItemData.ll_id)
}

// int64 res_type = 2;
inline void ItemData::clear_res_type() {
  res_type_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ItemData::_internal_res_type() const {
  return res_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ItemData::res_type() const {
  // @@protoc_insertion_point(field_get:COMM_AlgoCenter.ItemData.res_type)
  return _internal_res_type();
}
inline void ItemData::_internal_set_res_type(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  res_type_ = value;
}
inline void ItemData::set_res_type(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_res_type(value);
  // @@protoc_insertion_point(field_set:COMM_AlgoCenter.ItemData.res_type)
}

// int32 source = 3;
inline void ItemData::clear_source() {
  source_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ItemData::_internal_source() const {
  return source_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ItemData::source() const {
  // @@protoc_insertion_point(field_get:COMM_AlgoCenter.ItemData.source)
  return _internal_source();
}
inline void ItemData::_internal_set_source(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  source_ = value;
}
inline void ItemData::set_source(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:COMM_AlgoCenter.ItemData.source)
}

// -------------------------------------------------------------------

// AlgoCenterResponse

// int64 user_id = 1;
inline void AlgoCenterResponse::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AlgoCenterResponse::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AlgoCenterResponse::user_id() const {
  // @@protoc_insertion_point(field_get:COMM_AlgoCenter.AlgoCenterResponse.user_id)
  return _internal_user_id();
}
inline void AlgoCenterResponse::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void AlgoCenterResponse::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:COMM_AlgoCenter.AlgoCenterResponse.user_id)
}

// repeated .COMM_AlgoCenter.ItemData item_list = 2;
inline int AlgoCenterResponse::_internal_item_list_size() const {
  return item_list_.size();
}
inline int AlgoCenterResponse::item_list_size() const {
  return _internal_item_list_size();
}
inline void AlgoCenterResponse::clear_item_list() {
  item_list_.Clear();
}
inline ::COMM_AlgoCenter::ItemData* AlgoCenterResponse::mutable_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:COMM_AlgoCenter.AlgoCenterResponse.item_list)
  return item_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::COMM_AlgoCenter::ItemData >*
AlgoCenterResponse::mutable_item_list() {
  // @@protoc_insertion_point(field_mutable_list:COMM_AlgoCenter.AlgoCenterResponse.item_list)
  return &item_list_;
}
inline const ::COMM_AlgoCenter::ItemData& AlgoCenterResponse::_internal_item_list(int index) const {
  return item_list_.Get(index);
}
inline const ::COMM_AlgoCenter::ItemData& AlgoCenterResponse::item_list(int index) const {
  // @@protoc_insertion_point(field_get:COMM_AlgoCenter.AlgoCenterResponse.item_list)
  return _internal_item_list(index);
}
inline ::COMM_AlgoCenter::ItemData* AlgoCenterResponse::_internal_add_item_list() {
  return item_list_.Add();
}
inline ::COMM_AlgoCenter::ItemData* AlgoCenterResponse::add_item_list() {
  // @@protoc_insertion_point(field_add:COMM_AlgoCenter.AlgoCenterResponse.item_list)
  return _internal_add_item_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::COMM_AlgoCenter::ItemData >&
AlgoCenterResponse::item_list() const {
  // @@protoc_insertion_point(field_list:COMM_AlgoCenter.AlgoCenterResponse.item_list)
  return item_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace COMM_AlgoCenter

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proxy_2fAlgoCenter_2eproto
