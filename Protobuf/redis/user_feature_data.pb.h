// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: redis/user_feature_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_redis_2fuser_5ffeature_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_redis_2fuser_5ffeature_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_redis_2fuser_5ffeature_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_redis_2fuser_5ffeature_5fdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_redis_2fuser_5ffeature_5fdata_2eproto;
namespace RSP_UserFeatureData {
class IDTime;
class IDTimeDefaultTypeInternal;
extern IDTimeDefaultTypeInternal _IDTime_default_instance_;
class IDTimeList;
class IDTimeListDefaultTypeInternal;
extern IDTimeListDefaultTypeInternal _IDTimeList_default_instance_;
class IDWeight;
class IDWeightDefaultTypeInternal;
extern IDWeightDefaultTypeInternal _IDWeight_default_instance_;
class IDWeightList;
class IDWeightListDefaultTypeInternal;
extern IDWeightListDefaultTypeInternal _IDWeightList_default_instance_;
class UserFeatureBasic;
class UserFeatureBasicDefaultTypeInternal;
extern UserFeatureBasicDefaultTypeInternal _UserFeatureBasic_default_instance_;
class UserFeatureClean;
class UserFeatureCleanDefaultTypeInternal;
extern UserFeatureCleanDefaultTypeInternal _UserFeatureClean_default_instance_;
class UserFeatureClick;
class UserFeatureClickDefaultTypeInternal;
extern UserFeatureClickDefaultTypeInternal _UserFeatureClick_default_instance_;
class UserFeatureClick_ClickItemEntry_DoNotUse;
class UserFeatureClick_ClickItemEntry_DoNotUseDefaultTypeInternal;
extern UserFeatureClick_ClickItemEntry_DoNotUseDefaultTypeInternal _UserFeatureClick_ClickItemEntry_DoNotUse_default_instance_;
class UserFeatureDownload;
class UserFeatureDownloadDefaultTypeInternal;
extern UserFeatureDownloadDefaultTypeInternal _UserFeatureDownload_default_instance_;
class UserFeatureDownload_DownloadItemEntry_DoNotUse;
class UserFeatureDownload_DownloadItemEntry_DoNotUseDefaultTypeInternal;
extern UserFeatureDownload_DownloadItemEntry_DoNotUseDefaultTypeInternal _UserFeatureDownload_DownloadItemEntry_DoNotUse_default_instance_;
class UserFeatureIndex;
class UserFeatureIndexDefaultTypeInternal;
extern UserFeatureIndexDefaultTypeInternal _UserFeatureIndex_default_instance_;
class UserFeatureIndex_CfItemEntry_DoNotUse;
class UserFeatureIndex_CfItemEntry_DoNotUseDefaultTypeInternal;
extern UserFeatureIndex_CfItemEntry_DoNotUseDefaultTypeInternal _UserFeatureIndex_CfItemEntry_DoNotUse_default_instance_;
class UserFeatureSearch;
class UserFeatureSearchDefaultTypeInternal;
extern UserFeatureSearchDefaultTypeInternal _UserFeatureSearch_default_instance_;
class UserFeatureSearch_SearchWordsEntry_DoNotUse;
class UserFeatureSearch_SearchWordsEntry_DoNotUseDefaultTypeInternal;
extern UserFeatureSearch_SearchWordsEntry_DoNotUseDefaultTypeInternal _UserFeatureSearch_SearchWordsEntry_DoNotUse_default_instance_;
}  // namespace RSP_UserFeatureData
PROTOBUF_NAMESPACE_OPEN
template<> ::RSP_UserFeatureData::IDTime* Arena::CreateMaybeMessage<::RSP_UserFeatureData::IDTime>(Arena*);
template<> ::RSP_UserFeatureData::IDTimeList* Arena::CreateMaybeMessage<::RSP_UserFeatureData::IDTimeList>(Arena*);
template<> ::RSP_UserFeatureData::IDWeight* Arena::CreateMaybeMessage<::RSP_UserFeatureData::IDWeight>(Arena*);
template<> ::RSP_UserFeatureData::IDWeightList* Arena::CreateMaybeMessage<::RSP_UserFeatureData::IDWeightList>(Arena*);
template<> ::RSP_UserFeatureData::UserFeatureBasic* Arena::CreateMaybeMessage<::RSP_UserFeatureData::UserFeatureBasic>(Arena*);
template<> ::RSP_UserFeatureData::UserFeatureClean* Arena::CreateMaybeMessage<::RSP_UserFeatureData::UserFeatureClean>(Arena*);
template<> ::RSP_UserFeatureData::UserFeatureClick* Arena::CreateMaybeMessage<::RSP_UserFeatureData::UserFeatureClick>(Arena*);
template<> ::RSP_UserFeatureData::UserFeatureClick_ClickItemEntry_DoNotUse* Arena::CreateMaybeMessage<::RSP_UserFeatureData::UserFeatureClick_ClickItemEntry_DoNotUse>(Arena*);
template<> ::RSP_UserFeatureData::UserFeatureDownload* Arena::CreateMaybeMessage<::RSP_UserFeatureData::UserFeatureDownload>(Arena*);
template<> ::RSP_UserFeatureData::UserFeatureDownload_DownloadItemEntry_DoNotUse* Arena::CreateMaybeMessage<::RSP_UserFeatureData::UserFeatureDownload_DownloadItemEntry_DoNotUse>(Arena*);
template<> ::RSP_UserFeatureData::UserFeatureIndex* Arena::CreateMaybeMessage<::RSP_UserFeatureData::UserFeatureIndex>(Arena*);
template<> ::RSP_UserFeatureData::UserFeatureIndex_CfItemEntry_DoNotUse* Arena::CreateMaybeMessage<::RSP_UserFeatureData::UserFeatureIndex_CfItemEntry_DoNotUse>(Arena*);
template<> ::RSP_UserFeatureData::UserFeatureSearch* Arena::CreateMaybeMessage<::RSP_UserFeatureData::UserFeatureSearch>(Arena*);
template<> ::RSP_UserFeatureData::UserFeatureSearch_SearchWordsEntry_DoNotUse* Arena::CreateMaybeMessage<::RSP_UserFeatureData::UserFeatureSearch_SearchWordsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace RSP_UserFeatureData {

// ===================================================================

class UserFeatureClean PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RSP_UserFeatureData.UserFeatureClean) */ {
 public:
  inline UserFeatureClean() : UserFeatureClean(nullptr) {}
  virtual ~UserFeatureClean();

  UserFeatureClean(const UserFeatureClean& from);
  UserFeatureClean(UserFeatureClean&& from) noexcept
    : UserFeatureClean() {
    *this = ::std::move(from);
  }

  inline UserFeatureClean& operator=(const UserFeatureClean& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserFeatureClean& operator=(UserFeatureClean&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserFeatureClean& default_instance();

  static inline const UserFeatureClean* internal_default_instance() {
    return reinterpret_cast<const UserFeatureClean*>(
               &_UserFeatureClean_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserFeatureClean& a, UserFeatureClean& b) {
    a.Swap(&b);
  }
  inline void Swap(UserFeatureClean* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserFeatureClean* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserFeatureClean* New() const final {
    return CreateMaybeMessage<UserFeatureClean>(nullptr);
  }

  UserFeatureClean* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserFeatureClean>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserFeatureClean& from);
  void MergeFrom(const UserFeatureClean& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserFeatureClean* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RSP_UserFeatureData.UserFeatureClean";
  }
  protected:
  explicit UserFeatureClean(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_redis_2fuser_5ffeature_5fdata_2eproto);
    return ::descriptor_table_redis_2fuser_5ffeature_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
  };
  // int64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:RSP_UserFeatureData.UserFeatureClean)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_redis_2fuser_5ffeature_5fdata_2eproto;
};
// -------------------------------------------------------------------

class IDWeight PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RSP_UserFeatureData.IDWeight) */ {
 public:
  inline IDWeight() : IDWeight(nullptr) {}
  virtual ~IDWeight();

  IDWeight(const IDWeight& from);
  IDWeight(IDWeight&& from) noexcept
    : IDWeight() {
    *this = ::std::move(from);
  }

  inline IDWeight& operator=(const IDWeight& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDWeight& operator=(IDWeight&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDWeight& default_instance();

  static inline const IDWeight* internal_default_instance() {
    return reinterpret_cast<const IDWeight*>(
               &_IDWeight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IDWeight& a, IDWeight& b) {
    a.Swap(&b);
  }
  inline void Swap(IDWeight* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDWeight* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDWeight* New() const final {
    return CreateMaybeMessage<IDWeight>(nullptr);
  }

  IDWeight* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDWeight>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDWeight& from);
  void MergeFrom(const IDWeight& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDWeight* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RSP_UserFeatureData.IDWeight";
  }
  protected:
  explicit IDWeight(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_redis_2fuser_5ffeature_5fdata_2eproto);
    return ::descriptor_table_redis_2fuser_5ffeature_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kWeightFieldNumber = 2,
  };
  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float weight = 2;
  void clear_weight();
  float weight() const;
  void set_weight(float value);
  private:
  float _internal_weight() const;
  void _internal_set_weight(float value);
  public:

  // @@protoc_insertion_point(class_scope:RSP_UserFeatureData.IDWeight)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  float weight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_redis_2fuser_5ffeature_5fdata_2eproto;
};
// -------------------------------------------------------------------

class IDWeightList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RSP_UserFeatureData.IDWeightList) */ {
 public:
  inline IDWeightList() : IDWeightList(nullptr) {}
  virtual ~IDWeightList();

  IDWeightList(const IDWeightList& from);
  IDWeightList(IDWeightList&& from) noexcept
    : IDWeightList() {
    *this = ::std::move(from);
  }

  inline IDWeightList& operator=(const IDWeightList& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDWeightList& operator=(IDWeightList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDWeightList& default_instance();

  static inline const IDWeightList* internal_default_instance() {
    return reinterpret_cast<const IDWeightList*>(
               &_IDWeightList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IDWeightList& a, IDWeightList& b) {
    a.Swap(&b);
  }
  inline void Swap(IDWeightList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDWeightList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDWeightList* New() const final {
    return CreateMaybeMessage<IDWeightList>(nullptr);
  }

  IDWeightList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDWeightList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDWeightList& from);
  void MergeFrom(const IDWeightList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDWeightList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RSP_UserFeatureData.IDWeightList";
  }
  protected:
  explicit IDWeightList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_redis_2fuser_5ffeature_5fdata_2eproto);
    return ::descriptor_table_redis_2fuser_5ffeature_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdListFieldNumber = 1,
  };
  // repeated .RSP_UserFeatureData.IDWeight id_list = 1;
  int id_list_size() const;
  private:
  int _internal_id_list_size() const;
  public:
  void clear_id_list();
  ::RSP_UserFeatureData::IDWeight* mutable_id_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RSP_UserFeatureData::IDWeight >*
      mutable_id_list();
  private:
  const ::RSP_UserFeatureData::IDWeight& _internal_id_list(int index) const;
  ::RSP_UserFeatureData::IDWeight* _internal_add_id_list();
  public:
  const ::RSP_UserFeatureData::IDWeight& id_list(int index) const;
  ::RSP_UserFeatureData::IDWeight* add_id_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RSP_UserFeatureData::IDWeight >&
      id_list() const;

  // @@protoc_insertion_point(class_scope:RSP_UserFeatureData.IDWeightList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RSP_UserFeatureData::IDWeight > id_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_redis_2fuser_5ffeature_5fdata_2eproto;
};
// -------------------------------------------------------------------

class IDTime PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RSP_UserFeatureData.IDTime) */ {
 public:
  inline IDTime() : IDTime(nullptr) {}
  virtual ~IDTime();

  IDTime(const IDTime& from);
  IDTime(IDTime&& from) noexcept
    : IDTime() {
    *this = ::std::move(from);
  }

  inline IDTime& operator=(const IDTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDTime& operator=(IDTime&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDTime& default_instance();

  static inline const IDTime* internal_default_instance() {
    return reinterpret_cast<const IDTime*>(
               &_IDTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(IDTime& a, IDTime& b) {
    a.Swap(&b);
  }
  inline void Swap(IDTime* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDTime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDTime* New() const final {
    return CreateMaybeMessage<IDTime>(nullptr);
  }

  IDTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDTime>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDTime& from);
  void MergeFrom(const IDTime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDTime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RSP_UserFeatureData.IDTime";
  }
  protected:
  explicit IDTime(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_redis_2fuser_5ffeature_5fdata_2eproto);
    return ::descriptor_table_redis_2fuser_5ffeature_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:RSP_UserFeatureData.IDTime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_redis_2fuser_5ffeature_5fdata_2eproto;
};
// -------------------------------------------------------------------

class IDTimeList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RSP_UserFeatureData.IDTimeList) */ {
 public:
  inline IDTimeList() : IDTimeList(nullptr) {}
  virtual ~IDTimeList();

  IDTimeList(const IDTimeList& from);
  IDTimeList(IDTimeList&& from) noexcept
    : IDTimeList() {
    *this = ::std::move(from);
  }

  inline IDTimeList& operator=(const IDTimeList& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDTimeList& operator=(IDTimeList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDTimeList& default_instance();

  static inline const IDTimeList* internal_default_instance() {
    return reinterpret_cast<const IDTimeList*>(
               &_IDTimeList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(IDTimeList& a, IDTimeList& b) {
    a.Swap(&b);
  }
  inline void Swap(IDTimeList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDTimeList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDTimeList* New() const final {
    return CreateMaybeMessage<IDTimeList>(nullptr);
  }

  IDTimeList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDTimeList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDTimeList& from);
  void MergeFrom(const IDTimeList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDTimeList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RSP_UserFeatureData.IDTimeList";
  }
  protected:
  explicit IDTimeList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_redis_2fuser_5ffeature_5fdata_2eproto);
    return ::descriptor_table_redis_2fuser_5ffeature_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdListFieldNumber = 1,
  };
  // repeated .RSP_UserFeatureData.IDTime id_list = 1;
  int id_list_size() const;
  private:
  int _internal_id_list_size() const;
  public:
  void clear_id_list();
  ::RSP_UserFeatureData::IDTime* mutable_id_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RSP_UserFeatureData::IDTime >*
      mutable_id_list();
  private:
  const ::RSP_UserFeatureData::IDTime& _internal_id_list(int index) const;
  ::RSP_UserFeatureData::IDTime* _internal_add_id_list();
  public:
  const ::RSP_UserFeatureData::IDTime& id_list(int index) const;
  ::RSP_UserFeatureData::IDTime* add_id_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RSP_UserFeatureData::IDTime >&
      id_list() const;

  // @@protoc_insertion_point(class_scope:RSP_UserFeatureData.IDTimeList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RSP_UserFeatureData::IDTime > id_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_redis_2fuser_5ffeature_5fdata_2eproto;
};
// -------------------------------------------------------------------

class UserFeatureBasic PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RSP_UserFeatureData.UserFeatureBasic) */ {
 public:
  inline UserFeatureBasic() : UserFeatureBasic(nullptr) {}
  virtual ~UserFeatureBasic();

  UserFeatureBasic(const UserFeatureBasic& from);
  UserFeatureBasic(UserFeatureBasic&& from) noexcept
    : UserFeatureBasic() {
    *this = ::std::move(from);
  }

  inline UserFeatureBasic& operator=(const UserFeatureBasic& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserFeatureBasic& operator=(UserFeatureBasic&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserFeatureBasic& default_instance();

  static inline const UserFeatureBasic* internal_default_instance() {
    return reinterpret_cast<const UserFeatureBasic*>(
               &_UserFeatureBasic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UserFeatureBasic& a, UserFeatureBasic& b) {
    a.Swap(&b);
  }
  inline void Swap(UserFeatureBasic* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserFeatureBasic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserFeatureBasic* New() const final {
    return CreateMaybeMessage<UserFeatureBasic>(nullptr);
  }

  UserFeatureBasic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserFeatureBasic>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserFeatureBasic& from);
  void MergeFrom(const UserFeatureBasic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserFeatureBasic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RSP_UserFeatureData.UserFeatureBasic";
  }
  protected:
  explicit UserFeatureBasic(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_redis_2fuser_5ffeature_5fdata_2eproto);
    return ::descriptor_table_redis_2fuser_5ffeature_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kUserSexFieldNumber = 3,
    kUserProvinceCodeFieldNumber = 4,
    kUserCityCodeFieldNumber = 5,
    kUserProfessionFieldNumber = 6,
    kUserLbFieldNumber = 7,
    kIsVipFieldNumber = 8,
    kGrowthValueFieldNumber = 9,
    kVipStatusFieldNumber = 10,
  };
  // int64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 user_id = 2;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 user_sex = 3;
  void clear_user_sex();
  ::PROTOBUF_NAMESPACE_ID::int32 user_sex() const;
  void set_user_sex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_sex() const;
  void _internal_set_user_sex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 user_province_code = 4;
  void clear_user_province_code();
  ::PROTOBUF_NAMESPACE_ID::int32 user_province_code() const;
  void set_user_province_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_province_code() const;
  void _internal_set_user_province_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 user_city_code = 5;
  void clear_user_city_code();
  ::PROTOBUF_NAMESPACE_ID::int32 user_city_code() const;
  void set_user_city_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_city_code() const;
  void _internal_set_user_city_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 user_profession = 6;
  void clear_user_profession();
  ::PROTOBUF_NAMESPACE_ID::int32 user_profession() const;
  void set_user_profession(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_profession() const;
  void _internal_set_user_profession(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 user_lb = 7;
  void clear_user_lb();
  ::PROTOBUF_NAMESPACE_ID::int32 user_lb() const;
  void set_user_lb(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_lb() const;
  void _internal_set_user_lb(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 is_vip = 8;
  void clear_is_vip();
  ::PROTOBUF_NAMESPACE_ID::int32 is_vip() const;
  void set_is_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_is_vip() const;
  void _internal_set_is_vip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 growth_value = 9;
  void clear_growth_value();
  ::PROTOBUF_NAMESPACE_ID::int32 growth_value() const;
  void set_growth_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_growth_value() const;
  void _internal_set_growth_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 vip_status = 10;
  void clear_vip_status();
  ::PROTOBUF_NAMESPACE_ID::int32 vip_status() const;
  void set_vip_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vip_status() const;
  void _internal_set_vip_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RSP_UserFeatureData.UserFeatureBasic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_sex_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_province_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_city_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_profession_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_lb_;
  ::PROTOBUF_NAMESPACE_ID::int32 is_vip_;
  ::PROTOBUF_NAMESPACE_ID::int32 growth_value_;
  ::PROTOBUF_NAMESPACE_ID::int32 vip_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_redis_2fuser_5ffeature_5fdata_2eproto;
};
// -------------------------------------------------------------------

class UserFeatureClick_ClickItemEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UserFeatureClick_ClickItemEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UserFeatureClick_ClickItemEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  UserFeatureClick_ClickItemEntry_DoNotUse();
  explicit UserFeatureClick_ClickItemEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const UserFeatureClick_ClickItemEntry_DoNotUse& other);
  static const UserFeatureClick_ClickItemEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const UserFeatureClick_ClickItemEntry_DoNotUse*>(&_UserFeatureClick_ClickItemEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_redis_2fuser_5ffeature_5fdata_2eproto);
    return ::descriptor_table_redis_2fuser_5ffeature_5fdata_2eproto.file_level_metadata[6];
  }

  public:
};

// -------------------------------------------------------------------

class UserFeatureClick PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RSP_UserFeatureData.UserFeatureClick) */ {
 public:
  inline UserFeatureClick() : UserFeatureClick(nullptr) {}
  virtual ~UserFeatureClick();

  UserFeatureClick(const UserFeatureClick& from);
  UserFeatureClick(UserFeatureClick&& from) noexcept
    : UserFeatureClick() {
    *this = ::std::move(from);
  }

  inline UserFeatureClick& operator=(const UserFeatureClick& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserFeatureClick& operator=(UserFeatureClick&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserFeatureClick& default_instance();

  static inline const UserFeatureClick* internal_default_instance() {
    return reinterpret_cast<const UserFeatureClick*>(
               &_UserFeatureClick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UserFeatureClick& a, UserFeatureClick& b) {
    a.Swap(&b);
  }
  inline void Swap(UserFeatureClick* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserFeatureClick* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserFeatureClick* New() const final {
    return CreateMaybeMessage<UserFeatureClick>(nullptr);
  }

  UserFeatureClick* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserFeatureClick>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserFeatureClick& from);
  void MergeFrom(const UserFeatureClick& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserFeatureClick* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RSP_UserFeatureData.UserFeatureClick";
  }
  protected:
  explicit UserFeatureClick(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_redis_2fuser_5ffeature_5fdata_2eproto);
    return ::descriptor_table_redis_2fuser_5ffeature_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kClickItemFieldNumber = 2,
    kTimestampFieldNumber = 1,
  };
  // map<int32, .RSP_UserFeatureData.IDTimeList> click_item = 2;
  int click_item_size() const;
  private:
  int _internal_click_item_size() const;
  public:
  void clear_click_item();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList >&
      _internal_click_item() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList >*
      _internal_mutable_click_item();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList >&
      click_item() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList >*
      mutable_click_item();

  // int64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:RSP_UserFeatureData.UserFeatureClick)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      UserFeatureClick_ClickItemEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> click_item_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_redis_2fuser_5ffeature_5fdata_2eproto;
};
// -------------------------------------------------------------------

class UserFeatureSearch_SearchWordsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UserFeatureSearch_SearchWordsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UserFeatureSearch_SearchWordsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  UserFeatureSearch_SearchWordsEntry_DoNotUse();
  explicit UserFeatureSearch_SearchWordsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const UserFeatureSearch_SearchWordsEntry_DoNotUse& other);
  static const UserFeatureSearch_SearchWordsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const UserFeatureSearch_SearchWordsEntry_DoNotUse*>(&_UserFeatureSearch_SearchWordsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_redis_2fuser_5ffeature_5fdata_2eproto);
    return ::descriptor_table_redis_2fuser_5ffeature_5fdata_2eproto.file_level_metadata[8];
  }

  public:
};

// -------------------------------------------------------------------

class UserFeatureSearch PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RSP_UserFeatureData.UserFeatureSearch) */ {
 public:
  inline UserFeatureSearch() : UserFeatureSearch(nullptr) {}
  virtual ~UserFeatureSearch();

  UserFeatureSearch(const UserFeatureSearch& from);
  UserFeatureSearch(UserFeatureSearch&& from) noexcept
    : UserFeatureSearch() {
    *this = ::std::move(from);
  }

  inline UserFeatureSearch& operator=(const UserFeatureSearch& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserFeatureSearch& operator=(UserFeatureSearch&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserFeatureSearch& default_instance();

  static inline const UserFeatureSearch* internal_default_instance() {
    return reinterpret_cast<const UserFeatureSearch*>(
               &_UserFeatureSearch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(UserFeatureSearch& a, UserFeatureSearch& b) {
    a.Swap(&b);
  }
  inline void Swap(UserFeatureSearch* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserFeatureSearch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserFeatureSearch* New() const final {
    return CreateMaybeMessage<UserFeatureSearch>(nullptr);
  }

  UserFeatureSearch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserFeatureSearch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserFeatureSearch& from);
  void MergeFrom(const UserFeatureSearch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserFeatureSearch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RSP_UserFeatureData.UserFeatureSearch";
  }
  protected:
  explicit UserFeatureSearch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_redis_2fuser_5ffeature_5fdata_2eproto);
    return ::descriptor_table_redis_2fuser_5ffeature_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSearchWordsFieldNumber = 2,
    kTimestampFieldNumber = 1,
  };
  // map<int32, .RSP_UserFeatureData.IDTimeList> search_words = 2;
  int search_words_size() const;
  private:
  int _internal_search_words_size() const;
  public:
  void clear_search_words();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList >&
      _internal_search_words() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList >*
      _internal_mutable_search_words();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList >&
      search_words() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList >*
      mutable_search_words();

  // int64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:RSP_UserFeatureData.UserFeatureSearch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      UserFeatureSearch_SearchWordsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> search_words_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_redis_2fuser_5ffeature_5fdata_2eproto;
};
// -------------------------------------------------------------------

class UserFeatureDownload_DownloadItemEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UserFeatureDownload_DownloadItemEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UserFeatureDownload_DownloadItemEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  UserFeatureDownload_DownloadItemEntry_DoNotUse();
  explicit UserFeatureDownload_DownloadItemEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const UserFeatureDownload_DownloadItemEntry_DoNotUse& other);
  static const UserFeatureDownload_DownloadItemEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const UserFeatureDownload_DownloadItemEntry_DoNotUse*>(&_UserFeatureDownload_DownloadItemEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_redis_2fuser_5ffeature_5fdata_2eproto);
    return ::descriptor_table_redis_2fuser_5ffeature_5fdata_2eproto.file_level_metadata[10];
  }

  public:
};

// -------------------------------------------------------------------

class UserFeatureDownload PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RSP_UserFeatureData.UserFeatureDownload) */ {
 public:
  inline UserFeatureDownload() : UserFeatureDownload(nullptr) {}
  virtual ~UserFeatureDownload();

  UserFeatureDownload(const UserFeatureDownload& from);
  UserFeatureDownload(UserFeatureDownload&& from) noexcept
    : UserFeatureDownload() {
    *this = ::std::move(from);
  }

  inline UserFeatureDownload& operator=(const UserFeatureDownload& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserFeatureDownload& operator=(UserFeatureDownload&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserFeatureDownload& default_instance();

  static inline const UserFeatureDownload* internal_default_instance() {
    return reinterpret_cast<const UserFeatureDownload*>(
               &_UserFeatureDownload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(UserFeatureDownload& a, UserFeatureDownload& b) {
    a.Swap(&b);
  }
  inline void Swap(UserFeatureDownload* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserFeatureDownload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserFeatureDownload* New() const final {
    return CreateMaybeMessage<UserFeatureDownload>(nullptr);
  }

  UserFeatureDownload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserFeatureDownload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserFeatureDownload& from);
  void MergeFrom(const UserFeatureDownload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserFeatureDownload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RSP_UserFeatureData.UserFeatureDownload";
  }
  protected:
  explicit UserFeatureDownload(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_redis_2fuser_5ffeature_5fdata_2eproto);
    return ::descriptor_table_redis_2fuser_5ffeature_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDownloadItemFieldNumber = 2,
    kTimestampFieldNumber = 1,
  };
  // map<int32, .RSP_UserFeatureData.IDTimeList> download_item = 2;
  int download_item_size() const;
  private:
  int _internal_download_item_size() const;
  public:
  void clear_download_item();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList >&
      _internal_download_item() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList >*
      _internal_mutable_download_item();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList >&
      download_item() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList >*
      mutable_download_item();

  // int64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:RSP_UserFeatureData.UserFeatureDownload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      UserFeatureDownload_DownloadItemEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> download_item_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_redis_2fuser_5ffeature_5fdata_2eproto;
};
// -------------------------------------------------------------------

class UserFeatureIndex_CfItemEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UserFeatureIndex_CfItemEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDWeightList,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UserFeatureIndex_CfItemEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDWeightList,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  UserFeatureIndex_CfItemEntry_DoNotUse();
  explicit UserFeatureIndex_CfItemEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const UserFeatureIndex_CfItemEntry_DoNotUse& other);
  static const UserFeatureIndex_CfItemEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const UserFeatureIndex_CfItemEntry_DoNotUse*>(&_UserFeatureIndex_CfItemEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_redis_2fuser_5ffeature_5fdata_2eproto);
    return ::descriptor_table_redis_2fuser_5ffeature_5fdata_2eproto.file_level_metadata[12];
  }

  public:
};

// -------------------------------------------------------------------

class UserFeatureIndex PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RSP_UserFeatureData.UserFeatureIndex) */ {
 public:
  inline UserFeatureIndex() : UserFeatureIndex(nullptr) {}
  virtual ~UserFeatureIndex();

  UserFeatureIndex(const UserFeatureIndex& from);
  UserFeatureIndex(UserFeatureIndex&& from) noexcept
    : UserFeatureIndex() {
    *this = ::std::move(from);
  }

  inline UserFeatureIndex& operator=(const UserFeatureIndex& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserFeatureIndex& operator=(UserFeatureIndex&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserFeatureIndex& default_instance();

  static inline const UserFeatureIndex* internal_default_instance() {
    return reinterpret_cast<const UserFeatureIndex*>(
               &_UserFeatureIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(UserFeatureIndex& a, UserFeatureIndex& b) {
    a.Swap(&b);
  }
  inline void Swap(UserFeatureIndex* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserFeatureIndex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserFeatureIndex* New() const final {
    return CreateMaybeMessage<UserFeatureIndex>(nullptr);
  }

  UserFeatureIndex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserFeatureIndex>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserFeatureIndex& from);
  void MergeFrom(const UserFeatureIndex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserFeatureIndex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RSP_UserFeatureData.UserFeatureIndex";
  }
  protected:
  explicit UserFeatureIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_redis_2fuser_5ffeature_5fdata_2eproto);
    return ::descriptor_table_redis_2fuser_5ffeature_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kCfItemFieldNumber = 2,
    kTimestampFieldNumber = 1,
  };
  // map<int32, .RSP_UserFeatureData.IDWeightList> cf_item = 2;
  int cf_item_size() const;
  private:
  int _internal_cf_item_size() const;
  public:
  void clear_cf_item();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDWeightList >&
      _internal_cf_item() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDWeightList >*
      _internal_mutable_cf_item();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDWeightList >&
      cf_item() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDWeightList >*
      mutable_cf_item();

  // int64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:RSP_UserFeatureData.UserFeatureIndex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      UserFeatureIndex_CfItemEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDWeightList,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> cf_item_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_redis_2fuser_5ffeature_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserFeatureClean

// int64 timestamp = 1;
inline void UserFeatureClean::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserFeatureClean::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserFeatureClean::timestamp() const {
  // @@protoc_insertion_point(field_get:RSP_UserFeatureData.UserFeatureClean.timestamp)
  return _internal_timestamp();
}
inline void UserFeatureClean::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void UserFeatureClean::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:RSP_UserFeatureData.UserFeatureClean.timestamp)
}

// -------------------------------------------------------------------

// IDWeight

// int64 id = 1;
inline void IDWeight::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IDWeight::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IDWeight::id() const {
  // @@protoc_insertion_point(field_get:RSP_UserFeatureData.IDWeight.id)
  return _internal_id();
}
inline void IDWeight::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void IDWeight::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:RSP_UserFeatureData.IDWeight.id)
}

// float weight = 2;
inline void IDWeight::clear_weight() {
  weight_ = 0;
}
inline float IDWeight::_internal_weight() const {
  return weight_;
}
inline float IDWeight::weight() const {
  // @@protoc_insertion_point(field_get:RSP_UserFeatureData.IDWeight.weight)
  return _internal_weight();
}
inline void IDWeight::_internal_set_weight(float value) {
  
  weight_ = value;
}
inline void IDWeight::set_weight(float value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:RSP_UserFeatureData.IDWeight.weight)
}

// -------------------------------------------------------------------

// IDWeightList

// repeated .RSP_UserFeatureData.IDWeight id_list = 1;
inline int IDWeightList::_internal_id_list_size() const {
  return id_list_.size();
}
inline int IDWeightList::id_list_size() const {
  return _internal_id_list_size();
}
inline void IDWeightList::clear_id_list() {
  id_list_.Clear();
}
inline ::RSP_UserFeatureData::IDWeight* IDWeightList::mutable_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:RSP_UserFeatureData.IDWeightList.id_list)
  return id_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RSP_UserFeatureData::IDWeight >*
IDWeightList::mutable_id_list() {
  // @@protoc_insertion_point(field_mutable_list:RSP_UserFeatureData.IDWeightList.id_list)
  return &id_list_;
}
inline const ::RSP_UserFeatureData::IDWeight& IDWeightList::_internal_id_list(int index) const {
  return id_list_.Get(index);
}
inline const ::RSP_UserFeatureData::IDWeight& IDWeightList::id_list(int index) const {
  // @@protoc_insertion_point(field_get:RSP_UserFeatureData.IDWeightList.id_list)
  return _internal_id_list(index);
}
inline ::RSP_UserFeatureData::IDWeight* IDWeightList::_internal_add_id_list() {
  return id_list_.Add();
}
inline ::RSP_UserFeatureData::IDWeight* IDWeightList::add_id_list() {
  // @@protoc_insertion_point(field_add:RSP_UserFeatureData.IDWeightList.id_list)
  return _internal_add_id_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RSP_UserFeatureData::IDWeight >&
IDWeightList::id_list() const {
  // @@protoc_insertion_point(field_list:RSP_UserFeatureData.IDWeightList.id_list)
  return id_list_;
}

// -------------------------------------------------------------------

// IDTime

// int64 id = 1;
inline void IDTime::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IDTime::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IDTime::id() const {
  // @@protoc_insertion_point(field_get:RSP_UserFeatureData.IDTime.id)
  return _internal_id();
}
inline void IDTime::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void IDTime::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:RSP_UserFeatureData.IDTime.id)
}

// int64 timestamp = 2;
inline void IDTime::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IDTime::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IDTime::timestamp() const {
  // @@protoc_insertion_point(field_get:RSP_UserFeatureData.IDTime.timestamp)
  return _internal_timestamp();
}
inline void IDTime::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void IDTime::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:RSP_UserFeatureData.IDTime.timestamp)
}

// -------------------------------------------------------------------

// IDTimeList

// repeated .RSP_UserFeatureData.IDTime id_list = 1;
inline int IDTimeList::_internal_id_list_size() const {
  return id_list_.size();
}
inline int IDTimeList::id_list_size() const {
  return _internal_id_list_size();
}
inline void IDTimeList::clear_id_list() {
  id_list_.Clear();
}
inline ::RSP_UserFeatureData::IDTime* IDTimeList::mutable_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:RSP_UserFeatureData.IDTimeList.id_list)
  return id_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RSP_UserFeatureData::IDTime >*
IDTimeList::mutable_id_list() {
  // @@protoc_insertion_point(field_mutable_list:RSP_UserFeatureData.IDTimeList.id_list)
  return &id_list_;
}
inline const ::RSP_UserFeatureData::IDTime& IDTimeList::_internal_id_list(int index) const {
  return id_list_.Get(index);
}
inline const ::RSP_UserFeatureData::IDTime& IDTimeList::id_list(int index) const {
  // @@protoc_insertion_point(field_get:RSP_UserFeatureData.IDTimeList.id_list)
  return _internal_id_list(index);
}
inline ::RSP_UserFeatureData::IDTime* IDTimeList::_internal_add_id_list() {
  return id_list_.Add();
}
inline ::RSP_UserFeatureData::IDTime* IDTimeList::add_id_list() {
  // @@protoc_insertion_point(field_add:RSP_UserFeatureData.IDTimeList.id_list)
  return _internal_add_id_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RSP_UserFeatureData::IDTime >&
IDTimeList::id_list() const {
  // @@protoc_insertion_point(field_list:RSP_UserFeatureData.IDTimeList.id_list)
  return id_list_;
}

// -------------------------------------------------------------------

// UserFeatureBasic

// int64 timestamp = 1;
inline void UserFeatureBasic::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserFeatureBasic::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserFeatureBasic::timestamp() const {
  // @@protoc_insertion_point(field_get:RSP_UserFeatureData.UserFeatureBasic.timestamp)
  return _internal_timestamp();
}
inline void UserFeatureBasic::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void UserFeatureBasic::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:RSP_UserFeatureData.UserFeatureBasic.timestamp)
}

// int64 user_id = 2;
inline void UserFeatureBasic::clear_user_id() {
  user_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserFeatureBasic::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserFeatureBasic::user_id() const {
  // @@protoc_insertion_point(field_get:RSP_UserFeatureData.UserFeatureBasic.user_id)
  return _internal_user_id();
}
inline void UserFeatureBasic::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  user_id_ = value;
}
inline void UserFeatureBasic::set_user_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:RSP_UserFeatureData.UserFeatureBasic.user_id)
}

// int32 user_sex = 3;
inline void UserFeatureBasic::clear_user_sex() {
  user_sex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserFeatureBasic::_internal_user_sex() const {
  return user_sex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserFeatureBasic::user_sex() const {
  // @@protoc_insertion_point(field_get:RSP_UserFeatureData.UserFeatureBasic.user_sex)
  return _internal_user_sex();
}
inline void UserFeatureBasic::_internal_set_user_sex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_sex_ = value;
}
inline void UserFeatureBasic::set_user_sex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_sex(value);
  // @@protoc_insertion_point(field_set:RSP_UserFeatureData.UserFeatureBasic.user_sex)
}

// int32 user_province_code = 4;
inline void UserFeatureBasic::clear_user_province_code() {
  user_province_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserFeatureBasic::_internal_user_province_code() const {
  return user_province_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserFeatureBasic::user_province_code() const {
  // @@protoc_insertion_point(field_get:RSP_UserFeatureData.UserFeatureBasic.user_province_code)
  return _internal_user_province_code();
}
inline void UserFeatureBasic::_internal_set_user_province_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_province_code_ = value;
}
inline void UserFeatureBasic::set_user_province_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_province_code(value);
  // @@protoc_insertion_point(field_set:RSP_UserFeatureData.UserFeatureBasic.user_province_code)
}

// int32 user_city_code = 5;
inline void UserFeatureBasic::clear_user_city_code() {
  user_city_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserFeatureBasic::_internal_user_city_code() const {
  return user_city_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserFeatureBasic::user_city_code() const {
  // @@protoc_insertion_point(field_get:RSP_UserFeatureData.UserFeatureBasic.user_city_code)
  return _internal_user_city_code();
}
inline void UserFeatureBasic::_internal_set_user_city_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_city_code_ = value;
}
inline void UserFeatureBasic::set_user_city_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_city_code(value);
  // @@protoc_insertion_point(field_set:RSP_UserFeatureData.UserFeatureBasic.user_city_code)
}

// int32 user_profession = 6;
inline void UserFeatureBasic::clear_user_profession() {
  user_profession_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserFeatureBasic::_internal_user_profession() const {
  return user_profession_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserFeatureBasic::user_profession() const {
  // @@protoc_insertion_point(field_get:RSP_UserFeatureData.UserFeatureBasic.user_profession)
  return _internal_user_profession();
}
inline void UserFeatureBasic::_internal_set_user_profession(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_profession_ = value;
}
inline void UserFeatureBasic::set_user_profession(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_profession(value);
  // @@protoc_insertion_point(field_set:RSP_UserFeatureData.UserFeatureBasic.user_profession)
}

// int32 user_lb = 7;
inline void UserFeatureBasic::clear_user_lb() {
  user_lb_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserFeatureBasic::_internal_user_lb() const {
  return user_lb_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserFeatureBasic::user_lb() const {
  // @@protoc_insertion_point(field_get:RSP_UserFeatureData.UserFeatureBasic.user_lb)
  return _internal_user_lb();
}
inline void UserFeatureBasic::_internal_set_user_lb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_lb_ = value;
}
inline void UserFeatureBasic::set_user_lb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_lb(value);
  // @@protoc_insertion_point(field_set:RSP_UserFeatureData.UserFeatureBasic.user_lb)
}

// int32 is_vip = 8;
inline void UserFeatureBasic::clear_is_vip() {
  is_vip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserFeatureBasic::_internal_is_vip() const {
  return is_vip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserFeatureBasic::is_vip() const {
  // @@protoc_insertion_point(field_get:RSP_UserFeatureData.UserFeatureBasic.is_vip)
  return _internal_is_vip();
}
inline void UserFeatureBasic::_internal_set_is_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  is_vip_ = value;
}
inline void UserFeatureBasic::set_is_vip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_is_vip(value);
  // @@protoc_insertion_point(field_set:RSP_UserFeatureData.UserFeatureBasic.is_vip)
}

// int32 growth_value = 9;
inline void UserFeatureBasic::clear_growth_value() {
  growth_value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserFeatureBasic::_internal_growth_value() const {
  return growth_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserFeatureBasic::growth_value() const {
  // @@protoc_insertion_point(field_get:RSP_UserFeatureData.UserFeatureBasic.growth_value)
  return _internal_growth_value();
}
inline void UserFeatureBasic::_internal_set_growth_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  growth_value_ = value;
}
inline void UserFeatureBasic::set_growth_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_growth_value(value);
  // @@protoc_insertion_point(field_set:RSP_UserFeatureData.UserFeatureBasic.growth_value)
}

// int32 vip_status = 10;
inline void UserFeatureBasic::clear_vip_status() {
  vip_status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserFeatureBasic::_internal_vip_status() const {
  return vip_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserFeatureBasic::vip_status() const {
  // @@protoc_insertion_point(field_get:RSP_UserFeatureData.UserFeatureBasic.vip_status)
  return _internal_vip_status();
}
inline void UserFeatureBasic::_internal_set_vip_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vip_status_ = value;
}
inline void UserFeatureBasic::set_vip_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vip_status(value);
  // @@protoc_insertion_point(field_set:RSP_UserFeatureData.UserFeatureBasic.vip_status)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// UserFeatureClick

// int64 timestamp = 1;
inline void UserFeatureClick::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserFeatureClick::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserFeatureClick::timestamp() const {
  // @@protoc_insertion_point(field_get:RSP_UserFeatureData.UserFeatureClick.timestamp)
  return _internal_timestamp();
}
inline void UserFeatureClick::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void UserFeatureClick::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:RSP_UserFeatureData.UserFeatureClick.timestamp)
}

// map<int32, .RSP_UserFeatureData.IDTimeList> click_item = 2;
inline int UserFeatureClick::_internal_click_item_size() const {
  return click_item_.size();
}
inline int UserFeatureClick::click_item_size() const {
  return _internal_click_item_size();
}
inline void UserFeatureClick::clear_click_item() {
  click_item_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList >&
UserFeatureClick::_internal_click_item() const {
  return click_item_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList >&
UserFeatureClick::click_item() const {
  // @@protoc_insertion_point(field_map:RSP_UserFeatureData.UserFeatureClick.click_item)
  return _internal_click_item();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList >*
UserFeatureClick::_internal_mutable_click_item() {
  return click_item_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList >*
UserFeatureClick::mutable_click_item() {
  // @@protoc_insertion_point(field_mutable_map:RSP_UserFeatureData.UserFeatureClick.click_item)
  return _internal_mutable_click_item();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// UserFeatureSearch

// int64 timestamp = 1;
inline void UserFeatureSearch::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserFeatureSearch::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserFeatureSearch::timestamp() const {
  // @@protoc_insertion_point(field_get:RSP_UserFeatureData.UserFeatureSearch.timestamp)
  return _internal_timestamp();
}
inline void UserFeatureSearch::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void UserFeatureSearch::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:RSP_UserFeatureData.UserFeatureSearch.timestamp)
}

// map<int32, .RSP_UserFeatureData.IDTimeList> search_words = 2;
inline int UserFeatureSearch::_internal_search_words_size() const {
  return search_words_.size();
}
inline int UserFeatureSearch::search_words_size() const {
  return _internal_search_words_size();
}
inline void UserFeatureSearch::clear_search_words() {
  search_words_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList >&
UserFeatureSearch::_internal_search_words() const {
  return search_words_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList >&
UserFeatureSearch::search_words() const {
  // @@protoc_insertion_point(field_map:RSP_UserFeatureData.UserFeatureSearch.search_words)
  return _internal_search_words();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList >*
UserFeatureSearch::_internal_mutable_search_words() {
  return search_words_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList >*
UserFeatureSearch::mutable_search_words() {
  // @@protoc_insertion_point(field_mutable_map:RSP_UserFeatureData.UserFeatureSearch.search_words)
  return _internal_mutable_search_words();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// UserFeatureDownload

// int64 timestamp = 1;
inline void UserFeatureDownload::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserFeatureDownload::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserFeatureDownload::timestamp() const {
  // @@protoc_insertion_point(field_get:RSP_UserFeatureData.UserFeatureDownload.timestamp)
  return _internal_timestamp();
}
inline void UserFeatureDownload::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void UserFeatureDownload::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:RSP_UserFeatureData.UserFeatureDownload.timestamp)
}

// map<int32, .RSP_UserFeatureData.IDTimeList> download_item = 2;
inline int UserFeatureDownload::_internal_download_item_size() const {
  return download_item_.size();
}
inline int UserFeatureDownload::download_item_size() const {
  return _internal_download_item_size();
}
inline void UserFeatureDownload::clear_download_item() {
  download_item_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList >&
UserFeatureDownload::_internal_download_item() const {
  return download_item_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList >&
UserFeatureDownload::download_item() const {
  // @@protoc_insertion_point(field_map:RSP_UserFeatureData.UserFeatureDownload.download_item)
  return _internal_download_item();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList >*
UserFeatureDownload::_internal_mutable_download_item() {
  return download_item_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList >*
UserFeatureDownload::mutable_download_item() {
  // @@protoc_insertion_point(field_mutable_map:RSP_UserFeatureData.UserFeatureDownload.download_item)
  return _internal_mutable_download_item();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// UserFeatureIndex

// int64 timestamp = 1;
inline void UserFeatureIndex::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserFeatureIndex::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserFeatureIndex::timestamp() const {
  // @@protoc_insertion_point(field_get:RSP_UserFeatureData.UserFeatureIndex.timestamp)
  return _internal_timestamp();
}
inline void UserFeatureIndex::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void UserFeatureIndex::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:RSP_UserFeatureData.UserFeatureIndex.timestamp)
}

// map<int32, .RSP_UserFeatureData.IDWeightList> cf_item = 2;
inline int UserFeatureIndex::_internal_cf_item_size() const {
  return cf_item_.size();
}
inline int UserFeatureIndex::cf_item_size() const {
  return _internal_cf_item_size();
}
inline void UserFeatureIndex::clear_cf_item() {
  cf_item_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDWeightList >&
UserFeatureIndex::_internal_cf_item() const {
  return cf_item_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDWeightList >&
UserFeatureIndex::cf_item() const {
  // @@protoc_insertion_point(field_map:RSP_UserFeatureData.UserFeatureIndex.cf_item)
  return _internal_cf_item();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDWeightList >*
UserFeatureIndex::_internal_mutable_cf_item() {
  return cf_item_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDWeightList >*
UserFeatureIndex::mutable_cf_item() {
  // @@protoc_insertion_point(field_mutable_map:RSP_UserFeatureData.UserFeatureIndex.cf_item)
  return _internal_mutable_cf_item();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace RSP_UserFeatureData

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_redis_2fuser_5ffeature_5fdata_2eproto
