// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: redis/user_live_feature_data.proto

#include "redis/user_live_feature_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_redis_2fuser_5flive_5ffeature_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IDTime_redis_2fuser_5flive_5ffeature_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_redis_2fuser_5flive_5ffeature_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IDTimeList_redis_2fuser_5flive_5ffeature_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_redis_2fuser_5flive_5ffeature_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IDWeight_redis_2fuser_5flive_5ffeature_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_redis_2fuser_5flive_5ffeature_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserLiveFeatureClick_ClickItemEntry_DoNotUse_redis_2fuser_5flive_5ffeature_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_redis_2fuser_5flive_5ffeature_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserLiveFeatureDownload_DownloadItemEntry_DoNotUse_redis_2fuser_5flive_5ffeature_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_redis_2fuser_5flive_5ffeature_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserLiveFeatureSearch_SearchWordsEntry_DoNotUse_redis_2fuser_5flive_5ffeature_5fdata_2eproto;
namespace RSP_UserLiveFeatureData {
class UserLiveFeatureCleanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserLiveFeatureClean> _instance;
} _UserLiveFeatureClean_default_instance_;
class IDWeightDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IDWeight> _instance;
} _IDWeight_default_instance_;
class IDWeightListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IDWeightList> _instance;
} _IDWeightList_default_instance_;
class IDTimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IDTime> _instance;
} _IDTime_default_instance_;
class IDTimeListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IDTimeList> _instance;
} _IDTimeList_default_instance_;
class UserLiveFeatureClick_ClickItemEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserLiveFeatureClick_ClickItemEntry_DoNotUse> _instance;
} _UserLiveFeatureClick_ClickItemEntry_DoNotUse_default_instance_;
class UserLiveFeatureClickDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserLiveFeatureClick> _instance;
} _UserLiveFeatureClick_default_instance_;
class UserLiveFeatureSearch_SearchWordsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserLiveFeatureSearch_SearchWordsEntry_DoNotUse> _instance;
} _UserLiveFeatureSearch_SearchWordsEntry_DoNotUse_default_instance_;
class UserLiveFeatureSearchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserLiveFeatureSearch> _instance;
} _UserLiveFeatureSearch_default_instance_;
class UserLiveFeatureDownload_DownloadItemEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserLiveFeatureDownload_DownloadItemEntry_DoNotUse> _instance;
} _UserLiveFeatureDownload_DownloadItemEntry_DoNotUse_default_instance_;
class UserLiveFeatureDownloadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserLiveFeatureDownload> _instance;
} _UserLiveFeatureDownload_default_instance_;
}  // namespace RSP_UserLiveFeatureData
static void InitDefaultsscc_info_IDTime_redis_2fuser_5flive_5ffeature_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RSP_UserLiveFeatureData::_IDTime_default_instance_;
    new (ptr) ::RSP_UserLiveFeatureData::IDTime();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IDTime_redis_2fuser_5flive_5ffeature_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IDTime_redis_2fuser_5flive_5ffeature_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_IDTimeList_redis_2fuser_5flive_5ffeature_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RSP_UserLiveFeatureData::_IDTimeList_default_instance_;
    new (ptr) ::RSP_UserLiveFeatureData::IDTimeList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IDTimeList_redis_2fuser_5flive_5ffeature_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IDTimeList_redis_2fuser_5flive_5ffeature_5fdata_2eproto}, {
      &scc_info_IDTime_redis_2fuser_5flive_5ffeature_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_IDWeight_redis_2fuser_5flive_5ffeature_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RSP_UserLiveFeatureData::_IDWeight_default_instance_;
    new (ptr) ::RSP_UserLiveFeatureData::IDWeight();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IDWeight_redis_2fuser_5flive_5ffeature_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IDWeight_redis_2fuser_5flive_5ffeature_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_IDWeightList_redis_2fuser_5flive_5ffeature_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RSP_UserLiveFeatureData::_IDWeightList_default_instance_;
    new (ptr) ::RSP_UserLiveFeatureData::IDWeightList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IDWeightList_redis_2fuser_5flive_5ffeature_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IDWeightList_redis_2fuser_5flive_5ffeature_5fdata_2eproto}, {
      &scc_info_IDWeight_redis_2fuser_5flive_5ffeature_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_UserLiveFeatureClean_redis_2fuser_5flive_5ffeature_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RSP_UserLiveFeatureData::_UserLiveFeatureClean_default_instance_;
    new (ptr) ::RSP_UserLiveFeatureData::UserLiveFeatureClean();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserLiveFeatureClean_redis_2fuser_5flive_5ffeature_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserLiveFeatureClean_redis_2fuser_5flive_5ffeature_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_UserLiveFeatureClick_redis_2fuser_5flive_5ffeature_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RSP_UserLiveFeatureData::_UserLiveFeatureClick_default_instance_;
    new (ptr) ::RSP_UserLiveFeatureData::UserLiveFeatureClick();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserLiveFeatureClick_redis_2fuser_5flive_5ffeature_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserLiveFeatureClick_redis_2fuser_5flive_5ffeature_5fdata_2eproto}, {
      &scc_info_UserLiveFeatureClick_ClickItemEntry_DoNotUse_redis_2fuser_5flive_5ffeature_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_UserLiveFeatureClick_ClickItemEntry_DoNotUse_redis_2fuser_5flive_5ffeature_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RSP_UserLiveFeatureData::_UserLiveFeatureClick_ClickItemEntry_DoNotUse_default_instance_;
    new (ptr) ::RSP_UserLiveFeatureData::UserLiveFeatureClick_ClickItemEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserLiveFeatureClick_ClickItemEntry_DoNotUse_redis_2fuser_5flive_5ffeature_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserLiveFeatureClick_ClickItemEntry_DoNotUse_redis_2fuser_5flive_5ffeature_5fdata_2eproto}, {
      &scc_info_IDTimeList_redis_2fuser_5flive_5ffeature_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_UserLiveFeatureDownload_redis_2fuser_5flive_5ffeature_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RSP_UserLiveFeatureData::_UserLiveFeatureDownload_default_instance_;
    new (ptr) ::RSP_UserLiveFeatureData::UserLiveFeatureDownload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserLiveFeatureDownload_redis_2fuser_5flive_5ffeature_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserLiveFeatureDownload_redis_2fuser_5flive_5ffeature_5fdata_2eproto}, {
      &scc_info_UserLiveFeatureDownload_DownloadItemEntry_DoNotUse_redis_2fuser_5flive_5ffeature_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_UserLiveFeatureDownload_DownloadItemEntry_DoNotUse_redis_2fuser_5flive_5ffeature_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RSP_UserLiveFeatureData::_UserLiveFeatureDownload_DownloadItemEntry_DoNotUse_default_instance_;
    new (ptr) ::RSP_UserLiveFeatureData::UserLiveFeatureDownload_DownloadItemEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserLiveFeatureDownload_DownloadItemEntry_DoNotUse_redis_2fuser_5flive_5ffeature_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserLiveFeatureDownload_DownloadItemEntry_DoNotUse_redis_2fuser_5flive_5ffeature_5fdata_2eproto}, {
      &scc_info_IDTimeList_redis_2fuser_5flive_5ffeature_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_UserLiveFeatureSearch_redis_2fuser_5flive_5ffeature_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RSP_UserLiveFeatureData::_UserLiveFeatureSearch_default_instance_;
    new (ptr) ::RSP_UserLiveFeatureData::UserLiveFeatureSearch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserLiveFeatureSearch_redis_2fuser_5flive_5ffeature_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserLiveFeatureSearch_redis_2fuser_5flive_5ffeature_5fdata_2eproto}, {
      &scc_info_UserLiveFeatureSearch_SearchWordsEntry_DoNotUse_redis_2fuser_5flive_5ffeature_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_UserLiveFeatureSearch_SearchWordsEntry_DoNotUse_redis_2fuser_5flive_5ffeature_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RSP_UserLiveFeatureData::_UserLiveFeatureSearch_SearchWordsEntry_DoNotUse_default_instance_;
    new (ptr) ::RSP_UserLiveFeatureData::UserLiveFeatureSearch_SearchWordsEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserLiveFeatureSearch_SearchWordsEntry_DoNotUse_redis_2fuser_5flive_5ffeature_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserLiveFeatureSearch_SearchWordsEntry_DoNotUse_redis_2fuser_5flive_5ffeature_5fdata_2eproto}, {
      &scc_info_IDTimeList_redis_2fuser_5flive_5ffeature_5fdata_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_redis_2fuser_5flive_5ffeature_5fdata_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_redis_2fuser_5flive_5ffeature_5fdata_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_redis_2fuser_5flive_5ffeature_5fdata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_redis_2fuser_5flive_5ffeature_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RSP_UserLiveFeatureData::UserLiveFeatureClean, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RSP_UserLiveFeatureData::UserLiveFeatureClean, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RSP_UserLiveFeatureData::IDWeight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RSP_UserLiveFeatureData::IDWeight, id_),
  PROTOBUF_FIELD_OFFSET(::RSP_UserLiveFeatureData::IDWeight, weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RSP_UserLiveFeatureData::IDWeightList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RSP_UserLiveFeatureData::IDWeightList, id_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RSP_UserLiveFeatureData::IDTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RSP_UserLiveFeatureData::IDTime, id_),
  PROTOBUF_FIELD_OFFSET(::RSP_UserLiveFeatureData::IDTime, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RSP_UserLiveFeatureData::IDTimeList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RSP_UserLiveFeatureData::IDTimeList, id_list_),
  PROTOBUF_FIELD_OFFSET(::RSP_UserLiveFeatureData::UserLiveFeatureClick_ClickItemEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RSP_UserLiveFeatureData::UserLiveFeatureClick_ClickItemEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RSP_UserLiveFeatureData::UserLiveFeatureClick_ClickItemEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::RSP_UserLiveFeatureData::UserLiveFeatureClick_ClickItemEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RSP_UserLiveFeatureData::UserLiveFeatureClick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RSP_UserLiveFeatureData::UserLiveFeatureClick, timestamp_),
  PROTOBUF_FIELD_OFFSET(::RSP_UserLiveFeatureData::UserLiveFeatureClick, click_item_),
  PROTOBUF_FIELD_OFFSET(::RSP_UserLiveFeatureData::UserLiveFeatureSearch_SearchWordsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RSP_UserLiveFeatureData::UserLiveFeatureSearch_SearchWordsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RSP_UserLiveFeatureData::UserLiveFeatureSearch_SearchWordsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::RSP_UserLiveFeatureData::UserLiveFeatureSearch_SearchWordsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RSP_UserLiveFeatureData::UserLiveFeatureSearch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RSP_UserLiveFeatureData::UserLiveFeatureSearch, timestamp_),
  PROTOBUF_FIELD_OFFSET(::RSP_UserLiveFeatureData::UserLiveFeatureSearch, search_words_),
  PROTOBUF_FIELD_OFFSET(::RSP_UserLiveFeatureData::UserLiveFeatureDownload_DownloadItemEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RSP_UserLiveFeatureData::UserLiveFeatureDownload_DownloadItemEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RSP_UserLiveFeatureData::UserLiveFeatureDownload_DownloadItemEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::RSP_UserLiveFeatureData::UserLiveFeatureDownload_DownloadItemEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RSP_UserLiveFeatureData::UserLiveFeatureDownload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RSP_UserLiveFeatureData::UserLiveFeatureDownload, timestamp_),
  PROTOBUF_FIELD_OFFSET(::RSP_UserLiveFeatureData::UserLiveFeatureDownload, download_item_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::RSP_UserLiveFeatureData::UserLiveFeatureClean)},
  { 6, -1, sizeof(::RSP_UserLiveFeatureData::IDWeight)},
  { 13, -1, sizeof(::RSP_UserLiveFeatureData::IDWeightList)},
  { 19, -1, sizeof(::RSP_UserLiveFeatureData::IDTime)},
  { 26, -1, sizeof(::RSP_UserLiveFeatureData::IDTimeList)},
  { 32, 39, sizeof(::RSP_UserLiveFeatureData::UserLiveFeatureClick_ClickItemEntry_DoNotUse)},
  { 41, -1, sizeof(::RSP_UserLiveFeatureData::UserLiveFeatureClick)},
  { 48, 55, sizeof(::RSP_UserLiveFeatureData::UserLiveFeatureSearch_SearchWordsEntry_DoNotUse)},
  { 57, -1, sizeof(::RSP_UserLiveFeatureData::UserLiveFeatureSearch)},
  { 64, 71, sizeof(::RSP_UserLiveFeatureData::UserLiveFeatureDownload_DownloadItemEntry_DoNotUse)},
  { 73, -1, sizeof(::RSP_UserLiveFeatureData::UserLiveFeatureDownload)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RSP_UserLiveFeatureData::_UserLiveFeatureClean_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RSP_UserLiveFeatureData::_IDWeight_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RSP_UserLiveFeatureData::_IDWeightList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RSP_UserLiveFeatureData::_IDTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RSP_UserLiveFeatureData::_IDTimeList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RSP_UserLiveFeatureData::_UserLiveFeatureClick_ClickItemEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RSP_UserLiveFeatureData::_UserLiveFeatureClick_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RSP_UserLiveFeatureData::_UserLiveFeatureSearch_SearchWordsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RSP_UserLiveFeatureData::_UserLiveFeatureSearch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RSP_UserLiveFeatureData::_UserLiveFeatureDownload_DownloadItemEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RSP_UserLiveFeatureData::_UserLiveFeatureDownload_default_instance_),
};

const char descriptor_table_protodef_redis_2fuser_5flive_5ffeature_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"redis/user_live_feature_data.proto\022\027RS"
  "P_UserLiveFeatureData\")\n\024UserLiveFeature"
  "Clean\022\021\n\ttimestamp\030\001 \001(\003\"&\n\010IDWeight\022\n\n\002"
  "id\030\001 \001(\003\022\016\n\006weight\030\002 \001(\002\"B\n\014IDWeightList"
  "\0222\n\007id_list\030\001 \003(\0132!.RSP_UserLiveFeatureD"
  "ata.IDWeight\"\'\n\006IDTime\022\n\n\002id\030\001 \001(\003\022\021\n\tti"
  "mestamp\030\002 \001(\003\">\n\nIDTimeList\0220\n\007id_list\030\001"
  " \003(\0132\037.RSP_UserLiveFeatureData.IDTime\"\322\001"
  "\n\024UserLiveFeatureClick\022\021\n\ttimestamp\030\001 \001("
  "\003\022P\n\nclick_item\030\002 \003(\0132<.RSP_UserLiveFeat"
  "ureData.UserLiveFeatureClick.ClickItemEn"
  "try\032U\n\016ClickItemEntry\022\013\n\003key\030\001 \001(\005\0222\n\005va"
  "lue\030\002 \001(\0132#.RSP_UserLiveFeatureData.IDTi"
  "meList:\0028\001\"\332\001\n\025UserLiveFeatureSearch\022\021\n\t"
  "timestamp\030\001 \001(\003\022U\n\014search_words\030\002 \003(\0132\?."
  "RSP_UserLiveFeatureData.UserLiveFeatureS"
  "earch.SearchWordsEntry\032W\n\020SearchWordsEnt"
  "ry\022\013\n\003key\030\001 \001(\005\0222\n\005value\030\002 \001(\0132#.RSP_Use"
  "rLiveFeatureData.IDTimeList:\0028\001\"\341\001\n\027User"
  "LiveFeatureDownload\022\021\n\ttimestamp\030\001 \001(\003\022Y"
  "\n\rdownload_item\030\002 \003(\0132B.RSP_UserLiveFeat"
  "ureData.UserLiveFeatureDownload.Download"
  "ItemEntry\032X\n\021DownloadItemEntry\022\013\n\003key\030\001 "
  "\001(\005\0222\n\005value\030\002 \001(\0132#.RSP_UserLiveFeature"
  "Data.IDTimeList:\0028\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_redis_2fuser_5flive_5ffeature_5fdata_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_redis_2fuser_5flive_5ffeature_5fdata_2eproto_sccs[11] = {
  &scc_info_IDTime_redis_2fuser_5flive_5ffeature_5fdata_2eproto.base,
  &scc_info_IDTimeList_redis_2fuser_5flive_5ffeature_5fdata_2eproto.base,
  &scc_info_IDWeight_redis_2fuser_5flive_5ffeature_5fdata_2eproto.base,
  &scc_info_IDWeightList_redis_2fuser_5flive_5ffeature_5fdata_2eproto.base,
  &scc_info_UserLiveFeatureClean_redis_2fuser_5flive_5ffeature_5fdata_2eproto.base,
  &scc_info_UserLiveFeatureClick_redis_2fuser_5flive_5ffeature_5fdata_2eproto.base,
  &scc_info_UserLiveFeatureClick_ClickItemEntry_DoNotUse_redis_2fuser_5flive_5ffeature_5fdata_2eproto.base,
  &scc_info_UserLiveFeatureDownload_redis_2fuser_5flive_5ffeature_5fdata_2eproto.base,
  &scc_info_UserLiveFeatureDownload_DownloadItemEntry_DoNotUse_redis_2fuser_5flive_5ffeature_5fdata_2eproto.base,
  &scc_info_UserLiveFeatureSearch_redis_2fuser_5flive_5ffeature_5fdata_2eproto.base,
  &scc_info_UserLiveFeatureSearch_SearchWordsEntry_DoNotUse_redis_2fuser_5flive_5ffeature_5fdata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_redis_2fuser_5flive_5ffeature_5fdata_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_redis_2fuser_5flive_5ffeature_5fdata_2eproto = {
  false, false, descriptor_table_protodef_redis_2fuser_5flive_5ffeature_5fdata_2eproto, "redis/user_live_feature_data.proto", 987,
  &descriptor_table_redis_2fuser_5flive_5ffeature_5fdata_2eproto_once, descriptor_table_redis_2fuser_5flive_5ffeature_5fdata_2eproto_sccs, descriptor_table_redis_2fuser_5flive_5ffeature_5fdata_2eproto_deps, 11, 0,
  schemas, file_default_instances, TableStruct_redis_2fuser_5flive_5ffeature_5fdata_2eproto::offsets,
  file_level_metadata_redis_2fuser_5flive_5ffeature_5fdata_2eproto, 11, file_level_enum_descriptors_redis_2fuser_5flive_5ffeature_5fdata_2eproto, file_level_service_descriptors_redis_2fuser_5flive_5ffeature_5fdata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_redis_2fuser_5flive_5ffeature_5fdata_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_redis_2fuser_5flive_5ffeature_5fdata_2eproto)), true);
namespace RSP_UserLiveFeatureData {

// ===================================================================

class UserLiveFeatureClean::_Internal {
 public:
};

UserLiveFeatureClean::UserLiveFeatureClean(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RSP_UserLiveFeatureData.UserLiveFeatureClean)
}
UserLiveFeatureClean::UserLiveFeatureClean(const UserLiveFeatureClean& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:RSP_UserLiveFeatureData.UserLiveFeatureClean)
}

void UserLiveFeatureClean::SharedCtor() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}

UserLiveFeatureClean::~UserLiveFeatureClean() {
  // @@protoc_insertion_point(destructor:RSP_UserLiveFeatureData.UserLiveFeatureClean)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserLiveFeatureClean::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserLiveFeatureClean::ArenaDtor(void* object) {
  UserLiveFeatureClean* _this = reinterpret_cast< UserLiveFeatureClean* >(object);
  (void)_this;
}
void UserLiveFeatureClean::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserLiveFeatureClean::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserLiveFeatureClean& UserLiveFeatureClean::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserLiveFeatureClean_redis_2fuser_5flive_5ffeature_5fdata_2eproto.base);
  return *internal_default_instance();
}


void UserLiveFeatureClean::Clear() {
// @@protoc_insertion_point(message_clear_start:RSP_UserLiveFeatureData.UserLiveFeatureClean)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserLiveFeatureClean::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserLiveFeatureClean::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RSP_UserLiveFeatureData.UserLiveFeatureClean)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RSP_UserLiveFeatureData.UserLiveFeatureClean)
  return target;
}

size_t UserLiveFeatureClean::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RSP_UserLiveFeatureData.UserLiveFeatureClean)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserLiveFeatureClean::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RSP_UserLiveFeatureData.UserLiveFeatureClean)
  GOOGLE_DCHECK_NE(&from, this);
  const UserLiveFeatureClean* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserLiveFeatureClean>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RSP_UserLiveFeatureData.UserLiveFeatureClean)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RSP_UserLiveFeatureData.UserLiveFeatureClean)
    MergeFrom(*source);
  }
}

void UserLiveFeatureClean::MergeFrom(const UserLiveFeatureClean& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RSP_UserLiveFeatureData.UserLiveFeatureClean)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void UserLiveFeatureClean::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RSP_UserLiveFeatureData.UserLiveFeatureClean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLiveFeatureClean::CopyFrom(const UserLiveFeatureClean& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RSP_UserLiveFeatureData.UserLiveFeatureClean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLiveFeatureClean::IsInitialized() const {
  return true;
}

void UserLiveFeatureClean::InternalSwap(UserLiveFeatureClean* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserLiveFeatureClean::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IDWeight::_Internal {
 public:
};

IDWeight::IDWeight(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RSP_UserLiveFeatureData.IDWeight)
}
IDWeight::IDWeight(const IDWeight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&id_)) + sizeof(weight_));
  // @@protoc_insertion_point(copy_constructor:RSP_UserLiveFeatureData.IDWeight)
}

void IDWeight::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&id_)) + sizeof(weight_));
}

IDWeight::~IDWeight() {
  // @@protoc_insertion_point(destructor:RSP_UserLiveFeatureData.IDWeight)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IDWeight::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IDWeight::ArenaDtor(void* object) {
  IDWeight* _this = reinterpret_cast< IDWeight* >(object);
  (void)_this;
}
void IDWeight::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IDWeight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IDWeight& IDWeight::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IDWeight_redis_2fuser_5flive_5ffeature_5fdata_2eproto.base);
  return *internal_default_instance();
}


void IDWeight::Clear() {
// @@protoc_insertion_point(message_clear_start:RSP_UserLiveFeatureData.IDWeight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&id_)) + sizeof(weight_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IDWeight::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float weight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IDWeight::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RSP_UserLiveFeatureData.IDWeight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // float weight = 2;
  if (!(this->weight() <= 0 && this->weight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RSP_UserLiveFeatureData.IDWeight)
  return target;
}

size_t IDWeight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RSP_UserLiveFeatureData.IDWeight)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // float weight = 2;
  if (!(this->weight() <= 0 && this->weight() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IDWeight::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RSP_UserLiveFeatureData.IDWeight)
  GOOGLE_DCHECK_NE(&from, this);
  const IDWeight* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IDWeight>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RSP_UserLiveFeatureData.IDWeight)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RSP_UserLiveFeatureData.IDWeight)
    MergeFrom(*source);
  }
}

void IDWeight::MergeFrom(const IDWeight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RSP_UserLiveFeatureData.IDWeight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (!(from.weight() <= 0 && from.weight() >= 0)) {
    _internal_set_weight(from._internal_weight());
  }
}

void IDWeight::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RSP_UserLiveFeatureData.IDWeight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IDWeight::CopyFrom(const IDWeight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RSP_UserLiveFeatureData.IDWeight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IDWeight::IsInitialized() const {
  return true;
}

void IDWeight::InternalSwap(IDWeight* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IDWeight, weight_)
      + sizeof(IDWeight::weight_)
      - PROTOBUF_FIELD_OFFSET(IDWeight, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IDWeight::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IDWeightList::_Internal {
 public:
};

IDWeightList::IDWeightList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  id_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RSP_UserLiveFeatureData.IDWeightList)
}
IDWeightList::IDWeightList(const IDWeightList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      id_list_(from.id_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:RSP_UserLiveFeatureData.IDWeightList)
}

void IDWeightList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IDWeightList_redis_2fuser_5flive_5ffeature_5fdata_2eproto.base);
}

IDWeightList::~IDWeightList() {
  // @@protoc_insertion_point(destructor:RSP_UserLiveFeatureData.IDWeightList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IDWeightList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IDWeightList::ArenaDtor(void* object) {
  IDWeightList* _this = reinterpret_cast< IDWeightList* >(object);
  (void)_this;
}
void IDWeightList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IDWeightList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IDWeightList& IDWeightList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IDWeightList_redis_2fuser_5flive_5ffeature_5fdata_2eproto.base);
  return *internal_default_instance();
}


void IDWeightList::Clear() {
// @@protoc_insertion_point(message_clear_start:RSP_UserLiveFeatureData.IDWeightList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IDWeightList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .RSP_UserLiveFeatureData.IDWeight id_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_id_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IDWeightList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RSP_UserLiveFeatureData.IDWeightList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .RSP_UserLiveFeatureData.IDWeight id_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_id_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_id_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RSP_UserLiveFeatureData.IDWeightList)
  return target;
}

size_t IDWeightList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RSP_UserLiveFeatureData.IDWeightList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RSP_UserLiveFeatureData.IDWeight id_list = 1;
  total_size += 1UL * this->_internal_id_list_size();
  for (const auto& msg : this->id_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IDWeightList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RSP_UserLiveFeatureData.IDWeightList)
  GOOGLE_DCHECK_NE(&from, this);
  const IDWeightList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IDWeightList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RSP_UserLiveFeatureData.IDWeightList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RSP_UserLiveFeatureData.IDWeightList)
    MergeFrom(*source);
  }
}

void IDWeightList::MergeFrom(const IDWeightList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RSP_UserLiveFeatureData.IDWeightList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  id_list_.MergeFrom(from.id_list_);
}

void IDWeightList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RSP_UserLiveFeatureData.IDWeightList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IDWeightList::CopyFrom(const IDWeightList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RSP_UserLiveFeatureData.IDWeightList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IDWeightList::IsInitialized() const {
  return true;
}

void IDWeightList::InternalSwap(IDWeightList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_list_.InternalSwap(&other->id_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IDWeightList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IDTime::_Internal {
 public:
};

IDTime::IDTime(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RSP_UserLiveFeatureData.IDTime)
}
IDTime::IDTime(const IDTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&id_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:RSP_UserLiveFeatureData.IDTime)
}

void IDTime::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&id_)) + sizeof(timestamp_));
}

IDTime::~IDTime() {
  // @@protoc_insertion_point(destructor:RSP_UserLiveFeatureData.IDTime)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IDTime::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IDTime::ArenaDtor(void* object) {
  IDTime* _this = reinterpret_cast< IDTime* >(object);
  (void)_this;
}
void IDTime::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IDTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IDTime& IDTime::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IDTime_redis_2fuser_5flive_5ffeature_5fdata_2eproto.base);
  return *internal_default_instance();
}


void IDTime::Clear() {
// @@protoc_insertion_point(message_clear_start:RSP_UserLiveFeatureData.IDTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&id_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IDTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IDTime::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RSP_UserLiveFeatureData.IDTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RSP_UserLiveFeatureData.IDTime)
  return target;
}

size_t IDTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RSP_UserLiveFeatureData.IDTime)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IDTime::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RSP_UserLiveFeatureData.IDTime)
  GOOGLE_DCHECK_NE(&from, this);
  const IDTime* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IDTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RSP_UserLiveFeatureData.IDTime)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RSP_UserLiveFeatureData.IDTime)
    MergeFrom(*source);
  }
}

void IDTime::MergeFrom(const IDTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RSP_UserLiveFeatureData.IDTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void IDTime::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RSP_UserLiveFeatureData.IDTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IDTime::CopyFrom(const IDTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RSP_UserLiveFeatureData.IDTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IDTime::IsInitialized() const {
  return true;
}

void IDTime::InternalSwap(IDTime* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IDTime, timestamp_)
      + sizeof(IDTime::timestamp_)
      - PROTOBUF_FIELD_OFFSET(IDTime, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IDTime::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IDTimeList::_Internal {
 public:
};

IDTimeList::IDTimeList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  id_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RSP_UserLiveFeatureData.IDTimeList)
}
IDTimeList::IDTimeList(const IDTimeList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      id_list_(from.id_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:RSP_UserLiveFeatureData.IDTimeList)
}

void IDTimeList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IDTimeList_redis_2fuser_5flive_5ffeature_5fdata_2eproto.base);
}

IDTimeList::~IDTimeList() {
  // @@protoc_insertion_point(destructor:RSP_UserLiveFeatureData.IDTimeList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IDTimeList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IDTimeList::ArenaDtor(void* object) {
  IDTimeList* _this = reinterpret_cast< IDTimeList* >(object);
  (void)_this;
}
void IDTimeList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IDTimeList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IDTimeList& IDTimeList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IDTimeList_redis_2fuser_5flive_5ffeature_5fdata_2eproto.base);
  return *internal_default_instance();
}


void IDTimeList::Clear() {
// @@protoc_insertion_point(message_clear_start:RSP_UserLiveFeatureData.IDTimeList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IDTimeList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .RSP_UserLiveFeatureData.IDTime id_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_id_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IDTimeList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RSP_UserLiveFeatureData.IDTimeList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .RSP_UserLiveFeatureData.IDTime id_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_id_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_id_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RSP_UserLiveFeatureData.IDTimeList)
  return target;
}

size_t IDTimeList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RSP_UserLiveFeatureData.IDTimeList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RSP_UserLiveFeatureData.IDTime id_list = 1;
  total_size += 1UL * this->_internal_id_list_size();
  for (const auto& msg : this->id_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IDTimeList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RSP_UserLiveFeatureData.IDTimeList)
  GOOGLE_DCHECK_NE(&from, this);
  const IDTimeList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IDTimeList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RSP_UserLiveFeatureData.IDTimeList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RSP_UserLiveFeatureData.IDTimeList)
    MergeFrom(*source);
  }
}

void IDTimeList::MergeFrom(const IDTimeList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RSP_UserLiveFeatureData.IDTimeList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  id_list_.MergeFrom(from.id_list_);
}

void IDTimeList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RSP_UserLiveFeatureData.IDTimeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IDTimeList::CopyFrom(const IDTimeList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RSP_UserLiveFeatureData.IDTimeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IDTimeList::IsInitialized() const {
  return true;
}

void IDTimeList::InternalSwap(IDTimeList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_list_.InternalSwap(&other->id_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IDTimeList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

UserLiveFeatureClick_ClickItemEntry_DoNotUse::UserLiveFeatureClick_ClickItemEntry_DoNotUse() {}
UserLiveFeatureClick_ClickItemEntry_DoNotUse::UserLiveFeatureClick_ClickItemEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void UserLiveFeatureClick_ClickItemEntry_DoNotUse::MergeFrom(const UserLiveFeatureClick_ClickItemEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata UserLiveFeatureClick_ClickItemEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void UserLiveFeatureClick_ClickItemEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class UserLiveFeatureClick::_Internal {
 public:
};

UserLiveFeatureClick::UserLiveFeatureClick(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  click_item_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RSP_UserLiveFeatureData.UserLiveFeatureClick)
}
UserLiveFeatureClick::UserLiveFeatureClick(const UserLiveFeatureClick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  click_item_.MergeFrom(from.click_item_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:RSP_UserLiveFeatureData.UserLiveFeatureClick)
}

void UserLiveFeatureClick::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserLiveFeatureClick_redis_2fuser_5flive_5ffeature_5fdata_2eproto.base);
  timestamp_ = PROTOBUF_LONGLONG(0);
}

UserLiveFeatureClick::~UserLiveFeatureClick() {
  // @@protoc_insertion_point(destructor:RSP_UserLiveFeatureData.UserLiveFeatureClick)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserLiveFeatureClick::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserLiveFeatureClick::ArenaDtor(void* object) {
  UserLiveFeatureClick* _this = reinterpret_cast< UserLiveFeatureClick* >(object);
  (void)_this;
}
void UserLiveFeatureClick::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserLiveFeatureClick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserLiveFeatureClick& UserLiveFeatureClick::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserLiveFeatureClick_redis_2fuser_5flive_5ffeature_5fdata_2eproto.base);
  return *internal_default_instance();
}


void UserLiveFeatureClick::Clear() {
// @@protoc_insertion_point(message_clear_start:RSP_UserLiveFeatureData.UserLiveFeatureClick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  click_item_.Clear();
  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserLiveFeatureClick::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, .RSP_UserLiveFeatureData.IDTimeList> click_item = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&click_item_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserLiveFeatureClick::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RSP_UserLiveFeatureData.UserLiveFeatureClick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // map<int32, .RSP_UserLiveFeatureData.IDTimeList> click_item = 2;
  if (!this->_internal_click_item().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_click_item().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_click_item().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList >::const_iterator
          it = this->_internal_click_item().begin();
          it != this->_internal_click_item().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = UserLiveFeatureClick_ClickItemEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList >::const_iterator
          it = this->_internal_click_item().begin();
          it != this->_internal_click_item().end(); ++it) {
        target = UserLiveFeatureClick_ClickItemEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RSP_UserLiveFeatureData.UserLiveFeatureClick)
  return target;
}

size_t UserLiveFeatureClick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RSP_UserLiveFeatureData.UserLiveFeatureClick)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .RSP_UserLiveFeatureData.IDTimeList> click_item = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_click_item_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList >::const_iterator
      it = this->_internal_click_item().begin();
      it != this->_internal_click_item().end(); ++it) {
    total_size += UserLiveFeatureClick_ClickItemEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserLiveFeatureClick::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RSP_UserLiveFeatureData.UserLiveFeatureClick)
  GOOGLE_DCHECK_NE(&from, this);
  const UserLiveFeatureClick* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserLiveFeatureClick>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RSP_UserLiveFeatureData.UserLiveFeatureClick)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RSP_UserLiveFeatureData.UserLiveFeatureClick)
    MergeFrom(*source);
  }
}

void UserLiveFeatureClick::MergeFrom(const UserLiveFeatureClick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RSP_UserLiveFeatureData.UserLiveFeatureClick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  click_item_.MergeFrom(from.click_item_);
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void UserLiveFeatureClick::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RSP_UserLiveFeatureData.UserLiveFeatureClick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLiveFeatureClick::CopyFrom(const UserLiveFeatureClick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RSP_UserLiveFeatureData.UserLiveFeatureClick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLiveFeatureClick::IsInitialized() const {
  return true;
}

void UserLiveFeatureClick::InternalSwap(UserLiveFeatureClick* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  click_item_.Swap(&other->click_item_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserLiveFeatureClick::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

UserLiveFeatureSearch_SearchWordsEntry_DoNotUse::UserLiveFeatureSearch_SearchWordsEntry_DoNotUse() {}
UserLiveFeatureSearch_SearchWordsEntry_DoNotUse::UserLiveFeatureSearch_SearchWordsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void UserLiveFeatureSearch_SearchWordsEntry_DoNotUse::MergeFrom(const UserLiveFeatureSearch_SearchWordsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata UserLiveFeatureSearch_SearchWordsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void UserLiveFeatureSearch_SearchWordsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class UserLiveFeatureSearch::_Internal {
 public:
};

UserLiveFeatureSearch::UserLiveFeatureSearch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  search_words_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RSP_UserLiveFeatureData.UserLiveFeatureSearch)
}
UserLiveFeatureSearch::UserLiveFeatureSearch(const UserLiveFeatureSearch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  search_words_.MergeFrom(from.search_words_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:RSP_UserLiveFeatureData.UserLiveFeatureSearch)
}

void UserLiveFeatureSearch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserLiveFeatureSearch_redis_2fuser_5flive_5ffeature_5fdata_2eproto.base);
  timestamp_ = PROTOBUF_LONGLONG(0);
}

UserLiveFeatureSearch::~UserLiveFeatureSearch() {
  // @@protoc_insertion_point(destructor:RSP_UserLiveFeatureData.UserLiveFeatureSearch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserLiveFeatureSearch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserLiveFeatureSearch::ArenaDtor(void* object) {
  UserLiveFeatureSearch* _this = reinterpret_cast< UserLiveFeatureSearch* >(object);
  (void)_this;
}
void UserLiveFeatureSearch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserLiveFeatureSearch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserLiveFeatureSearch& UserLiveFeatureSearch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserLiveFeatureSearch_redis_2fuser_5flive_5ffeature_5fdata_2eproto.base);
  return *internal_default_instance();
}


void UserLiveFeatureSearch::Clear() {
// @@protoc_insertion_point(message_clear_start:RSP_UserLiveFeatureData.UserLiveFeatureSearch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  search_words_.Clear();
  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserLiveFeatureSearch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, .RSP_UserLiveFeatureData.IDTimeList> search_words = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&search_words_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserLiveFeatureSearch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RSP_UserLiveFeatureData.UserLiveFeatureSearch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // map<int32, .RSP_UserLiveFeatureData.IDTimeList> search_words = 2;
  if (!this->_internal_search_words().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_search_words().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_search_words().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList >::const_iterator
          it = this->_internal_search_words().begin();
          it != this->_internal_search_words().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = UserLiveFeatureSearch_SearchWordsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList >::const_iterator
          it = this->_internal_search_words().begin();
          it != this->_internal_search_words().end(); ++it) {
        target = UserLiveFeatureSearch_SearchWordsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RSP_UserLiveFeatureData.UserLiveFeatureSearch)
  return target;
}

size_t UserLiveFeatureSearch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RSP_UserLiveFeatureData.UserLiveFeatureSearch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .RSP_UserLiveFeatureData.IDTimeList> search_words = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_search_words_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList >::const_iterator
      it = this->_internal_search_words().begin();
      it != this->_internal_search_words().end(); ++it) {
    total_size += UserLiveFeatureSearch_SearchWordsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserLiveFeatureSearch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RSP_UserLiveFeatureData.UserLiveFeatureSearch)
  GOOGLE_DCHECK_NE(&from, this);
  const UserLiveFeatureSearch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserLiveFeatureSearch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RSP_UserLiveFeatureData.UserLiveFeatureSearch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RSP_UserLiveFeatureData.UserLiveFeatureSearch)
    MergeFrom(*source);
  }
}

void UserLiveFeatureSearch::MergeFrom(const UserLiveFeatureSearch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RSP_UserLiveFeatureData.UserLiveFeatureSearch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  search_words_.MergeFrom(from.search_words_);
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void UserLiveFeatureSearch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RSP_UserLiveFeatureData.UserLiveFeatureSearch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLiveFeatureSearch::CopyFrom(const UserLiveFeatureSearch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RSP_UserLiveFeatureData.UserLiveFeatureSearch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLiveFeatureSearch::IsInitialized() const {
  return true;
}

void UserLiveFeatureSearch::InternalSwap(UserLiveFeatureSearch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  search_words_.Swap(&other->search_words_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserLiveFeatureSearch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

UserLiveFeatureDownload_DownloadItemEntry_DoNotUse::UserLiveFeatureDownload_DownloadItemEntry_DoNotUse() {}
UserLiveFeatureDownload_DownloadItemEntry_DoNotUse::UserLiveFeatureDownload_DownloadItemEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void UserLiveFeatureDownload_DownloadItemEntry_DoNotUse::MergeFrom(const UserLiveFeatureDownload_DownloadItemEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata UserLiveFeatureDownload_DownloadItemEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void UserLiveFeatureDownload_DownloadItemEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class UserLiveFeatureDownload::_Internal {
 public:
};

UserLiveFeatureDownload::UserLiveFeatureDownload(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  download_item_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RSP_UserLiveFeatureData.UserLiveFeatureDownload)
}
UserLiveFeatureDownload::UserLiveFeatureDownload(const UserLiveFeatureDownload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  download_item_.MergeFrom(from.download_item_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:RSP_UserLiveFeatureData.UserLiveFeatureDownload)
}

void UserLiveFeatureDownload::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserLiveFeatureDownload_redis_2fuser_5flive_5ffeature_5fdata_2eproto.base);
  timestamp_ = PROTOBUF_LONGLONG(0);
}

UserLiveFeatureDownload::~UserLiveFeatureDownload() {
  // @@protoc_insertion_point(destructor:RSP_UserLiveFeatureData.UserLiveFeatureDownload)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserLiveFeatureDownload::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserLiveFeatureDownload::ArenaDtor(void* object) {
  UserLiveFeatureDownload* _this = reinterpret_cast< UserLiveFeatureDownload* >(object);
  (void)_this;
}
void UserLiveFeatureDownload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserLiveFeatureDownload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserLiveFeatureDownload& UserLiveFeatureDownload::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserLiveFeatureDownload_redis_2fuser_5flive_5ffeature_5fdata_2eproto.base);
  return *internal_default_instance();
}


void UserLiveFeatureDownload::Clear() {
// @@protoc_insertion_point(message_clear_start:RSP_UserLiveFeatureData.UserLiveFeatureDownload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  download_item_.Clear();
  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserLiveFeatureDownload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, .RSP_UserLiveFeatureData.IDTimeList> download_item = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&download_item_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserLiveFeatureDownload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RSP_UserLiveFeatureData.UserLiveFeatureDownload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // map<int32, .RSP_UserLiveFeatureData.IDTimeList> download_item = 2;
  if (!this->_internal_download_item().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_download_item().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_download_item().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList >::const_iterator
          it = this->_internal_download_item().begin();
          it != this->_internal_download_item().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = UserLiveFeatureDownload_DownloadItemEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList >::const_iterator
          it = this->_internal_download_item().begin();
          it != this->_internal_download_item().end(); ++it) {
        target = UserLiveFeatureDownload_DownloadItemEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RSP_UserLiveFeatureData.UserLiveFeatureDownload)
  return target;
}

size_t UserLiveFeatureDownload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RSP_UserLiveFeatureData.UserLiveFeatureDownload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .RSP_UserLiveFeatureData.IDTimeList> download_item = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_download_item_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList >::const_iterator
      it = this->_internal_download_item().begin();
      it != this->_internal_download_item().end(); ++it) {
    total_size += UserLiveFeatureDownload_DownloadItemEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserLiveFeatureDownload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RSP_UserLiveFeatureData.UserLiveFeatureDownload)
  GOOGLE_DCHECK_NE(&from, this);
  const UserLiveFeatureDownload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserLiveFeatureDownload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RSP_UserLiveFeatureData.UserLiveFeatureDownload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RSP_UserLiveFeatureData.UserLiveFeatureDownload)
    MergeFrom(*source);
  }
}

void UserLiveFeatureDownload::MergeFrom(const UserLiveFeatureDownload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RSP_UserLiveFeatureData.UserLiveFeatureDownload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  download_item_.MergeFrom(from.download_item_);
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void UserLiveFeatureDownload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RSP_UserLiveFeatureData.UserLiveFeatureDownload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLiveFeatureDownload::CopyFrom(const UserLiveFeatureDownload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RSP_UserLiveFeatureData.UserLiveFeatureDownload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLiveFeatureDownload::IsInitialized() const {
  return true;
}

void UserLiveFeatureDownload::InternalSwap(UserLiveFeatureDownload* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  download_item_.Swap(&other->download_item_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserLiveFeatureDownload::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace RSP_UserLiveFeatureData
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RSP_UserLiveFeatureData::UserLiveFeatureClean* Arena::CreateMaybeMessage< ::RSP_UserLiveFeatureData::UserLiveFeatureClean >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RSP_UserLiveFeatureData::UserLiveFeatureClean >(arena);
}
template<> PROTOBUF_NOINLINE ::RSP_UserLiveFeatureData::IDWeight* Arena::CreateMaybeMessage< ::RSP_UserLiveFeatureData::IDWeight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RSP_UserLiveFeatureData::IDWeight >(arena);
}
template<> PROTOBUF_NOINLINE ::RSP_UserLiveFeatureData::IDWeightList* Arena::CreateMaybeMessage< ::RSP_UserLiveFeatureData::IDWeightList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RSP_UserLiveFeatureData::IDWeightList >(arena);
}
template<> PROTOBUF_NOINLINE ::RSP_UserLiveFeatureData::IDTime* Arena::CreateMaybeMessage< ::RSP_UserLiveFeatureData::IDTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RSP_UserLiveFeatureData::IDTime >(arena);
}
template<> PROTOBUF_NOINLINE ::RSP_UserLiveFeatureData::IDTimeList* Arena::CreateMaybeMessage< ::RSP_UserLiveFeatureData::IDTimeList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RSP_UserLiveFeatureData::IDTimeList >(arena);
}
template<> PROTOBUF_NOINLINE ::RSP_UserLiveFeatureData::UserLiveFeatureClick_ClickItemEntry_DoNotUse* Arena::CreateMaybeMessage< ::RSP_UserLiveFeatureData::UserLiveFeatureClick_ClickItemEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RSP_UserLiveFeatureData::UserLiveFeatureClick_ClickItemEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::RSP_UserLiveFeatureData::UserLiveFeatureClick* Arena::CreateMaybeMessage< ::RSP_UserLiveFeatureData::UserLiveFeatureClick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RSP_UserLiveFeatureData::UserLiveFeatureClick >(arena);
}
template<> PROTOBUF_NOINLINE ::RSP_UserLiveFeatureData::UserLiveFeatureSearch_SearchWordsEntry_DoNotUse* Arena::CreateMaybeMessage< ::RSP_UserLiveFeatureData::UserLiveFeatureSearch_SearchWordsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RSP_UserLiveFeatureData::UserLiveFeatureSearch_SearchWordsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::RSP_UserLiveFeatureData::UserLiveFeatureSearch* Arena::CreateMaybeMessage< ::RSP_UserLiveFeatureData::UserLiveFeatureSearch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RSP_UserLiveFeatureData::UserLiveFeatureSearch >(arena);
}
template<> PROTOBUF_NOINLINE ::RSP_UserLiveFeatureData::UserLiveFeatureDownload_DownloadItemEntry_DoNotUse* Arena::CreateMaybeMessage< ::RSP_UserLiveFeatureData::UserLiveFeatureDownload_DownloadItemEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RSP_UserLiveFeatureData::UserLiveFeatureDownload_DownloadItemEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::RSP_UserLiveFeatureData::UserLiveFeatureDownload* Arena::CreateMaybeMessage< ::RSP_UserLiveFeatureData::UserLiveFeatureDownload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RSP_UserLiveFeatureData::UserLiveFeatureDownload >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
