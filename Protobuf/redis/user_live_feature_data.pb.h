// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: redis/user_live_feature_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_redis_2fuser_5flive_5ffeature_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_redis_2fuser_5flive_5ffeature_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_redis_2fuser_5flive_5ffeature_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_redis_2fuser_5flive_5ffeature_5fdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_redis_2fuser_5flive_5ffeature_5fdata_2eproto;
namespace RSP_UserLiveFeatureData {
class IDTime;
class IDTimeDefaultTypeInternal;
extern IDTimeDefaultTypeInternal _IDTime_default_instance_;
class IDTimeList;
class IDTimeListDefaultTypeInternal;
extern IDTimeListDefaultTypeInternal _IDTimeList_default_instance_;
class IDWeight;
class IDWeightDefaultTypeInternal;
extern IDWeightDefaultTypeInternal _IDWeight_default_instance_;
class IDWeightList;
class IDWeightListDefaultTypeInternal;
extern IDWeightListDefaultTypeInternal _IDWeightList_default_instance_;
class UserLiveFeatureClean;
class UserLiveFeatureCleanDefaultTypeInternal;
extern UserLiveFeatureCleanDefaultTypeInternal _UserLiveFeatureClean_default_instance_;
class UserLiveFeatureClick;
class UserLiveFeatureClickDefaultTypeInternal;
extern UserLiveFeatureClickDefaultTypeInternal _UserLiveFeatureClick_default_instance_;
class UserLiveFeatureClick_ClickItemEntry_DoNotUse;
class UserLiveFeatureClick_ClickItemEntry_DoNotUseDefaultTypeInternal;
extern UserLiveFeatureClick_ClickItemEntry_DoNotUseDefaultTypeInternal _UserLiveFeatureClick_ClickItemEntry_DoNotUse_default_instance_;
class UserLiveFeatureDownload;
class UserLiveFeatureDownloadDefaultTypeInternal;
extern UserLiveFeatureDownloadDefaultTypeInternal _UserLiveFeatureDownload_default_instance_;
class UserLiveFeatureDownload_DownloadItemEntry_DoNotUse;
class UserLiveFeatureDownload_DownloadItemEntry_DoNotUseDefaultTypeInternal;
extern UserLiveFeatureDownload_DownloadItemEntry_DoNotUseDefaultTypeInternal _UserLiveFeatureDownload_DownloadItemEntry_DoNotUse_default_instance_;
class UserLiveFeatureSearch;
class UserLiveFeatureSearchDefaultTypeInternal;
extern UserLiveFeatureSearchDefaultTypeInternal _UserLiveFeatureSearch_default_instance_;
class UserLiveFeatureSearch_SearchWordsEntry_DoNotUse;
class UserLiveFeatureSearch_SearchWordsEntry_DoNotUseDefaultTypeInternal;
extern UserLiveFeatureSearch_SearchWordsEntry_DoNotUseDefaultTypeInternal _UserLiveFeatureSearch_SearchWordsEntry_DoNotUse_default_instance_;
}  // namespace RSP_UserLiveFeatureData
PROTOBUF_NAMESPACE_OPEN
template<> ::RSP_UserLiveFeatureData::IDTime* Arena::CreateMaybeMessage<::RSP_UserLiveFeatureData::IDTime>(Arena*);
template<> ::RSP_UserLiveFeatureData::IDTimeList* Arena::CreateMaybeMessage<::RSP_UserLiveFeatureData::IDTimeList>(Arena*);
template<> ::RSP_UserLiveFeatureData::IDWeight* Arena::CreateMaybeMessage<::RSP_UserLiveFeatureData::IDWeight>(Arena*);
template<> ::RSP_UserLiveFeatureData::IDWeightList* Arena::CreateMaybeMessage<::RSP_UserLiveFeatureData::IDWeightList>(Arena*);
template<> ::RSP_UserLiveFeatureData::UserLiveFeatureClean* Arena::CreateMaybeMessage<::RSP_UserLiveFeatureData::UserLiveFeatureClean>(Arena*);
template<> ::RSP_UserLiveFeatureData::UserLiveFeatureClick* Arena::CreateMaybeMessage<::RSP_UserLiveFeatureData::UserLiveFeatureClick>(Arena*);
template<> ::RSP_UserLiveFeatureData::UserLiveFeatureClick_ClickItemEntry_DoNotUse* Arena::CreateMaybeMessage<::RSP_UserLiveFeatureData::UserLiveFeatureClick_ClickItemEntry_DoNotUse>(Arena*);
template<> ::RSP_UserLiveFeatureData::UserLiveFeatureDownload* Arena::CreateMaybeMessage<::RSP_UserLiveFeatureData::UserLiveFeatureDownload>(Arena*);
template<> ::RSP_UserLiveFeatureData::UserLiveFeatureDownload_DownloadItemEntry_DoNotUse* Arena::CreateMaybeMessage<::RSP_UserLiveFeatureData::UserLiveFeatureDownload_DownloadItemEntry_DoNotUse>(Arena*);
template<> ::RSP_UserLiveFeatureData::UserLiveFeatureSearch* Arena::CreateMaybeMessage<::RSP_UserLiveFeatureData::UserLiveFeatureSearch>(Arena*);
template<> ::RSP_UserLiveFeatureData::UserLiveFeatureSearch_SearchWordsEntry_DoNotUse* Arena::CreateMaybeMessage<::RSP_UserLiveFeatureData::UserLiveFeatureSearch_SearchWordsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace RSP_UserLiveFeatureData {

// ===================================================================

class UserLiveFeatureClean PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RSP_UserLiveFeatureData.UserLiveFeatureClean) */ {
 public:
  inline UserLiveFeatureClean() : UserLiveFeatureClean(nullptr) {}
  virtual ~UserLiveFeatureClean();

  UserLiveFeatureClean(const UserLiveFeatureClean& from);
  UserLiveFeatureClean(UserLiveFeatureClean&& from) noexcept
    : UserLiveFeatureClean() {
    *this = ::std::move(from);
  }

  inline UserLiveFeatureClean& operator=(const UserLiveFeatureClean& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLiveFeatureClean& operator=(UserLiveFeatureClean&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserLiveFeatureClean& default_instance();

  static inline const UserLiveFeatureClean* internal_default_instance() {
    return reinterpret_cast<const UserLiveFeatureClean*>(
               &_UserLiveFeatureClean_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserLiveFeatureClean& a, UserLiveFeatureClean& b) {
    a.Swap(&b);
  }
  inline void Swap(UserLiveFeatureClean* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserLiveFeatureClean* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserLiveFeatureClean* New() const final {
    return CreateMaybeMessage<UserLiveFeatureClean>(nullptr);
  }

  UserLiveFeatureClean* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserLiveFeatureClean>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserLiveFeatureClean& from);
  void MergeFrom(const UserLiveFeatureClean& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLiveFeatureClean* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RSP_UserLiveFeatureData.UserLiveFeatureClean";
  }
  protected:
  explicit UserLiveFeatureClean(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_redis_2fuser_5flive_5ffeature_5fdata_2eproto);
    return ::descriptor_table_redis_2fuser_5flive_5ffeature_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
  };
  // int64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:RSP_UserLiveFeatureData.UserLiveFeatureClean)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_redis_2fuser_5flive_5ffeature_5fdata_2eproto;
};
// -------------------------------------------------------------------

class IDWeight PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RSP_UserLiveFeatureData.IDWeight) */ {
 public:
  inline IDWeight() : IDWeight(nullptr) {}
  virtual ~IDWeight();

  IDWeight(const IDWeight& from);
  IDWeight(IDWeight&& from) noexcept
    : IDWeight() {
    *this = ::std::move(from);
  }

  inline IDWeight& operator=(const IDWeight& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDWeight& operator=(IDWeight&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDWeight& default_instance();

  static inline const IDWeight* internal_default_instance() {
    return reinterpret_cast<const IDWeight*>(
               &_IDWeight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IDWeight& a, IDWeight& b) {
    a.Swap(&b);
  }
  inline void Swap(IDWeight* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDWeight* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDWeight* New() const final {
    return CreateMaybeMessage<IDWeight>(nullptr);
  }

  IDWeight* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDWeight>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDWeight& from);
  void MergeFrom(const IDWeight& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDWeight* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RSP_UserLiveFeatureData.IDWeight";
  }
  protected:
  explicit IDWeight(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_redis_2fuser_5flive_5ffeature_5fdata_2eproto);
    return ::descriptor_table_redis_2fuser_5flive_5ffeature_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kWeightFieldNumber = 2,
  };
  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float weight = 2;
  void clear_weight();
  float weight() const;
  void set_weight(float value);
  private:
  float _internal_weight() const;
  void _internal_set_weight(float value);
  public:

  // @@protoc_insertion_point(class_scope:RSP_UserLiveFeatureData.IDWeight)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  float weight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_redis_2fuser_5flive_5ffeature_5fdata_2eproto;
};
// -------------------------------------------------------------------

class IDWeightList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RSP_UserLiveFeatureData.IDWeightList) */ {
 public:
  inline IDWeightList() : IDWeightList(nullptr) {}
  virtual ~IDWeightList();

  IDWeightList(const IDWeightList& from);
  IDWeightList(IDWeightList&& from) noexcept
    : IDWeightList() {
    *this = ::std::move(from);
  }

  inline IDWeightList& operator=(const IDWeightList& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDWeightList& operator=(IDWeightList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDWeightList& default_instance();

  static inline const IDWeightList* internal_default_instance() {
    return reinterpret_cast<const IDWeightList*>(
               &_IDWeightList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IDWeightList& a, IDWeightList& b) {
    a.Swap(&b);
  }
  inline void Swap(IDWeightList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDWeightList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDWeightList* New() const final {
    return CreateMaybeMessage<IDWeightList>(nullptr);
  }

  IDWeightList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDWeightList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDWeightList& from);
  void MergeFrom(const IDWeightList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDWeightList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RSP_UserLiveFeatureData.IDWeightList";
  }
  protected:
  explicit IDWeightList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_redis_2fuser_5flive_5ffeature_5fdata_2eproto);
    return ::descriptor_table_redis_2fuser_5flive_5ffeature_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdListFieldNumber = 1,
  };
  // repeated .RSP_UserLiveFeatureData.IDWeight id_list = 1;
  int id_list_size() const;
  private:
  int _internal_id_list_size() const;
  public:
  void clear_id_list();
  ::RSP_UserLiveFeatureData::IDWeight* mutable_id_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RSP_UserLiveFeatureData::IDWeight >*
      mutable_id_list();
  private:
  const ::RSP_UserLiveFeatureData::IDWeight& _internal_id_list(int index) const;
  ::RSP_UserLiveFeatureData::IDWeight* _internal_add_id_list();
  public:
  const ::RSP_UserLiveFeatureData::IDWeight& id_list(int index) const;
  ::RSP_UserLiveFeatureData::IDWeight* add_id_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RSP_UserLiveFeatureData::IDWeight >&
      id_list() const;

  // @@protoc_insertion_point(class_scope:RSP_UserLiveFeatureData.IDWeightList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RSP_UserLiveFeatureData::IDWeight > id_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_redis_2fuser_5flive_5ffeature_5fdata_2eproto;
};
// -------------------------------------------------------------------

class IDTime PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RSP_UserLiveFeatureData.IDTime) */ {
 public:
  inline IDTime() : IDTime(nullptr) {}
  virtual ~IDTime();

  IDTime(const IDTime& from);
  IDTime(IDTime&& from) noexcept
    : IDTime() {
    *this = ::std::move(from);
  }

  inline IDTime& operator=(const IDTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDTime& operator=(IDTime&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDTime& default_instance();

  static inline const IDTime* internal_default_instance() {
    return reinterpret_cast<const IDTime*>(
               &_IDTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(IDTime& a, IDTime& b) {
    a.Swap(&b);
  }
  inline void Swap(IDTime* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDTime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDTime* New() const final {
    return CreateMaybeMessage<IDTime>(nullptr);
  }

  IDTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDTime>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDTime& from);
  void MergeFrom(const IDTime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDTime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RSP_UserLiveFeatureData.IDTime";
  }
  protected:
  explicit IDTime(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_redis_2fuser_5flive_5ffeature_5fdata_2eproto);
    return ::descriptor_table_redis_2fuser_5flive_5ffeature_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:RSP_UserLiveFeatureData.IDTime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_redis_2fuser_5flive_5ffeature_5fdata_2eproto;
};
// -------------------------------------------------------------------

class IDTimeList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RSP_UserLiveFeatureData.IDTimeList) */ {
 public:
  inline IDTimeList() : IDTimeList(nullptr) {}
  virtual ~IDTimeList();

  IDTimeList(const IDTimeList& from);
  IDTimeList(IDTimeList&& from) noexcept
    : IDTimeList() {
    *this = ::std::move(from);
  }

  inline IDTimeList& operator=(const IDTimeList& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDTimeList& operator=(IDTimeList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDTimeList& default_instance();

  static inline const IDTimeList* internal_default_instance() {
    return reinterpret_cast<const IDTimeList*>(
               &_IDTimeList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(IDTimeList& a, IDTimeList& b) {
    a.Swap(&b);
  }
  inline void Swap(IDTimeList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDTimeList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDTimeList* New() const final {
    return CreateMaybeMessage<IDTimeList>(nullptr);
  }

  IDTimeList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDTimeList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDTimeList& from);
  void MergeFrom(const IDTimeList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDTimeList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RSP_UserLiveFeatureData.IDTimeList";
  }
  protected:
  explicit IDTimeList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_redis_2fuser_5flive_5ffeature_5fdata_2eproto);
    return ::descriptor_table_redis_2fuser_5flive_5ffeature_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdListFieldNumber = 1,
  };
  // repeated .RSP_UserLiveFeatureData.IDTime id_list = 1;
  int id_list_size() const;
  private:
  int _internal_id_list_size() const;
  public:
  void clear_id_list();
  ::RSP_UserLiveFeatureData::IDTime* mutable_id_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RSP_UserLiveFeatureData::IDTime >*
      mutable_id_list();
  private:
  const ::RSP_UserLiveFeatureData::IDTime& _internal_id_list(int index) const;
  ::RSP_UserLiveFeatureData::IDTime* _internal_add_id_list();
  public:
  const ::RSP_UserLiveFeatureData::IDTime& id_list(int index) const;
  ::RSP_UserLiveFeatureData::IDTime* add_id_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RSP_UserLiveFeatureData::IDTime >&
      id_list() const;

  // @@protoc_insertion_point(class_scope:RSP_UserLiveFeatureData.IDTimeList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RSP_UserLiveFeatureData::IDTime > id_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_redis_2fuser_5flive_5ffeature_5fdata_2eproto;
};
// -------------------------------------------------------------------

class UserLiveFeatureClick_ClickItemEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UserLiveFeatureClick_ClickItemEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UserLiveFeatureClick_ClickItemEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  UserLiveFeatureClick_ClickItemEntry_DoNotUse();
  explicit UserLiveFeatureClick_ClickItemEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const UserLiveFeatureClick_ClickItemEntry_DoNotUse& other);
  static const UserLiveFeatureClick_ClickItemEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const UserLiveFeatureClick_ClickItemEntry_DoNotUse*>(&_UserLiveFeatureClick_ClickItemEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_redis_2fuser_5flive_5ffeature_5fdata_2eproto);
    return ::descriptor_table_redis_2fuser_5flive_5ffeature_5fdata_2eproto.file_level_metadata[5];
  }

  public:
};

// -------------------------------------------------------------------

class UserLiveFeatureClick PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RSP_UserLiveFeatureData.UserLiveFeatureClick) */ {
 public:
  inline UserLiveFeatureClick() : UserLiveFeatureClick(nullptr) {}
  virtual ~UserLiveFeatureClick();

  UserLiveFeatureClick(const UserLiveFeatureClick& from);
  UserLiveFeatureClick(UserLiveFeatureClick&& from) noexcept
    : UserLiveFeatureClick() {
    *this = ::std::move(from);
  }

  inline UserLiveFeatureClick& operator=(const UserLiveFeatureClick& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLiveFeatureClick& operator=(UserLiveFeatureClick&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserLiveFeatureClick& default_instance();

  static inline const UserLiveFeatureClick* internal_default_instance() {
    return reinterpret_cast<const UserLiveFeatureClick*>(
               &_UserLiveFeatureClick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UserLiveFeatureClick& a, UserLiveFeatureClick& b) {
    a.Swap(&b);
  }
  inline void Swap(UserLiveFeatureClick* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserLiveFeatureClick* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserLiveFeatureClick* New() const final {
    return CreateMaybeMessage<UserLiveFeatureClick>(nullptr);
  }

  UserLiveFeatureClick* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserLiveFeatureClick>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserLiveFeatureClick& from);
  void MergeFrom(const UserLiveFeatureClick& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLiveFeatureClick* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RSP_UserLiveFeatureData.UserLiveFeatureClick";
  }
  protected:
  explicit UserLiveFeatureClick(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_redis_2fuser_5flive_5ffeature_5fdata_2eproto);
    return ::descriptor_table_redis_2fuser_5flive_5ffeature_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kClickItemFieldNumber = 2,
    kTimestampFieldNumber = 1,
  };
  // map<int32, .RSP_UserLiveFeatureData.IDTimeList> click_item = 2;
  int click_item_size() const;
  private:
  int _internal_click_item_size() const;
  public:
  void clear_click_item();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList >&
      _internal_click_item() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList >*
      _internal_mutable_click_item();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList >&
      click_item() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList >*
      mutable_click_item();

  // int64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:RSP_UserLiveFeatureData.UserLiveFeatureClick)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      UserLiveFeatureClick_ClickItemEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> click_item_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_redis_2fuser_5flive_5ffeature_5fdata_2eproto;
};
// -------------------------------------------------------------------

class UserLiveFeatureSearch_SearchWordsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UserLiveFeatureSearch_SearchWordsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UserLiveFeatureSearch_SearchWordsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  UserLiveFeatureSearch_SearchWordsEntry_DoNotUse();
  explicit UserLiveFeatureSearch_SearchWordsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const UserLiveFeatureSearch_SearchWordsEntry_DoNotUse& other);
  static const UserLiveFeatureSearch_SearchWordsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const UserLiveFeatureSearch_SearchWordsEntry_DoNotUse*>(&_UserLiveFeatureSearch_SearchWordsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_redis_2fuser_5flive_5ffeature_5fdata_2eproto);
    return ::descriptor_table_redis_2fuser_5flive_5ffeature_5fdata_2eproto.file_level_metadata[7];
  }

  public:
};

// -------------------------------------------------------------------

class UserLiveFeatureSearch PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RSP_UserLiveFeatureData.UserLiveFeatureSearch) */ {
 public:
  inline UserLiveFeatureSearch() : UserLiveFeatureSearch(nullptr) {}
  virtual ~UserLiveFeatureSearch();

  UserLiveFeatureSearch(const UserLiveFeatureSearch& from);
  UserLiveFeatureSearch(UserLiveFeatureSearch&& from) noexcept
    : UserLiveFeatureSearch() {
    *this = ::std::move(from);
  }

  inline UserLiveFeatureSearch& operator=(const UserLiveFeatureSearch& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLiveFeatureSearch& operator=(UserLiveFeatureSearch&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserLiveFeatureSearch& default_instance();

  static inline const UserLiveFeatureSearch* internal_default_instance() {
    return reinterpret_cast<const UserLiveFeatureSearch*>(
               &_UserLiveFeatureSearch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UserLiveFeatureSearch& a, UserLiveFeatureSearch& b) {
    a.Swap(&b);
  }
  inline void Swap(UserLiveFeatureSearch* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserLiveFeatureSearch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserLiveFeatureSearch* New() const final {
    return CreateMaybeMessage<UserLiveFeatureSearch>(nullptr);
  }

  UserLiveFeatureSearch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserLiveFeatureSearch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserLiveFeatureSearch& from);
  void MergeFrom(const UserLiveFeatureSearch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLiveFeatureSearch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RSP_UserLiveFeatureData.UserLiveFeatureSearch";
  }
  protected:
  explicit UserLiveFeatureSearch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_redis_2fuser_5flive_5ffeature_5fdata_2eproto);
    return ::descriptor_table_redis_2fuser_5flive_5ffeature_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSearchWordsFieldNumber = 2,
    kTimestampFieldNumber = 1,
  };
  // map<int32, .RSP_UserLiveFeatureData.IDTimeList> search_words = 2;
  int search_words_size() const;
  private:
  int _internal_search_words_size() const;
  public:
  void clear_search_words();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList >&
      _internal_search_words() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList >*
      _internal_mutable_search_words();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList >&
      search_words() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList >*
      mutable_search_words();

  // int64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:RSP_UserLiveFeatureData.UserLiveFeatureSearch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      UserLiveFeatureSearch_SearchWordsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> search_words_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_redis_2fuser_5flive_5ffeature_5fdata_2eproto;
};
// -------------------------------------------------------------------

class UserLiveFeatureDownload_DownloadItemEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UserLiveFeatureDownload_DownloadItemEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UserLiveFeatureDownload_DownloadItemEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  UserLiveFeatureDownload_DownloadItemEntry_DoNotUse();
  explicit UserLiveFeatureDownload_DownloadItemEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const UserLiveFeatureDownload_DownloadItemEntry_DoNotUse& other);
  static const UserLiveFeatureDownload_DownloadItemEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const UserLiveFeatureDownload_DownloadItemEntry_DoNotUse*>(&_UserLiveFeatureDownload_DownloadItemEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_redis_2fuser_5flive_5ffeature_5fdata_2eproto);
    return ::descriptor_table_redis_2fuser_5flive_5ffeature_5fdata_2eproto.file_level_metadata[9];
  }

  public:
};

// -------------------------------------------------------------------

class UserLiveFeatureDownload PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RSP_UserLiveFeatureData.UserLiveFeatureDownload) */ {
 public:
  inline UserLiveFeatureDownload() : UserLiveFeatureDownload(nullptr) {}
  virtual ~UserLiveFeatureDownload();

  UserLiveFeatureDownload(const UserLiveFeatureDownload& from);
  UserLiveFeatureDownload(UserLiveFeatureDownload&& from) noexcept
    : UserLiveFeatureDownload() {
    *this = ::std::move(from);
  }

  inline UserLiveFeatureDownload& operator=(const UserLiveFeatureDownload& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLiveFeatureDownload& operator=(UserLiveFeatureDownload&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserLiveFeatureDownload& default_instance();

  static inline const UserLiveFeatureDownload* internal_default_instance() {
    return reinterpret_cast<const UserLiveFeatureDownload*>(
               &_UserLiveFeatureDownload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(UserLiveFeatureDownload& a, UserLiveFeatureDownload& b) {
    a.Swap(&b);
  }
  inline void Swap(UserLiveFeatureDownload* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserLiveFeatureDownload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserLiveFeatureDownload* New() const final {
    return CreateMaybeMessage<UserLiveFeatureDownload>(nullptr);
  }

  UserLiveFeatureDownload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserLiveFeatureDownload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserLiveFeatureDownload& from);
  void MergeFrom(const UserLiveFeatureDownload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLiveFeatureDownload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RSP_UserLiveFeatureData.UserLiveFeatureDownload";
  }
  protected:
  explicit UserLiveFeatureDownload(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_redis_2fuser_5flive_5ffeature_5fdata_2eproto);
    return ::descriptor_table_redis_2fuser_5flive_5ffeature_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDownloadItemFieldNumber = 2,
    kTimestampFieldNumber = 1,
  };
  // map<int32, .RSP_UserLiveFeatureData.IDTimeList> download_item = 2;
  int download_item_size() const;
  private:
  int _internal_download_item_size() const;
  public:
  void clear_download_item();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList >&
      _internal_download_item() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList >*
      _internal_mutable_download_item();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList >&
      download_item() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList >*
      mutable_download_item();

  // int64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:RSP_UserLiveFeatureData.UserLiveFeatureDownload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      UserLiveFeatureDownload_DownloadItemEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> download_item_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_redis_2fuser_5flive_5ffeature_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserLiveFeatureClean

// int64 timestamp = 1;
inline void UserLiveFeatureClean::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserLiveFeatureClean::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserLiveFeatureClean::timestamp() const {
  // @@protoc_insertion_point(field_get:RSP_UserLiveFeatureData.UserLiveFeatureClean.timestamp)
  return _internal_timestamp();
}
inline void UserLiveFeatureClean::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void UserLiveFeatureClean::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:RSP_UserLiveFeatureData.UserLiveFeatureClean.timestamp)
}

// -------------------------------------------------------------------

// IDWeight

// int64 id = 1;
inline void IDWeight::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IDWeight::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IDWeight::id() const {
  // @@protoc_insertion_point(field_get:RSP_UserLiveFeatureData.IDWeight.id)
  return _internal_id();
}
inline void IDWeight::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void IDWeight::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:RSP_UserLiveFeatureData.IDWeight.id)
}

// float weight = 2;
inline void IDWeight::clear_weight() {
  weight_ = 0;
}
inline float IDWeight::_internal_weight() const {
  return weight_;
}
inline float IDWeight::weight() const {
  // @@protoc_insertion_point(field_get:RSP_UserLiveFeatureData.IDWeight.weight)
  return _internal_weight();
}
inline void IDWeight::_internal_set_weight(float value) {
  
  weight_ = value;
}
inline void IDWeight::set_weight(float value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:RSP_UserLiveFeatureData.IDWeight.weight)
}

// -------------------------------------------------------------------

// IDWeightList

// repeated .RSP_UserLiveFeatureData.IDWeight id_list = 1;
inline int IDWeightList::_internal_id_list_size() const {
  return id_list_.size();
}
inline int IDWeightList::id_list_size() const {
  return _internal_id_list_size();
}
inline void IDWeightList::clear_id_list() {
  id_list_.Clear();
}
inline ::RSP_UserLiveFeatureData::IDWeight* IDWeightList::mutable_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:RSP_UserLiveFeatureData.IDWeightList.id_list)
  return id_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RSP_UserLiveFeatureData::IDWeight >*
IDWeightList::mutable_id_list() {
  // @@protoc_insertion_point(field_mutable_list:RSP_UserLiveFeatureData.IDWeightList.id_list)
  return &id_list_;
}
inline const ::RSP_UserLiveFeatureData::IDWeight& IDWeightList::_internal_id_list(int index) const {
  return id_list_.Get(index);
}
inline const ::RSP_UserLiveFeatureData::IDWeight& IDWeightList::id_list(int index) const {
  // @@protoc_insertion_point(field_get:RSP_UserLiveFeatureData.IDWeightList.id_list)
  return _internal_id_list(index);
}
inline ::RSP_UserLiveFeatureData::IDWeight* IDWeightList::_internal_add_id_list() {
  return id_list_.Add();
}
inline ::RSP_UserLiveFeatureData::IDWeight* IDWeightList::add_id_list() {
  // @@protoc_insertion_point(field_add:RSP_UserLiveFeatureData.IDWeightList.id_list)
  return _internal_add_id_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RSP_UserLiveFeatureData::IDWeight >&
IDWeightList::id_list() const {
  // @@protoc_insertion_point(field_list:RSP_UserLiveFeatureData.IDWeightList.id_list)
  return id_list_;
}

// -------------------------------------------------------------------

// IDTime

// int64 id = 1;
inline void IDTime::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IDTime::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IDTime::id() const {
  // @@protoc_insertion_point(field_get:RSP_UserLiveFeatureData.IDTime.id)
  return _internal_id();
}
inline void IDTime::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void IDTime::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:RSP_UserLiveFeatureData.IDTime.id)
}

// int64 timestamp = 2;
inline void IDTime::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IDTime::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IDTime::timestamp() const {
  // @@protoc_insertion_point(field_get:RSP_UserLiveFeatureData.IDTime.timestamp)
  return _internal_timestamp();
}
inline void IDTime::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void IDTime::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:RSP_UserLiveFeatureData.IDTime.timestamp)
}

// -------------------------------------------------------------------

// IDTimeList

// repeated .RSP_UserLiveFeatureData.IDTime id_list = 1;
inline int IDTimeList::_internal_id_list_size() const {
  return id_list_.size();
}
inline int IDTimeList::id_list_size() const {
  return _internal_id_list_size();
}
inline void IDTimeList::clear_id_list() {
  id_list_.Clear();
}
inline ::RSP_UserLiveFeatureData::IDTime* IDTimeList::mutable_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:RSP_UserLiveFeatureData.IDTimeList.id_list)
  return id_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RSP_UserLiveFeatureData::IDTime >*
IDTimeList::mutable_id_list() {
  // @@protoc_insertion_point(field_mutable_list:RSP_UserLiveFeatureData.IDTimeList.id_list)
  return &id_list_;
}
inline const ::RSP_UserLiveFeatureData::IDTime& IDTimeList::_internal_id_list(int index) const {
  return id_list_.Get(index);
}
inline const ::RSP_UserLiveFeatureData::IDTime& IDTimeList::id_list(int index) const {
  // @@protoc_insertion_point(field_get:RSP_UserLiveFeatureData.IDTimeList.id_list)
  return _internal_id_list(index);
}
inline ::RSP_UserLiveFeatureData::IDTime* IDTimeList::_internal_add_id_list() {
  return id_list_.Add();
}
inline ::RSP_UserLiveFeatureData::IDTime* IDTimeList::add_id_list() {
  // @@protoc_insertion_point(field_add:RSP_UserLiveFeatureData.IDTimeList.id_list)
  return _internal_add_id_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RSP_UserLiveFeatureData::IDTime >&
IDTimeList::id_list() const {
  // @@protoc_insertion_point(field_list:RSP_UserLiveFeatureData.IDTimeList.id_list)
  return id_list_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// UserLiveFeatureClick

// int64 timestamp = 1;
inline void UserLiveFeatureClick::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserLiveFeatureClick::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserLiveFeatureClick::timestamp() const {
  // @@protoc_insertion_point(field_get:RSP_UserLiveFeatureData.UserLiveFeatureClick.timestamp)
  return _internal_timestamp();
}
inline void UserLiveFeatureClick::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void UserLiveFeatureClick::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:RSP_UserLiveFeatureData.UserLiveFeatureClick.timestamp)
}

// map<int32, .RSP_UserLiveFeatureData.IDTimeList> click_item = 2;
inline int UserLiveFeatureClick::_internal_click_item_size() const {
  return click_item_.size();
}
inline int UserLiveFeatureClick::click_item_size() const {
  return _internal_click_item_size();
}
inline void UserLiveFeatureClick::clear_click_item() {
  click_item_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList >&
UserLiveFeatureClick::_internal_click_item() const {
  return click_item_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList >&
UserLiveFeatureClick::click_item() const {
  // @@protoc_insertion_point(field_map:RSP_UserLiveFeatureData.UserLiveFeatureClick.click_item)
  return _internal_click_item();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList >*
UserLiveFeatureClick::_internal_mutable_click_item() {
  return click_item_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList >*
UserLiveFeatureClick::mutable_click_item() {
  // @@protoc_insertion_point(field_mutable_map:RSP_UserLiveFeatureData.UserLiveFeatureClick.click_item)
  return _internal_mutable_click_item();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// UserLiveFeatureSearch

// int64 timestamp = 1;
inline void UserLiveFeatureSearch::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserLiveFeatureSearch::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserLiveFeatureSearch::timestamp() const {
  // @@protoc_insertion_point(field_get:RSP_UserLiveFeatureData.UserLiveFeatureSearch.timestamp)
  return _internal_timestamp();
}
inline void UserLiveFeatureSearch::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void UserLiveFeatureSearch::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:RSP_UserLiveFeatureData.UserLiveFeatureSearch.timestamp)
}

// map<int32, .RSP_UserLiveFeatureData.IDTimeList> search_words = 2;
inline int UserLiveFeatureSearch::_internal_search_words_size() const {
  return search_words_.size();
}
inline int UserLiveFeatureSearch::search_words_size() const {
  return _internal_search_words_size();
}
inline void UserLiveFeatureSearch::clear_search_words() {
  search_words_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList >&
UserLiveFeatureSearch::_internal_search_words() const {
  return search_words_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList >&
UserLiveFeatureSearch::search_words() const {
  // @@protoc_insertion_point(field_map:RSP_UserLiveFeatureData.UserLiveFeatureSearch.search_words)
  return _internal_search_words();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList >*
UserLiveFeatureSearch::_internal_mutable_search_words() {
  return search_words_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList >*
UserLiveFeatureSearch::mutable_search_words() {
  // @@protoc_insertion_point(field_mutable_map:RSP_UserLiveFeatureData.UserLiveFeatureSearch.search_words)
  return _internal_mutable_search_words();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// UserLiveFeatureDownload

// int64 timestamp = 1;
inline void UserLiveFeatureDownload::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserLiveFeatureDownload::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserLiveFeatureDownload::timestamp() const {
  // @@protoc_insertion_point(field_get:RSP_UserLiveFeatureData.UserLiveFeatureDownload.timestamp)
  return _internal_timestamp();
}
inline void UserLiveFeatureDownload::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void UserLiveFeatureDownload::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:RSP_UserLiveFeatureData.UserLiveFeatureDownload.timestamp)
}

// map<int32, .RSP_UserLiveFeatureData.IDTimeList> download_item = 2;
inline int UserLiveFeatureDownload::_internal_download_item_size() const {
  return download_item_.size();
}
inline int UserLiveFeatureDownload::download_item_size() const {
  return _internal_download_item_size();
}
inline void UserLiveFeatureDownload::clear_download_item() {
  download_item_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList >&
UserLiveFeatureDownload::_internal_download_item() const {
  return download_item_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList >&
UserLiveFeatureDownload::download_item() const {
  // @@protoc_insertion_point(field_map:RSP_UserLiveFeatureData.UserLiveFeatureDownload.download_item)
  return _internal_download_item();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList >*
UserLiveFeatureDownload::_internal_mutable_download_item() {
  return download_item_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserLiveFeatureData::IDTimeList >*
UserLiveFeatureDownload::mutable_download_item() {
  // @@protoc_insertion_point(field_mutable_map:RSP_UserLiveFeatureData.UserLiveFeatureDownload.download_item)
  return _internal_mutable_download_item();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace RSP_UserLiveFeatureData

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_redis_2fuser_5flive_5ffeature_5fdata_2eproto
