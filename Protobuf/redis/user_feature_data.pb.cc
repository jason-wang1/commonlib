// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: redis/user_feature_data.proto

#include "redis/user_feature_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_redis_2fuser_5ffeature_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IDTime_redis_2fuser_5ffeature_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_redis_2fuser_5ffeature_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IDTimeList_redis_2fuser_5ffeature_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_redis_2fuser_5ffeature_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IDWeight_redis_2fuser_5ffeature_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_redis_2fuser_5ffeature_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IDWeightList_redis_2fuser_5ffeature_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_redis_2fuser_5ffeature_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserFeatureClick_ClickItemEntry_DoNotUse_redis_2fuser_5ffeature_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_redis_2fuser_5ffeature_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserFeatureDownload_DownloadItemEntry_DoNotUse_redis_2fuser_5ffeature_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_redis_2fuser_5ffeature_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserFeatureIndex_CfItemEntry_DoNotUse_redis_2fuser_5ffeature_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_redis_2fuser_5ffeature_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserFeatureSearch_SearchWordsEntry_DoNotUse_redis_2fuser_5ffeature_5fdata_2eproto;
namespace RSP_UserFeatureData {
class UserFeatureCleanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserFeatureClean> _instance;
} _UserFeatureClean_default_instance_;
class IDWeightDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IDWeight> _instance;
} _IDWeight_default_instance_;
class IDWeightListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IDWeightList> _instance;
} _IDWeightList_default_instance_;
class IDTimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IDTime> _instance;
} _IDTime_default_instance_;
class IDTimeListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IDTimeList> _instance;
} _IDTimeList_default_instance_;
class UserFeatureBasicDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserFeatureBasic> _instance;
} _UserFeatureBasic_default_instance_;
class UserFeatureClick_ClickItemEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserFeatureClick_ClickItemEntry_DoNotUse> _instance;
} _UserFeatureClick_ClickItemEntry_DoNotUse_default_instance_;
class UserFeatureClickDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserFeatureClick> _instance;
} _UserFeatureClick_default_instance_;
class UserFeatureSearch_SearchWordsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserFeatureSearch_SearchWordsEntry_DoNotUse> _instance;
} _UserFeatureSearch_SearchWordsEntry_DoNotUse_default_instance_;
class UserFeatureSearchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserFeatureSearch> _instance;
} _UserFeatureSearch_default_instance_;
class UserFeatureDownload_DownloadItemEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserFeatureDownload_DownloadItemEntry_DoNotUse> _instance;
} _UserFeatureDownload_DownloadItemEntry_DoNotUse_default_instance_;
class UserFeatureDownloadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserFeatureDownload> _instance;
} _UserFeatureDownload_default_instance_;
class UserFeatureIndex_CfItemEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserFeatureIndex_CfItemEntry_DoNotUse> _instance;
} _UserFeatureIndex_CfItemEntry_DoNotUse_default_instance_;
class UserFeatureIndexDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserFeatureIndex> _instance;
} _UserFeatureIndex_default_instance_;
}  // namespace RSP_UserFeatureData
static void InitDefaultsscc_info_IDTime_redis_2fuser_5ffeature_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RSP_UserFeatureData::_IDTime_default_instance_;
    new (ptr) ::RSP_UserFeatureData::IDTime();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IDTime_redis_2fuser_5ffeature_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IDTime_redis_2fuser_5ffeature_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_IDTimeList_redis_2fuser_5ffeature_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RSP_UserFeatureData::_IDTimeList_default_instance_;
    new (ptr) ::RSP_UserFeatureData::IDTimeList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IDTimeList_redis_2fuser_5ffeature_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IDTimeList_redis_2fuser_5ffeature_5fdata_2eproto}, {
      &scc_info_IDTime_redis_2fuser_5ffeature_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_IDWeight_redis_2fuser_5ffeature_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RSP_UserFeatureData::_IDWeight_default_instance_;
    new (ptr) ::RSP_UserFeatureData::IDWeight();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IDWeight_redis_2fuser_5ffeature_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IDWeight_redis_2fuser_5ffeature_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_IDWeightList_redis_2fuser_5ffeature_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RSP_UserFeatureData::_IDWeightList_default_instance_;
    new (ptr) ::RSP_UserFeatureData::IDWeightList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IDWeightList_redis_2fuser_5ffeature_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IDWeightList_redis_2fuser_5ffeature_5fdata_2eproto}, {
      &scc_info_IDWeight_redis_2fuser_5ffeature_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_UserFeatureBasic_redis_2fuser_5ffeature_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RSP_UserFeatureData::_UserFeatureBasic_default_instance_;
    new (ptr) ::RSP_UserFeatureData::UserFeatureBasic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserFeatureBasic_redis_2fuser_5ffeature_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserFeatureBasic_redis_2fuser_5ffeature_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_UserFeatureClean_redis_2fuser_5ffeature_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RSP_UserFeatureData::_UserFeatureClean_default_instance_;
    new (ptr) ::RSP_UserFeatureData::UserFeatureClean();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserFeatureClean_redis_2fuser_5ffeature_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserFeatureClean_redis_2fuser_5ffeature_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_UserFeatureClick_redis_2fuser_5ffeature_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RSP_UserFeatureData::_UserFeatureClick_default_instance_;
    new (ptr) ::RSP_UserFeatureData::UserFeatureClick();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserFeatureClick_redis_2fuser_5ffeature_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserFeatureClick_redis_2fuser_5ffeature_5fdata_2eproto}, {
      &scc_info_UserFeatureClick_ClickItemEntry_DoNotUse_redis_2fuser_5ffeature_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_UserFeatureClick_ClickItemEntry_DoNotUse_redis_2fuser_5ffeature_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RSP_UserFeatureData::_UserFeatureClick_ClickItemEntry_DoNotUse_default_instance_;
    new (ptr) ::RSP_UserFeatureData::UserFeatureClick_ClickItemEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserFeatureClick_ClickItemEntry_DoNotUse_redis_2fuser_5ffeature_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserFeatureClick_ClickItemEntry_DoNotUse_redis_2fuser_5ffeature_5fdata_2eproto}, {
      &scc_info_IDTimeList_redis_2fuser_5ffeature_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_UserFeatureDownload_redis_2fuser_5ffeature_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RSP_UserFeatureData::_UserFeatureDownload_default_instance_;
    new (ptr) ::RSP_UserFeatureData::UserFeatureDownload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserFeatureDownload_redis_2fuser_5ffeature_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserFeatureDownload_redis_2fuser_5ffeature_5fdata_2eproto}, {
      &scc_info_UserFeatureDownload_DownloadItemEntry_DoNotUse_redis_2fuser_5ffeature_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_UserFeatureDownload_DownloadItemEntry_DoNotUse_redis_2fuser_5ffeature_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RSP_UserFeatureData::_UserFeatureDownload_DownloadItemEntry_DoNotUse_default_instance_;
    new (ptr) ::RSP_UserFeatureData::UserFeatureDownload_DownloadItemEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserFeatureDownload_DownloadItemEntry_DoNotUse_redis_2fuser_5ffeature_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserFeatureDownload_DownloadItemEntry_DoNotUse_redis_2fuser_5ffeature_5fdata_2eproto}, {
      &scc_info_IDTimeList_redis_2fuser_5ffeature_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_UserFeatureIndex_redis_2fuser_5ffeature_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RSP_UserFeatureData::_UserFeatureIndex_default_instance_;
    new (ptr) ::RSP_UserFeatureData::UserFeatureIndex();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserFeatureIndex_redis_2fuser_5ffeature_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserFeatureIndex_redis_2fuser_5ffeature_5fdata_2eproto}, {
      &scc_info_UserFeatureIndex_CfItemEntry_DoNotUse_redis_2fuser_5ffeature_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_UserFeatureIndex_CfItemEntry_DoNotUse_redis_2fuser_5ffeature_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RSP_UserFeatureData::_UserFeatureIndex_CfItemEntry_DoNotUse_default_instance_;
    new (ptr) ::RSP_UserFeatureData::UserFeatureIndex_CfItemEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserFeatureIndex_CfItemEntry_DoNotUse_redis_2fuser_5ffeature_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserFeatureIndex_CfItemEntry_DoNotUse_redis_2fuser_5ffeature_5fdata_2eproto}, {
      &scc_info_IDWeightList_redis_2fuser_5ffeature_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_UserFeatureSearch_redis_2fuser_5ffeature_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RSP_UserFeatureData::_UserFeatureSearch_default_instance_;
    new (ptr) ::RSP_UserFeatureData::UserFeatureSearch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserFeatureSearch_redis_2fuser_5ffeature_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserFeatureSearch_redis_2fuser_5ffeature_5fdata_2eproto}, {
      &scc_info_UserFeatureSearch_SearchWordsEntry_DoNotUse_redis_2fuser_5ffeature_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_UserFeatureSearch_SearchWordsEntry_DoNotUse_redis_2fuser_5ffeature_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RSP_UserFeatureData::_UserFeatureSearch_SearchWordsEntry_DoNotUse_default_instance_;
    new (ptr) ::RSP_UserFeatureData::UserFeatureSearch_SearchWordsEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserFeatureSearch_SearchWordsEntry_DoNotUse_redis_2fuser_5ffeature_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserFeatureSearch_SearchWordsEntry_DoNotUse_redis_2fuser_5ffeature_5fdata_2eproto}, {
      &scc_info_IDTimeList_redis_2fuser_5ffeature_5fdata_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_redis_2fuser_5ffeature_5fdata_2eproto[14];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_redis_2fuser_5ffeature_5fdata_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_redis_2fuser_5ffeature_5fdata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_redis_2fuser_5ffeature_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::UserFeatureClean, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::UserFeatureClean, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::IDWeight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::IDWeight, id_),
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::IDWeight, weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::IDWeightList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::IDWeightList, id_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::IDTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::IDTime, id_),
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::IDTime, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::IDTimeList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::IDTimeList, id_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::UserFeatureBasic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::UserFeatureBasic, timestamp_),
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::UserFeatureBasic, user_id_),
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::UserFeatureBasic, user_sex_),
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::UserFeatureBasic, user_province_code_),
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::UserFeatureBasic, user_city_code_),
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::UserFeatureBasic, user_profession_),
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::UserFeatureBasic, user_lb_),
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::UserFeatureBasic, is_vip_),
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::UserFeatureBasic, growth_value_),
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::UserFeatureBasic, vip_status_),
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::UserFeatureClick_ClickItemEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::UserFeatureClick_ClickItemEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::UserFeatureClick_ClickItemEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::UserFeatureClick_ClickItemEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::UserFeatureClick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::UserFeatureClick, timestamp_),
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::UserFeatureClick, click_item_),
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::UserFeatureSearch_SearchWordsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::UserFeatureSearch_SearchWordsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::UserFeatureSearch_SearchWordsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::UserFeatureSearch_SearchWordsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::UserFeatureSearch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::UserFeatureSearch, timestamp_),
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::UserFeatureSearch, search_words_),
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::UserFeatureDownload_DownloadItemEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::UserFeatureDownload_DownloadItemEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::UserFeatureDownload_DownloadItemEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::UserFeatureDownload_DownloadItemEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::UserFeatureDownload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::UserFeatureDownload, timestamp_),
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::UserFeatureDownload, download_item_),
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::UserFeatureIndex_CfItemEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::UserFeatureIndex_CfItemEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::UserFeatureIndex_CfItemEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::UserFeatureIndex_CfItemEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::UserFeatureIndex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::UserFeatureIndex, timestamp_),
  PROTOBUF_FIELD_OFFSET(::RSP_UserFeatureData::UserFeatureIndex, cf_item_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::RSP_UserFeatureData::UserFeatureClean)},
  { 6, -1, sizeof(::RSP_UserFeatureData::IDWeight)},
  { 13, -1, sizeof(::RSP_UserFeatureData::IDWeightList)},
  { 19, -1, sizeof(::RSP_UserFeatureData::IDTime)},
  { 26, -1, sizeof(::RSP_UserFeatureData::IDTimeList)},
  { 32, -1, sizeof(::RSP_UserFeatureData::UserFeatureBasic)},
  { 47, 54, sizeof(::RSP_UserFeatureData::UserFeatureClick_ClickItemEntry_DoNotUse)},
  { 56, -1, sizeof(::RSP_UserFeatureData::UserFeatureClick)},
  { 63, 70, sizeof(::RSP_UserFeatureData::UserFeatureSearch_SearchWordsEntry_DoNotUse)},
  { 72, -1, sizeof(::RSP_UserFeatureData::UserFeatureSearch)},
  { 79, 86, sizeof(::RSP_UserFeatureData::UserFeatureDownload_DownloadItemEntry_DoNotUse)},
  { 88, -1, sizeof(::RSP_UserFeatureData::UserFeatureDownload)},
  { 95, 102, sizeof(::RSP_UserFeatureData::UserFeatureIndex_CfItemEntry_DoNotUse)},
  { 104, -1, sizeof(::RSP_UserFeatureData::UserFeatureIndex)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RSP_UserFeatureData::_UserFeatureClean_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RSP_UserFeatureData::_IDWeight_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RSP_UserFeatureData::_IDWeightList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RSP_UserFeatureData::_IDTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RSP_UserFeatureData::_IDTimeList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RSP_UserFeatureData::_UserFeatureBasic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RSP_UserFeatureData::_UserFeatureClick_ClickItemEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RSP_UserFeatureData::_UserFeatureClick_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RSP_UserFeatureData::_UserFeatureSearch_SearchWordsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RSP_UserFeatureData::_UserFeatureSearch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RSP_UserFeatureData::_UserFeatureDownload_DownloadItemEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RSP_UserFeatureData::_UserFeatureDownload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RSP_UserFeatureData::_UserFeatureIndex_CfItemEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RSP_UserFeatureData::_UserFeatureIndex_default_instance_),
};

const char descriptor_table_protodef_redis_2fuser_5ffeature_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035redis/user_feature_data.proto\022\023RSP_Use"
  "rFeatureData\"%\n\020UserFeatureClean\022\021\n\ttime"
  "stamp\030\001 \001(\003\"&\n\010IDWeight\022\n\n\002id\030\001 \001(\003\022\016\n\006w"
  "eight\030\002 \001(\002\">\n\014IDWeightList\022.\n\007id_list\030\001"
  " \003(\0132\035.RSP_UserFeatureData.IDWeight\"\'\n\006I"
  "DTime\022\n\n\002id\030\001 \001(\003\022\021\n\ttimestamp\030\002 \001(\003\":\n\n"
  "IDTimeList\022,\n\007id_list\030\001 \003(\0132\033.RSP_UserFe"
  "atureData.IDTime\"\340\001\n\020UserFeatureBasic\022\021\n"
  "\ttimestamp\030\001 \001(\003\022\017\n\007user_id\030\002 \001(\003\022\020\n\010use"
  "r_sex\030\003 \001(\005\022\032\n\022user_province_code\030\004 \001(\005\022"
  "\026\n\016user_city_code\030\005 \001(\005\022\027\n\017user_professi"
  "on\030\006 \001(\005\022\017\n\007user_lb\030\007 \001(\005\022\016\n\006is_vip\030\010 \001("
  "\005\022\024\n\014growth_value\030\t \001(\005\022\022\n\nvip_status\030\n "
  "\001(\005\"\302\001\n\020UserFeatureClick\022\021\n\ttimestamp\030\001 "
  "\001(\003\022H\n\nclick_item\030\002 \003(\01324.RSP_UserFeatur"
  "eData.UserFeatureClick.ClickItemEntry\032Q\n"
  "\016ClickItemEntry\022\013\n\003key\030\001 \001(\005\022.\n\005value\030\002 "
  "\001(\0132\037.RSP_UserFeatureData.IDTimeList:\0028\001"
  "\"\312\001\n\021UserFeatureSearch\022\021\n\ttimestamp\030\001 \001("
  "\003\022M\n\014search_words\030\002 \003(\01327.RSP_UserFeatur"
  "eData.UserFeatureSearch.SearchWordsEntry"
  "\032S\n\020SearchWordsEntry\022\013\n\003key\030\001 \001(\005\022.\n\005val"
  "ue\030\002 \001(\0132\037.RSP_UserFeatureData.IDTimeLis"
  "t:\0028\001\"\321\001\n\023UserFeatureDownload\022\021\n\ttimesta"
  "mp\030\001 \001(\003\022Q\n\rdownload_item\030\002 \003(\0132:.RSP_Us"
  "erFeatureData.UserFeatureDownload.Downlo"
  "adItemEntry\032T\n\021DownloadItemEntry\022\013\n\003key\030"
  "\001 \001(\005\022.\n\005value\030\002 \001(\0132\037.RSP_UserFeatureDa"
  "ta.IDTimeList:\0028\001\"\273\001\n\020UserFeatureIndex\022\021"
  "\n\ttimestamp\030\001 \001(\003\022B\n\007cf_item\030\002 \003(\01321.RSP"
  "_UserFeatureData.UserFeatureIndex.CfItem"
  "Entry\032P\n\013CfItemEntry\022\013\n\003key\030\001 \001(\005\0220\n\005val"
  "ue\030\002 \001(\0132!.RSP_UserFeatureData.IDWeightL"
  "ist:\0028\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_redis_2fuser_5ffeature_5fdata_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_redis_2fuser_5ffeature_5fdata_2eproto_sccs[14] = {
  &scc_info_IDTime_redis_2fuser_5ffeature_5fdata_2eproto.base,
  &scc_info_IDTimeList_redis_2fuser_5ffeature_5fdata_2eproto.base,
  &scc_info_IDWeight_redis_2fuser_5ffeature_5fdata_2eproto.base,
  &scc_info_IDWeightList_redis_2fuser_5ffeature_5fdata_2eproto.base,
  &scc_info_UserFeatureBasic_redis_2fuser_5ffeature_5fdata_2eproto.base,
  &scc_info_UserFeatureClean_redis_2fuser_5ffeature_5fdata_2eproto.base,
  &scc_info_UserFeatureClick_redis_2fuser_5ffeature_5fdata_2eproto.base,
  &scc_info_UserFeatureClick_ClickItemEntry_DoNotUse_redis_2fuser_5ffeature_5fdata_2eproto.base,
  &scc_info_UserFeatureDownload_redis_2fuser_5ffeature_5fdata_2eproto.base,
  &scc_info_UserFeatureDownload_DownloadItemEntry_DoNotUse_redis_2fuser_5ffeature_5fdata_2eproto.base,
  &scc_info_UserFeatureIndex_redis_2fuser_5ffeature_5fdata_2eproto.base,
  &scc_info_UserFeatureIndex_CfItemEntry_DoNotUse_redis_2fuser_5ffeature_5fdata_2eproto.base,
  &scc_info_UserFeatureSearch_redis_2fuser_5ffeature_5fdata_2eproto.base,
  &scc_info_UserFeatureSearch_SearchWordsEntry_DoNotUse_redis_2fuser_5ffeature_5fdata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_redis_2fuser_5ffeature_5fdata_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_redis_2fuser_5ffeature_5fdata_2eproto = {
  false, false, descriptor_table_protodef_redis_2fuser_5ffeature_5fdata_2eproto, "redis/user_feature_data.proto", 1335,
  &descriptor_table_redis_2fuser_5ffeature_5fdata_2eproto_once, descriptor_table_redis_2fuser_5ffeature_5fdata_2eproto_sccs, descriptor_table_redis_2fuser_5ffeature_5fdata_2eproto_deps, 14, 0,
  schemas, file_default_instances, TableStruct_redis_2fuser_5ffeature_5fdata_2eproto::offsets,
  file_level_metadata_redis_2fuser_5ffeature_5fdata_2eproto, 14, file_level_enum_descriptors_redis_2fuser_5ffeature_5fdata_2eproto, file_level_service_descriptors_redis_2fuser_5ffeature_5fdata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_redis_2fuser_5ffeature_5fdata_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_redis_2fuser_5ffeature_5fdata_2eproto)), true);
namespace RSP_UserFeatureData {

// ===================================================================

class UserFeatureClean::_Internal {
 public:
};

UserFeatureClean::UserFeatureClean(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RSP_UserFeatureData.UserFeatureClean)
}
UserFeatureClean::UserFeatureClean(const UserFeatureClean& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:RSP_UserFeatureData.UserFeatureClean)
}

void UserFeatureClean::SharedCtor() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}

UserFeatureClean::~UserFeatureClean() {
  // @@protoc_insertion_point(destructor:RSP_UserFeatureData.UserFeatureClean)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserFeatureClean::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserFeatureClean::ArenaDtor(void* object) {
  UserFeatureClean* _this = reinterpret_cast< UserFeatureClean* >(object);
  (void)_this;
}
void UserFeatureClean::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserFeatureClean::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserFeatureClean& UserFeatureClean::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserFeatureClean_redis_2fuser_5ffeature_5fdata_2eproto.base);
  return *internal_default_instance();
}


void UserFeatureClean::Clear() {
// @@protoc_insertion_point(message_clear_start:RSP_UserFeatureData.UserFeatureClean)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserFeatureClean::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserFeatureClean::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RSP_UserFeatureData.UserFeatureClean)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RSP_UserFeatureData.UserFeatureClean)
  return target;
}

size_t UserFeatureClean::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RSP_UserFeatureData.UserFeatureClean)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserFeatureClean::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RSP_UserFeatureData.UserFeatureClean)
  GOOGLE_DCHECK_NE(&from, this);
  const UserFeatureClean* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserFeatureClean>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RSP_UserFeatureData.UserFeatureClean)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RSP_UserFeatureData.UserFeatureClean)
    MergeFrom(*source);
  }
}

void UserFeatureClean::MergeFrom(const UserFeatureClean& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RSP_UserFeatureData.UserFeatureClean)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void UserFeatureClean::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RSP_UserFeatureData.UserFeatureClean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserFeatureClean::CopyFrom(const UserFeatureClean& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RSP_UserFeatureData.UserFeatureClean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserFeatureClean::IsInitialized() const {
  return true;
}

void UserFeatureClean::InternalSwap(UserFeatureClean* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserFeatureClean::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IDWeight::_Internal {
 public:
};

IDWeight::IDWeight(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RSP_UserFeatureData.IDWeight)
}
IDWeight::IDWeight(const IDWeight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&id_)) + sizeof(weight_));
  // @@protoc_insertion_point(copy_constructor:RSP_UserFeatureData.IDWeight)
}

void IDWeight::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&id_)) + sizeof(weight_));
}

IDWeight::~IDWeight() {
  // @@protoc_insertion_point(destructor:RSP_UserFeatureData.IDWeight)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IDWeight::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IDWeight::ArenaDtor(void* object) {
  IDWeight* _this = reinterpret_cast< IDWeight* >(object);
  (void)_this;
}
void IDWeight::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IDWeight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IDWeight& IDWeight::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IDWeight_redis_2fuser_5ffeature_5fdata_2eproto.base);
  return *internal_default_instance();
}


void IDWeight::Clear() {
// @@protoc_insertion_point(message_clear_start:RSP_UserFeatureData.IDWeight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&id_)) + sizeof(weight_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IDWeight::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float weight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IDWeight::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RSP_UserFeatureData.IDWeight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // float weight = 2;
  if (!(this->weight() <= 0 && this->weight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RSP_UserFeatureData.IDWeight)
  return target;
}

size_t IDWeight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RSP_UserFeatureData.IDWeight)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // float weight = 2;
  if (!(this->weight() <= 0 && this->weight() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IDWeight::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RSP_UserFeatureData.IDWeight)
  GOOGLE_DCHECK_NE(&from, this);
  const IDWeight* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IDWeight>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RSP_UserFeatureData.IDWeight)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RSP_UserFeatureData.IDWeight)
    MergeFrom(*source);
  }
}

void IDWeight::MergeFrom(const IDWeight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RSP_UserFeatureData.IDWeight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (!(from.weight() <= 0 && from.weight() >= 0)) {
    _internal_set_weight(from._internal_weight());
  }
}

void IDWeight::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RSP_UserFeatureData.IDWeight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IDWeight::CopyFrom(const IDWeight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RSP_UserFeatureData.IDWeight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IDWeight::IsInitialized() const {
  return true;
}

void IDWeight::InternalSwap(IDWeight* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IDWeight, weight_)
      + sizeof(IDWeight::weight_)
      - PROTOBUF_FIELD_OFFSET(IDWeight, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IDWeight::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IDWeightList::_Internal {
 public:
};

IDWeightList::IDWeightList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  id_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RSP_UserFeatureData.IDWeightList)
}
IDWeightList::IDWeightList(const IDWeightList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      id_list_(from.id_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:RSP_UserFeatureData.IDWeightList)
}

void IDWeightList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IDWeightList_redis_2fuser_5ffeature_5fdata_2eproto.base);
}

IDWeightList::~IDWeightList() {
  // @@protoc_insertion_point(destructor:RSP_UserFeatureData.IDWeightList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IDWeightList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IDWeightList::ArenaDtor(void* object) {
  IDWeightList* _this = reinterpret_cast< IDWeightList* >(object);
  (void)_this;
}
void IDWeightList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IDWeightList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IDWeightList& IDWeightList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IDWeightList_redis_2fuser_5ffeature_5fdata_2eproto.base);
  return *internal_default_instance();
}


void IDWeightList::Clear() {
// @@protoc_insertion_point(message_clear_start:RSP_UserFeatureData.IDWeightList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IDWeightList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .RSP_UserFeatureData.IDWeight id_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_id_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IDWeightList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RSP_UserFeatureData.IDWeightList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .RSP_UserFeatureData.IDWeight id_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_id_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_id_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RSP_UserFeatureData.IDWeightList)
  return target;
}

size_t IDWeightList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RSP_UserFeatureData.IDWeightList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RSP_UserFeatureData.IDWeight id_list = 1;
  total_size += 1UL * this->_internal_id_list_size();
  for (const auto& msg : this->id_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IDWeightList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RSP_UserFeatureData.IDWeightList)
  GOOGLE_DCHECK_NE(&from, this);
  const IDWeightList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IDWeightList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RSP_UserFeatureData.IDWeightList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RSP_UserFeatureData.IDWeightList)
    MergeFrom(*source);
  }
}

void IDWeightList::MergeFrom(const IDWeightList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RSP_UserFeatureData.IDWeightList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  id_list_.MergeFrom(from.id_list_);
}

void IDWeightList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RSP_UserFeatureData.IDWeightList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IDWeightList::CopyFrom(const IDWeightList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RSP_UserFeatureData.IDWeightList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IDWeightList::IsInitialized() const {
  return true;
}

void IDWeightList::InternalSwap(IDWeightList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_list_.InternalSwap(&other->id_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IDWeightList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IDTime::_Internal {
 public:
};

IDTime::IDTime(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RSP_UserFeatureData.IDTime)
}
IDTime::IDTime(const IDTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&id_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:RSP_UserFeatureData.IDTime)
}

void IDTime::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&id_)) + sizeof(timestamp_));
}

IDTime::~IDTime() {
  // @@protoc_insertion_point(destructor:RSP_UserFeatureData.IDTime)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IDTime::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IDTime::ArenaDtor(void* object) {
  IDTime* _this = reinterpret_cast< IDTime* >(object);
  (void)_this;
}
void IDTime::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IDTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IDTime& IDTime::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IDTime_redis_2fuser_5ffeature_5fdata_2eproto.base);
  return *internal_default_instance();
}


void IDTime::Clear() {
// @@protoc_insertion_point(message_clear_start:RSP_UserFeatureData.IDTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&id_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IDTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IDTime::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RSP_UserFeatureData.IDTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RSP_UserFeatureData.IDTime)
  return target;
}

size_t IDTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RSP_UserFeatureData.IDTime)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IDTime::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RSP_UserFeatureData.IDTime)
  GOOGLE_DCHECK_NE(&from, this);
  const IDTime* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IDTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RSP_UserFeatureData.IDTime)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RSP_UserFeatureData.IDTime)
    MergeFrom(*source);
  }
}

void IDTime::MergeFrom(const IDTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RSP_UserFeatureData.IDTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void IDTime::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RSP_UserFeatureData.IDTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IDTime::CopyFrom(const IDTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RSP_UserFeatureData.IDTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IDTime::IsInitialized() const {
  return true;
}

void IDTime::InternalSwap(IDTime* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IDTime, timestamp_)
      + sizeof(IDTime::timestamp_)
      - PROTOBUF_FIELD_OFFSET(IDTime, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IDTime::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IDTimeList::_Internal {
 public:
};

IDTimeList::IDTimeList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  id_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RSP_UserFeatureData.IDTimeList)
}
IDTimeList::IDTimeList(const IDTimeList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      id_list_(from.id_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:RSP_UserFeatureData.IDTimeList)
}

void IDTimeList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IDTimeList_redis_2fuser_5ffeature_5fdata_2eproto.base);
}

IDTimeList::~IDTimeList() {
  // @@protoc_insertion_point(destructor:RSP_UserFeatureData.IDTimeList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IDTimeList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IDTimeList::ArenaDtor(void* object) {
  IDTimeList* _this = reinterpret_cast< IDTimeList* >(object);
  (void)_this;
}
void IDTimeList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IDTimeList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IDTimeList& IDTimeList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IDTimeList_redis_2fuser_5ffeature_5fdata_2eproto.base);
  return *internal_default_instance();
}


void IDTimeList::Clear() {
// @@protoc_insertion_point(message_clear_start:RSP_UserFeatureData.IDTimeList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IDTimeList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .RSP_UserFeatureData.IDTime id_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_id_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IDTimeList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RSP_UserFeatureData.IDTimeList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .RSP_UserFeatureData.IDTime id_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_id_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_id_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RSP_UserFeatureData.IDTimeList)
  return target;
}

size_t IDTimeList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RSP_UserFeatureData.IDTimeList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RSP_UserFeatureData.IDTime id_list = 1;
  total_size += 1UL * this->_internal_id_list_size();
  for (const auto& msg : this->id_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IDTimeList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RSP_UserFeatureData.IDTimeList)
  GOOGLE_DCHECK_NE(&from, this);
  const IDTimeList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IDTimeList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RSP_UserFeatureData.IDTimeList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RSP_UserFeatureData.IDTimeList)
    MergeFrom(*source);
  }
}

void IDTimeList::MergeFrom(const IDTimeList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RSP_UserFeatureData.IDTimeList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  id_list_.MergeFrom(from.id_list_);
}

void IDTimeList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RSP_UserFeatureData.IDTimeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IDTimeList::CopyFrom(const IDTimeList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RSP_UserFeatureData.IDTimeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IDTimeList::IsInitialized() const {
  return true;
}

void IDTimeList::InternalSwap(IDTimeList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_list_.InternalSwap(&other->id_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IDTimeList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UserFeatureBasic::_Internal {
 public:
};

UserFeatureBasic::UserFeatureBasic(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RSP_UserFeatureData.UserFeatureBasic)
}
UserFeatureBasic::UserFeatureBasic(const UserFeatureBasic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&vip_status_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(vip_status_));
  // @@protoc_insertion_point(copy_constructor:RSP_UserFeatureData.UserFeatureBasic)
}

void UserFeatureBasic::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&vip_status_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(vip_status_));
}

UserFeatureBasic::~UserFeatureBasic() {
  // @@protoc_insertion_point(destructor:RSP_UserFeatureData.UserFeatureBasic)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserFeatureBasic::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserFeatureBasic::ArenaDtor(void* object) {
  UserFeatureBasic* _this = reinterpret_cast< UserFeatureBasic* >(object);
  (void)_this;
}
void UserFeatureBasic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserFeatureBasic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserFeatureBasic& UserFeatureBasic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserFeatureBasic_redis_2fuser_5ffeature_5fdata_2eproto.base);
  return *internal_default_instance();
}


void UserFeatureBasic::Clear() {
// @@protoc_insertion_point(message_clear_start:RSP_UserFeatureData.UserFeatureBasic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vip_status_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(vip_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserFeatureBasic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 user_sex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          user_sex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 user_province_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          user_province_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 user_city_code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          user_city_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 user_profession = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          user_profession_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 user_lb = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          user_lb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 is_vip = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          is_vip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 growth_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          growth_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vip_status = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          vip_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserFeatureBasic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RSP_UserFeatureData.UserFeatureBasic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // int64 user_id = 2;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_user_id(), target);
  }

  // int32 user_sex = 3;
  if (this->user_sex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_user_sex(), target);
  }

  // int32 user_province_code = 4;
  if (this->user_province_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_user_province_code(), target);
  }

  // int32 user_city_code = 5;
  if (this->user_city_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_user_city_code(), target);
  }

  // int32 user_profession = 6;
  if (this->user_profession() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_user_profession(), target);
  }

  // int32 user_lb = 7;
  if (this->user_lb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_user_lb(), target);
  }

  // int32 is_vip = 8;
  if (this->is_vip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_is_vip(), target);
  }

  // int32 growth_value = 9;
  if (this->growth_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_growth_value(), target);
  }

  // int32 vip_status = 10;
  if (this->vip_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_vip_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RSP_UserFeatureData.UserFeatureBasic)
  return target;
}

size_t UserFeatureBasic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RSP_UserFeatureData.UserFeatureBasic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // int64 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_id());
  }

  // int32 user_sex = 3;
  if (this->user_sex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_sex());
  }

  // int32 user_province_code = 4;
  if (this->user_province_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_province_code());
  }

  // int32 user_city_code = 5;
  if (this->user_city_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_city_code());
  }

  // int32 user_profession = 6;
  if (this->user_profession() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_profession());
  }

  // int32 user_lb = 7;
  if (this->user_lb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_lb());
  }

  // int32 is_vip = 8;
  if (this->is_vip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_vip());
  }

  // int32 growth_value = 9;
  if (this->growth_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_growth_value());
  }

  // int32 vip_status = 10;
  if (this->vip_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vip_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserFeatureBasic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RSP_UserFeatureData.UserFeatureBasic)
  GOOGLE_DCHECK_NE(&from, this);
  const UserFeatureBasic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserFeatureBasic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RSP_UserFeatureData.UserFeatureBasic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RSP_UserFeatureData.UserFeatureBasic)
    MergeFrom(*source);
  }
}

void UserFeatureBasic::MergeFrom(const UserFeatureBasic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RSP_UserFeatureData.UserFeatureBasic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.user_sex() != 0) {
    _internal_set_user_sex(from._internal_user_sex());
  }
  if (from.user_province_code() != 0) {
    _internal_set_user_province_code(from._internal_user_province_code());
  }
  if (from.user_city_code() != 0) {
    _internal_set_user_city_code(from._internal_user_city_code());
  }
  if (from.user_profession() != 0) {
    _internal_set_user_profession(from._internal_user_profession());
  }
  if (from.user_lb() != 0) {
    _internal_set_user_lb(from._internal_user_lb());
  }
  if (from.is_vip() != 0) {
    _internal_set_is_vip(from._internal_is_vip());
  }
  if (from.growth_value() != 0) {
    _internal_set_growth_value(from._internal_growth_value());
  }
  if (from.vip_status() != 0) {
    _internal_set_vip_status(from._internal_vip_status());
  }
}

void UserFeatureBasic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RSP_UserFeatureData.UserFeatureBasic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserFeatureBasic::CopyFrom(const UserFeatureBasic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RSP_UserFeatureData.UserFeatureBasic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserFeatureBasic::IsInitialized() const {
  return true;
}

void UserFeatureBasic::InternalSwap(UserFeatureBasic* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserFeatureBasic, vip_status_)
      + sizeof(UserFeatureBasic::vip_status_)
      - PROTOBUF_FIELD_OFFSET(UserFeatureBasic, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserFeatureBasic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

UserFeatureClick_ClickItemEntry_DoNotUse::UserFeatureClick_ClickItemEntry_DoNotUse() {}
UserFeatureClick_ClickItemEntry_DoNotUse::UserFeatureClick_ClickItemEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void UserFeatureClick_ClickItemEntry_DoNotUse::MergeFrom(const UserFeatureClick_ClickItemEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata UserFeatureClick_ClickItemEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void UserFeatureClick_ClickItemEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class UserFeatureClick::_Internal {
 public:
};

UserFeatureClick::UserFeatureClick(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  click_item_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RSP_UserFeatureData.UserFeatureClick)
}
UserFeatureClick::UserFeatureClick(const UserFeatureClick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  click_item_.MergeFrom(from.click_item_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:RSP_UserFeatureData.UserFeatureClick)
}

void UserFeatureClick::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserFeatureClick_redis_2fuser_5ffeature_5fdata_2eproto.base);
  timestamp_ = PROTOBUF_LONGLONG(0);
}

UserFeatureClick::~UserFeatureClick() {
  // @@protoc_insertion_point(destructor:RSP_UserFeatureData.UserFeatureClick)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserFeatureClick::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserFeatureClick::ArenaDtor(void* object) {
  UserFeatureClick* _this = reinterpret_cast< UserFeatureClick* >(object);
  (void)_this;
}
void UserFeatureClick::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserFeatureClick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserFeatureClick& UserFeatureClick::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserFeatureClick_redis_2fuser_5ffeature_5fdata_2eproto.base);
  return *internal_default_instance();
}


void UserFeatureClick::Clear() {
// @@protoc_insertion_point(message_clear_start:RSP_UserFeatureData.UserFeatureClick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  click_item_.Clear();
  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserFeatureClick::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, .RSP_UserFeatureData.IDTimeList> click_item = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&click_item_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserFeatureClick::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RSP_UserFeatureData.UserFeatureClick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // map<int32, .RSP_UserFeatureData.IDTimeList> click_item = 2;
  if (!this->_internal_click_item().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_click_item().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_click_item().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList >::const_iterator
          it = this->_internal_click_item().begin();
          it != this->_internal_click_item().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = UserFeatureClick_ClickItemEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList >::const_iterator
          it = this->_internal_click_item().begin();
          it != this->_internal_click_item().end(); ++it) {
        target = UserFeatureClick_ClickItemEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RSP_UserFeatureData.UserFeatureClick)
  return target;
}

size_t UserFeatureClick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RSP_UserFeatureData.UserFeatureClick)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .RSP_UserFeatureData.IDTimeList> click_item = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_click_item_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList >::const_iterator
      it = this->_internal_click_item().begin();
      it != this->_internal_click_item().end(); ++it) {
    total_size += UserFeatureClick_ClickItemEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserFeatureClick::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RSP_UserFeatureData.UserFeatureClick)
  GOOGLE_DCHECK_NE(&from, this);
  const UserFeatureClick* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserFeatureClick>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RSP_UserFeatureData.UserFeatureClick)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RSP_UserFeatureData.UserFeatureClick)
    MergeFrom(*source);
  }
}

void UserFeatureClick::MergeFrom(const UserFeatureClick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RSP_UserFeatureData.UserFeatureClick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  click_item_.MergeFrom(from.click_item_);
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void UserFeatureClick::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RSP_UserFeatureData.UserFeatureClick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserFeatureClick::CopyFrom(const UserFeatureClick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RSP_UserFeatureData.UserFeatureClick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserFeatureClick::IsInitialized() const {
  return true;
}

void UserFeatureClick::InternalSwap(UserFeatureClick* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  click_item_.Swap(&other->click_item_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserFeatureClick::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

UserFeatureSearch_SearchWordsEntry_DoNotUse::UserFeatureSearch_SearchWordsEntry_DoNotUse() {}
UserFeatureSearch_SearchWordsEntry_DoNotUse::UserFeatureSearch_SearchWordsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void UserFeatureSearch_SearchWordsEntry_DoNotUse::MergeFrom(const UserFeatureSearch_SearchWordsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata UserFeatureSearch_SearchWordsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void UserFeatureSearch_SearchWordsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class UserFeatureSearch::_Internal {
 public:
};

UserFeatureSearch::UserFeatureSearch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  search_words_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RSP_UserFeatureData.UserFeatureSearch)
}
UserFeatureSearch::UserFeatureSearch(const UserFeatureSearch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  search_words_.MergeFrom(from.search_words_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:RSP_UserFeatureData.UserFeatureSearch)
}

void UserFeatureSearch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserFeatureSearch_redis_2fuser_5ffeature_5fdata_2eproto.base);
  timestamp_ = PROTOBUF_LONGLONG(0);
}

UserFeatureSearch::~UserFeatureSearch() {
  // @@protoc_insertion_point(destructor:RSP_UserFeatureData.UserFeatureSearch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserFeatureSearch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserFeatureSearch::ArenaDtor(void* object) {
  UserFeatureSearch* _this = reinterpret_cast< UserFeatureSearch* >(object);
  (void)_this;
}
void UserFeatureSearch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserFeatureSearch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserFeatureSearch& UserFeatureSearch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserFeatureSearch_redis_2fuser_5ffeature_5fdata_2eproto.base);
  return *internal_default_instance();
}


void UserFeatureSearch::Clear() {
// @@protoc_insertion_point(message_clear_start:RSP_UserFeatureData.UserFeatureSearch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  search_words_.Clear();
  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserFeatureSearch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, .RSP_UserFeatureData.IDTimeList> search_words = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&search_words_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserFeatureSearch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RSP_UserFeatureData.UserFeatureSearch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // map<int32, .RSP_UserFeatureData.IDTimeList> search_words = 2;
  if (!this->_internal_search_words().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_search_words().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_search_words().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList >::const_iterator
          it = this->_internal_search_words().begin();
          it != this->_internal_search_words().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = UserFeatureSearch_SearchWordsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList >::const_iterator
          it = this->_internal_search_words().begin();
          it != this->_internal_search_words().end(); ++it) {
        target = UserFeatureSearch_SearchWordsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RSP_UserFeatureData.UserFeatureSearch)
  return target;
}

size_t UserFeatureSearch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RSP_UserFeatureData.UserFeatureSearch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .RSP_UserFeatureData.IDTimeList> search_words = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_search_words_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList >::const_iterator
      it = this->_internal_search_words().begin();
      it != this->_internal_search_words().end(); ++it) {
    total_size += UserFeatureSearch_SearchWordsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserFeatureSearch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RSP_UserFeatureData.UserFeatureSearch)
  GOOGLE_DCHECK_NE(&from, this);
  const UserFeatureSearch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserFeatureSearch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RSP_UserFeatureData.UserFeatureSearch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RSP_UserFeatureData.UserFeatureSearch)
    MergeFrom(*source);
  }
}

void UserFeatureSearch::MergeFrom(const UserFeatureSearch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RSP_UserFeatureData.UserFeatureSearch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  search_words_.MergeFrom(from.search_words_);
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void UserFeatureSearch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RSP_UserFeatureData.UserFeatureSearch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserFeatureSearch::CopyFrom(const UserFeatureSearch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RSP_UserFeatureData.UserFeatureSearch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserFeatureSearch::IsInitialized() const {
  return true;
}

void UserFeatureSearch::InternalSwap(UserFeatureSearch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  search_words_.Swap(&other->search_words_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserFeatureSearch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

UserFeatureDownload_DownloadItemEntry_DoNotUse::UserFeatureDownload_DownloadItemEntry_DoNotUse() {}
UserFeatureDownload_DownloadItemEntry_DoNotUse::UserFeatureDownload_DownloadItemEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void UserFeatureDownload_DownloadItemEntry_DoNotUse::MergeFrom(const UserFeatureDownload_DownloadItemEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata UserFeatureDownload_DownloadItemEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void UserFeatureDownload_DownloadItemEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class UserFeatureDownload::_Internal {
 public:
};

UserFeatureDownload::UserFeatureDownload(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  download_item_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RSP_UserFeatureData.UserFeatureDownload)
}
UserFeatureDownload::UserFeatureDownload(const UserFeatureDownload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  download_item_.MergeFrom(from.download_item_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:RSP_UserFeatureData.UserFeatureDownload)
}

void UserFeatureDownload::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserFeatureDownload_redis_2fuser_5ffeature_5fdata_2eproto.base);
  timestamp_ = PROTOBUF_LONGLONG(0);
}

UserFeatureDownload::~UserFeatureDownload() {
  // @@protoc_insertion_point(destructor:RSP_UserFeatureData.UserFeatureDownload)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserFeatureDownload::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserFeatureDownload::ArenaDtor(void* object) {
  UserFeatureDownload* _this = reinterpret_cast< UserFeatureDownload* >(object);
  (void)_this;
}
void UserFeatureDownload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserFeatureDownload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserFeatureDownload& UserFeatureDownload::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserFeatureDownload_redis_2fuser_5ffeature_5fdata_2eproto.base);
  return *internal_default_instance();
}


void UserFeatureDownload::Clear() {
// @@protoc_insertion_point(message_clear_start:RSP_UserFeatureData.UserFeatureDownload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  download_item_.Clear();
  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserFeatureDownload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, .RSP_UserFeatureData.IDTimeList> download_item = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&download_item_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserFeatureDownload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RSP_UserFeatureData.UserFeatureDownload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // map<int32, .RSP_UserFeatureData.IDTimeList> download_item = 2;
  if (!this->_internal_download_item().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_download_item().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_download_item().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList >::const_iterator
          it = this->_internal_download_item().begin();
          it != this->_internal_download_item().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = UserFeatureDownload_DownloadItemEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList >::const_iterator
          it = this->_internal_download_item().begin();
          it != this->_internal_download_item().end(); ++it) {
        target = UserFeatureDownload_DownloadItemEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RSP_UserFeatureData.UserFeatureDownload)
  return target;
}

size_t UserFeatureDownload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RSP_UserFeatureData.UserFeatureDownload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .RSP_UserFeatureData.IDTimeList> download_item = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_download_item_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDTimeList >::const_iterator
      it = this->_internal_download_item().begin();
      it != this->_internal_download_item().end(); ++it) {
    total_size += UserFeatureDownload_DownloadItemEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserFeatureDownload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RSP_UserFeatureData.UserFeatureDownload)
  GOOGLE_DCHECK_NE(&from, this);
  const UserFeatureDownload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserFeatureDownload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RSP_UserFeatureData.UserFeatureDownload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RSP_UserFeatureData.UserFeatureDownload)
    MergeFrom(*source);
  }
}

void UserFeatureDownload::MergeFrom(const UserFeatureDownload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RSP_UserFeatureData.UserFeatureDownload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  download_item_.MergeFrom(from.download_item_);
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void UserFeatureDownload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RSP_UserFeatureData.UserFeatureDownload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserFeatureDownload::CopyFrom(const UserFeatureDownload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RSP_UserFeatureData.UserFeatureDownload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserFeatureDownload::IsInitialized() const {
  return true;
}

void UserFeatureDownload::InternalSwap(UserFeatureDownload* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  download_item_.Swap(&other->download_item_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserFeatureDownload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

UserFeatureIndex_CfItemEntry_DoNotUse::UserFeatureIndex_CfItemEntry_DoNotUse() {}
UserFeatureIndex_CfItemEntry_DoNotUse::UserFeatureIndex_CfItemEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void UserFeatureIndex_CfItemEntry_DoNotUse::MergeFrom(const UserFeatureIndex_CfItemEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata UserFeatureIndex_CfItemEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void UserFeatureIndex_CfItemEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class UserFeatureIndex::_Internal {
 public:
};

UserFeatureIndex::UserFeatureIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cf_item_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RSP_UserFeatureData.UserFeatureIndex)
}
UserFeatureIndex::UserFeatureIndex(const UserFeatureIndex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cf_item_.MergeFrom(from.cf_item_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:RSP_UserFeatureData.UserFeatureIndex)
}

void UserFeatureIndex::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserFeatureIndex_redis_2fuser_5ffeature_5fdata_2eproto.base);
  timestamp_ = PROTOBUF_LONGLONG(0);
}

UserFeatureIndex::~UserFeatureIndex() {
  // @@protoc_insertion_point(destructor:RSP_UserFeatureData.UserFeatureIndex)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserFeatureIndex::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserFeatureIndex::ArenaDtor(void* object) {
  UserFeatureIndex* _this = reinterpret_cast< UserFeatureIndex* >(object);
  (void)_this;
}
void UserFeatureIndex::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserFeatureIndex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserFeatureIndex& UserFeatureIndex::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserFeatureIndex_redis_2fuser_5ffeature_5fdata_2eproto.base);
  return *internal_default_instance();
}


void UserFeatureIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:RSP_UserFeatureData.UserFeatureIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cf_item_.Clear();
  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserFeatureIndex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, .RSP_UserFeatureData.IDWeightList> cf_item = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&cf_item_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserFeatureIndex::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RSP_UserFeatureData.UserFeatureIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // map<int32, .RSP_UserFeatureData.IDWeightList> cf_item = 2;
  if (!this->_internal_cf_item().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDWeightList >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_cf_item().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_cf_item().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDWeightList >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDWeightList >::const_iterator
          it = this->_internal_cf_item().begin();
          it != this->_internal_cf_item().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = UserFeatureIndex_CfItemEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDWeightList >::const_iterator
          it = this->_internal_cf_item().begin();
          it != this->_internal_cf_item().end(); ++it) {
        target = UserFeatureIndex_CfItemEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RSP_UserFeatureData.UserFeatureIndex)
  return target;
}

size_t UserFeatureIndex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RSP_UserFeatureData.UserFeatureIndex)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .RSP_UserFeatureData.IDWeightList> cf_item = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_cf_item_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::RSP_UserFeatureData::IDWeightList >::const_iterator
      it = this->_internal_cf_item().begin();
      it != this->_internal_cf_item().end(); ++it) {
    total_size += UserFeatureIndex_CfItemEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserFeatureIndex::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RSP_UserFeatureData.UserFeatureIndex)
  GOOGLE_DCHECK_NE(&from, this);
  const UserFeatureIndex* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserFeatureIndex>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RSP_UserFeatureData.UserFeatureIndex)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RSP_UserFeatureData.UserFeatureIndex)
    MergeFrom(*source);
  }
}

void UserFeatureIndex::MergeFrom(const UserFeatureIndex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RSP_UserFeatureData.UserFeatureIndex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cf_item_.MergeFrom(from.cf_item_);
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void UserFeatureIndex::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RSP_UserFeatureData.UserFeatureIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserFeatureIndex::CopyFrom(const UserFeatureIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RSP_UserFeatureData.UserFeatureIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserFeatureIndex::IsInitialized() const {
  return true;
}

void UserFeatureIndex::InternalSwap(UserFeatureIndex* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cf_item_.Swap(&other->cf_item_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserFeatureIndex::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace RSP_UserFeatureData
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RSP_UserFeatureData::UserFeatureClean* Arena::CreateMaybeMessage< ::RSP_UserFeatureData::UserFeatureClean >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RSP_UserFeatureData::UserFeatureClean >(arena);
}
template<> PROTOBUF_NOINLINE ::RSP_UserFeatureData::IDWeight* Arena::CreateMaybeMessage< ::RSP_UserFeatureData::IDWeight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RSP_UserFeatureData::IDWeight >(arena);
}
template<> PROTOBUF_NOINLINE ::RSP_UserFeatureData::IDWeightList* Arena::CreateMaybeMessage< ::RSP_UserFeatureData::IDWeightList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RSP_UserFeatureData::IDWeightList >(arena);
}
template<> PROTOBUF_NOINLINE ::RSP_UserFeatureData::IDTime* Arena::CreateMaybeMessage< ::RSP_UserFeatureData::IDTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RSP_UserFeatureData::IDTime >(arena);
}
template<> PROTOBUF_NOINLINE ::RSP_UserFeatureData::IDTimeList* Arena::CreateMaybeMessage< ::RSP_UserFeatureData::IDTimeList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RSP_UserFeatureData::IDTimeList >(arena);
}
template<> PROTOBUF_NOINLINE ::RSP_UserFeatureData::UserFeatureBasic* Arena::CreateMaybeMessage< ::RSP_UserFeatureData::UserFeatureBasic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RSP_UserFeatureData::UserFeatureBasic >(arena);
}
template<> PROTOBUF_NOINLINE ::RSP_UserFeatureData::UserFeatureClick_ClickItemEntry_DoNotUse* Arena::CreateMaybeMessage< ::RSP_UserFeatureData::UserFeatureClick_ClickItemEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RSP_UserFeatureData::UserFeatureClick_ClickItemEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::RSP_UserFeatureData::UserFeatureClick* Arena::CreateMaybeMessage< ::RSP_UserFeatureData::UserFeatureClick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RSP_UserFeatureData::UserFeatureClick >(arena);
}
template<> PROTOBUF_NOINLINE ::RSP_UserFeatureData::UserFeatureSearch_SearchWordsEntry_DoNotUse* Arena::CreateMaybeMessage< ::RSP_UserFeatureData::UserFeatureSearch_SearchWordsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RSP_UserFeatureData::UserFeatureSearch_SearchWordsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::RSP_UserFeatureData::UserFeatureSearch* Arena::CreateMaybeMessage< ::RSP_UserFeatureData::UserFeatureSearch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RSP_UserFeatureData::UserFeatureSearch >(arena);
}
template<> PROTOBUF_NOINLINE ::RSP_UserFeatureData::UserFeatureDownload_DownloadItemEntry_DoNotUse* Arena::CreateMaybeMessage< ::RSP_UserFeatureData::UserFeatureDownload_DownloadItemEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RSP_UserFeatureData::UserFeatureDownload_DownloadItemEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::RSP_UserFeatureData::UserFeatureDownload* Arena::CreateMaybeMessage< ::RSP_UserFeatureData::UserFeatureDownload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RSP_UserFeatureData::UserFeatureDownload >(arena);
}
template<> PROTOBUF_NOINLINE ::RSP_UserFeatureData::UserFeatureIndex_CfItemEntry_DoNotUse* Arena::CreateMaybeMessage< ::RSP_UserFeatureData::UserFeatureIndex_CfItemEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RSP_UserFeatureData::UserFeatureIndex_CfItemEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::RSP_UserFeatureData::UserFeatureIndex* Arena::CreateMaybeMessage< ::RSP_UserFeatureData::UserFeatureIndex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RSP_UserFeatureData::UserFeatureIndex >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
