// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: redis/item_feature_data.proto

#include "redis/item_feature_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_redis_2fitem_5ffeature_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IDWeight_redis_2fitem_5ffeature_5fdata_2eproto;
namespace RSP_ItemFeatureData {
class IDWeightDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IDWeight> _instance;
} _IDWeight_default_instance_;
class ItemFeatureBasicDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ItemFeatureBasic> _instance;
} _ItemFeatureBasic_default_instance_;
class ItemFeatureStatisDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ItemFeatureStatis> _instance;
} _ItemFeatureStatis_default_instance_;
class ItemFeatureIndexDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ItemFeatureIndex> _instance;
} _ItemFeatureIndex_default_instance_;
}  // namespace RSP_ItemFeatureData
static void InitDefaultsscc_info_IDWeight_redis_2fitem_5ffeature_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RSP_ItemFeatureData::_IDWeight_default_instance_;
    new (ptr) ::RSP_ItemFeatureData::IDWeight();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IDWeight_redis_2fitem_5ffeature_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IDWeight_redis_2fitem_5ffeature_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_ItemFeatureBasic_redis_2fitem_5ffeature_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RSP_ItemFeatureData::_ItemFeatureBasic_default_instance_;
    new (ptr) ::RSP_ItemFeatureData::ItemFeatureBasic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ItemFeatureBasic_redis_2fitem_5ffeature_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ItemFeatureBasic_redis_2fitem_5ffeature_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_ItemFeatureIndex_redis_2fitem_5ffeature_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RSP_ItemFeatureData::_ItemFeatureIndex_default_instance_;
    new (ptr) ::RSP_ItemFeatureData::ItemFeatureIndex();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ItemFeatureIndex_redis_2fitem_5ffeature_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ItemFeatureIndex_redis_2fitem_5ffeature_5fdata_2eproto}, {
      &scc_info_IDWeight_redis_2fitem_5ffeature_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_ItemFeatureStatis_redis_2fitem_5ffeature_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RSP_ItemFeatureData::_ItemFeatureStatis_default_instance_;
    new (ptr) ::RSP_ItemFeatureData::ItemFeatureStatis();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ItemFeatureStatis_redis_2fitem_5ffeature_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ItemFeatureStatis_redis_2fitem_5ffeature_5fdata_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_redis_2fitem_5ffeature_5fdata_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_redis_2fitem_5ffeature_5fdata_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_redis_2fitem_5ffeature_5fdata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_redis_2fitem_5ffeature_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::IDWeight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::IDWeight, id_),
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::IDWeight, weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::ItemFeatureBasic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::ItemFeatureBasic, timestamp_),
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::ItemFeatureBasic, ll_id_),
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::ItemFeatureBasic, res_style_),
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::ItemFeatureBasic, style_id_),
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::ItemFeatureBasic, res_name_),
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::ItemFeatureBasic, class_id_1_),
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::ItemFeatureBasic, class_id_2_),
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::ItemFeatureBasic, class_id_),
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::ItemFeatureBasic, res_price_),
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::ItemFeatureBasic, pay_type_),
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::ItemFeatureBasic, up_time_),
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::ItemFeatureBasic, keyname_list_),
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::ItemFeatureBasic, res_type_),
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::ItemFeatureBasic, user_id_),
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::ItemFeatureBasic, studio_id_),
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::ItemFeatureBasic, heart_level_),
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::ItemFeatureBasic, type_),
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::ItemFeatureBasic, is_single_),
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::ItemFeatureBasic, res_map_),
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::ItemFeatureBasic, has_3dl_),
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::ItemFeatureBasic, renderer_version_),
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::ItemFeatureBasic, res_good_),
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::ItemFeatureBasic, is_pano_),
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::ItemFeatureBasic, is_brand_),
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::ItemFeatureBasic, have_lights_),
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::ItemFeatureBasic, use_place_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::ItemFeatureStatis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::ItemFeatureStatis, timestamp_),
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::ItemFeatureStatis, click_14_days_),
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::ItemFeatureStatis, click_30_days_),
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::ItemFeatureStatis, ctr_14_days_),
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::ItemFeatureStatis, ctr_30_days_),
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::ItemFeatureStatis, download_14_days_),
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::ItemFeatureStatis, download_30_days_),
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::ItemFeatureStatis, ctcvr_14_days_),
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::ItemFeatureStatis, ctcvr_30_days_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::ItemFeatureIndex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::ItemFeatureIndex, timestamp_),
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::ItemFeatureIndex, cf_item_),
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::ItemFeatureIndex, click_occur_),
  PROTOBUF_FIELD_OFFSET(::RSP_ItemFeatureData::ItemFeatureIndex, download_occur_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::RSP_ItemFeatureData::IDWeight)},
  { 7, -1, sizeof(::RSP_ItemFeatureData::ItemFeatureBasic)},
  { 38, -1, sizeof(::RSP_ItemFeatureData::ItemFeatureStatis)},
  { 52, -1, sizeof(::RSP_ItemFeatureData::ItemFeatureIndex)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RSP_ItemFeatureData::_IDWeight_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RSP_ItemFeatureData::_ItemFeatureBasic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RSP_ItemFeatureData::_ItemFeatureStatis_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RSP_ItemFeatureData::_ItemFeatureIndex_default_instance_),
};

const char descriptor_table_protodef_redis_2fitem_5ffeature_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035redis/item_feature_data.proto\022\023RSP_Ite"
  "mFeatureData\"&\n\010IDWeight\022\n\n\002id\030\001 \001(\003\022\016\n\006"
  "weight\030\002 \001(\002\"\366\003\n\020ItemFeatureBasic\022\021\n\ttim"
  "estamp\030\001 \001(\003\022\r\n\005ll_id\030\002 \001(\003\022\021\n\tres_style"
  "\030\003 \001(\005\022\020\n\010style_id\030\004 \001(\005\022\020\n\010res_name\030\005 \001"
  "(\005\022\022\n\nclass_id_1\030\006 \001(\005\022\022\n\nclass_id_2\030\007 \001"
  "(\005\022\020\n\010class_id\030\010 \001(\005\022\021\n\tres_price\030\t \001(\005\022"
  "\020\n\010pay_type\030\n \001(\005\022\017\n\007up_time\030\013 \001(\003\022\024\n\014ke"
  "yname_list\030\014 \003(\005\022\020\n\010res_type\030\r \001(\005\022\017\n\007us"
  "er_id\030\016 \001(\003\022\021\n\tstudio_id\030\017 \001(\003\022\023\n\013heart_"
  "level\030\020 \001(\005\022\014\n\004type\030\021 \001(\005\022\021\n\tis_single\030\022"
  " \001(\005\022\017\n\007res_map\030\023 \001(\005\022\017\n\007has_3dl\030\024 \001(\005\022\030"
  "\n\020renderer_version\030\025 \001(\005\022\020\n\010res_good\030\026 \001"
  "(\005\022\017\n\007is_pano\030\027 \001(\005\022\020\n\010is_brand\030\030 \001(\005\022\023\n"
  "\013have_lights\030\031 \001(\005\022\021\n\tuse_place\030\032 \001(\005\"\340\001"
  "\n\021ItemFeatureStatis\022\021\n\ttimestamp\030\001 \001(\003\022\025"
  "\n\rclick_14_days\030\002 \001(\002\022\025\n\rclick_30_days\030\003"
  " \001(\002\022\023\n\013ctr_14_days\030\004 \001(\002\022\023\n\013ctr_30_days"
  "\030\005 \001(\002\022\030\n\020download_14_days\030\006 \001(\002\022\030\n\020down"
  "load_30_days\030\007 \001(\002\022\025\n\rctcvr_14_days\030\010 \001("
  "\002\022\025\n\rctcvr_30_days\030\t \001(\002\"\300\001\n\020ItemFeature"
  "Index\022\021\n\ttimestamp\030\001 \001(\003\022.\n\007cf_item\030\002 \003("
  "\0132\035.RSP_ItemFeatureData.IDWeight\0222\n\013clic"
  "k_occur\030\003 \003(\0132\035.RSP_ItemFeatureData.IDWe"
  "ight\0225\n\016download_occur\030\004 \003(\0132\035.RSP_ItemF"
  "eatureData.IDWeightb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_redis_2fitem_5ffeature_5fdata_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_redis_2fitem_5ffeature_5fdata_2eproto_sccs[4] = {
  &scc_info_IDWeight_redis_2fitem_5ffeature_5fdata_2eproto.base,
  &scc_info_ItemFeatureBasic_redis_2fitem_5ffeature_5fdata_2eproto.base,
  &scc_info_ItemFeatureIndex_redis_2fitem_5ffeature_5fdata_2eproto.base,
  &scc_info_ItemFeatureStatis_redis_2fitem_5ffeature_5fdata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_redis_2fitem_5ffeature_5fdata_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_redis_2fitem_5ffeature_5fdata_2eproto = {
  false, false, descriptor_table_protodef_redis_2fitem_5ffeature_5fdata_2eproto, "redis/item_feature_data.proto", 1027,
  &descriptor_table_redis_2fitem_5ffeature_5fdata_2eproto_once, descriptor_table_redis_2fitem_5ffeature_5fdata_2eproto_sccs, descriptor_table_redis_2fitem_5ffeature_5fdata_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_redis_2fitem_5ffeature_5fdata_2eproto::offsets,
  file_level_metadata_redis_2fitem_5ffeature_5fdata_2eproto, 4, file_level_enum_descriptors_redis_2fitem_5ffeature_5fdata_2eproto, file_level_service_descriptors_redis_2fitem_5ffeature_5fdata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_redis_2fitem_5ffeature_5fdata_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_redis_2fitem_5ffeature_5fdata_2eproto)), true);
namespace RSP_ItemFeatureData {

// ===================================================================

class IDWeight::_Internal {
 public:
};

IDWeight::IDWeight(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RSP_ItemFeatureData.IDWeight)
}
IDWeight::IDWeight(const IDWeight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&id_)) + sizeof(weight_));
  // @@protoc_insertion_point(copy_constructor:RSP_ItemFeatureData.IDWeight)
}

void IDWeight::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&id_)) + sizeof(weight_));
}

IDWeight::~IDWeight() {
  // @@protoc_insertion_point(destructor:RSP_ItemFeatureData.IDWeight)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IDWeight::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IDWeight::ArenaDtor(void* object) {
  IDWeight* _this = reinterpret_cast< IDWeight* >(object);
  (void)_this;
}
void IDWeight::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IDWeight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IDWeight& IDWeight::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IDWeight_redis_2fitem_5ffeature_5fdata_2eproto.base);
  return *internal_default_instance();
}


void IDWeight::Clear() {
// @@protoc_insertion_point(message_clear_start:RSP_ItemFeatureData.IDWeight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&id_)) + sizeof(weight_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IDWeight::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float weight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IDWeight::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RSP_ItemFeatureData.IDWeight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // float weight = 2;
  if (!(this->weight() <= 0 && this->weight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RSP_ItemFeatureData.IDWeight)
  return target;
}

size_t IDWeight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RSP_ItemFeatureData.IDWeight)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // float weight = 2;
  if (!(this->weight() <= 0 && this->weight() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IDWeight::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RSP_ItemFeatureData.IDWeight)
  GOOGLE_DCHECK_NE(&from, this);
  const IDWeight* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IDWeight>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RSP_ItemFeatureData.IDWeight)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RSP_ItemFeatureData.IDWeight)
    MergeFrom(*source);
  }
}

void IDWeight::MergeFrom(const IDWeight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RSP_ItemFeatureData.IDWeight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (!(from.weight() <= 0 && from.weight() >= 0)) {
    _internal_set_weight(from._internal_weight());
  }
}

void IDWeight::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RSP_ItemFeatureData.IDWeight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IDWeight::CopyFrom(const IDWeight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RSP_ItemFeatureData.IDWeight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IDWeight::IsInitialized() const {
  return true;
}

void IDWeight::InternalSwap(IDWeight* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IDWeight, weight_)
      + sizeof(IDWeight::weight_)
      - PROTOBUF_FIELD_OFFSET(IDWeight, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IDWeight::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ItemFeatureBasic::_Internal {
 public:
};

ItemFeatureBasic::ItemFeatureBasic(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  keyname_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RSP_ItemFeatureData.ItemFeatureBasic)
}
ItemFeatureBasic::ItemFeatureBasic(const ItemFeatureBasic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      keyname_list_(from.keyname_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_place_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(use_place_));
  // @@protoc_insertion_point(copy_constructor:RSP_ItemFeatureData.ItemFeatureBasic)
}

void ItemFeatureBasic::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&use_place_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(use_place_));
}

ItemFeatureBasic::~ItemFeatureBasic() {
  // @@protoc_insertion_point(destructor:RSP_ItemFeatureData.ItemFeatureBasic)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ItemFeatureBasic::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ItemFeatureBasic::ArenaDtor(void* object) {
  ItemFeatureBasic* _this = reinterpret_cast< ItemFeatureBasic* >(object);
  (void)_this;
}
void ItemFeatureBasic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ItemFeatureBasic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ItemFeatureBasic& ItemFeatureBasic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ItemFeatureBasic_redis_2fitem_5ffeature_5fdata_2eproto.base);
  return *internal_default_instance();
}


void ItemFeatureBasic::Clear() {
// @@protoc_insertion_point(message_clear_start:RSP_ItemFeatureData.ItemFeatureBasic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keyname_list_.Clear();
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_place_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(use_place_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemFeatureBasic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 ll_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ll_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 res_style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          res_style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 style_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          style_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 res_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          res_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 class_id_1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          class_id_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 class_id_2 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          class_id_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 class_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          class_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 res_price = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          res_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pay_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          pay_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 up_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          up_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 keyname_list = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_keyname_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96) {
          _internal_add_keyname_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 res_type = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          res_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 user_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 studio_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          studio_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 heart_level = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          heart_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 is_single = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          is_single_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 res_map = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          res_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 has_3dl = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          has_3dl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 renderer_version = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          renderer_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 res_good = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          res_good_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 is_pano = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          is_pano_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 is_brand = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          is_brand_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 have_lights = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          have_lights_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 use_place = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          use_place_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ItemFeatureBasic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RSP_ItemFeatureData.ItemFeatureBasic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // int64 ll_id = 2;
  if (this->ll_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_ll_id(), target);
  }

  // int32 res_style = 3;
  if (this->res_style() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_res_style(), target);
  }

  // int32 style_id = 4;
  if (this->style_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_style_id(), target);
  }

  // int32 res_name = 5;
  if (this->res_name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_res_name(), target);
  }

  // int32 class_id_1 = 6;
  if (this->class_id_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_class_id_1(), target);
  }

  // int32 class_id_2 = 7;
  if (this->class_id_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_class_id_2(), target);
  }

  // int32 class_id = 8;
  if (this->class_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_class_id(), target);
  }

  // int32 res_price = 9;
  if (this->res_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_res_price(), target);
  }

  // int32 pay_type = 10;
  if (this->pay_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_pay_type(), target);
  }

  // int64 up_time = 11;
  if (this->up_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_up_time(), target);
  }

  // repeated int32 keyname_list = 12;
  {
    int byte_size = _keyname_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          12, _internal_keyname_list(), byte_size, target);
    }
  }

  // int32 res_type = 13;
  if (this->res_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_res_type(), target);
  }

  // int64 user_id = 14;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_user_id(), target);
  }

  // int64 studio_id = 15;
  if (this->studio_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->_internal_studio_id(), target);
  }

  // int32 heart_level = 16;
  if (this->heart_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_heart_level(), target);
  }

  // int32 type = 17;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_type(), target);
  }

  // int32 is_single = 18;
  if (this->is_single() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_is_single(), target);
  }

  // int32 res_map = 19;
  if (this->res_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_res_map(), target);
  }

  // int32 has_3dl = 20;
  if (this->has_3dl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_has_3dl(), target);
  }

  // int32 renderer_version = 21;
  if (this->renderer_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_renderer_version(), target);
  }

  // int32 res_good = 22;
  if (this->res_good() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_res_good(), target);
  }

  // int32 is_pano = 23;
  if (this->is_pano() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_is_pano(), target);
  }

  // int32 is_brand = 24;
  if (this->is_brand() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_is_brand(), target);
  }

  // int32 have_lights = 25;
  if (this->have_lights() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_have_lights(), target);
  }

  // int32 use_place = 26;
  if (this->use_place() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_use_place(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RSP_ItemFeatureData.ItemFeatureBasic)
  return target;
}

size_t ItemFeatureBasic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RSP_ItemFeatureData.ItemFeatureBasic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 keyname_list = 12;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->keyname_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _keyname_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // int64 ll_id = 2;
  if (this->ll_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ll_id());
  }

  // int32 res_style = 3;
  if (this->res_style() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_res_style());
  }

  // int32 style_id = 4;
  if (this->style_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_style_id());
  }

  // int32 res_name = 5;
  if (this->res_name() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_res_name());
  }

  // int32 class_id_1 = 6;
  if (this->class_id_1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_class_id_1());
  }

  // int32 class_id_2 = 7;
  if (this->class_id_2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_class_id_2());
  }

  // int32 class_id = 8;
  if (this->class_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_class_id());
  }

  // int32 res_price = 9;
  if (this->res_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_res_price());
  }

  // int32 pay_type = 10;
  if (this->pay_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pay_type());
  }

  // int64 up_time = 11;
  if (this->up_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_up_time());
  }

  // int64 user_id = 14;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_id());
  }

  // int32 res_type = 13;
  if (this->res_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_res_type());
  }

  // int32 heart_level = 16;
  if (this->heart_level() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_heart_level());
  }

  // int64 studio_id = 15;
  if (this->studio_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_studio_id());
  }

  // int32 type = 17;
  if (this->type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 is_single = 18;
  if (this->is_single() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_single());
  }

  // int32 res_map = 19;
  if (this->res_map() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_res_map());
  }

  // int32 has_3dl = 20;
  if (this->has_3dl() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_has_3dl());
  }

  // int32 renderer_version = 21;
  if (this->renderer_version() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_renderer_version());
  }

  // int32 res_good = 22;
  if (this->res_good() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_res_good());
  }

  // int32 is_pano = 23;
  if (this->is_pano() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_pano());
  }

  // int32 is_brand = 24;
  if (this->is_brand() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_brand());
  }

  // int32 have_lights = 25;
  if (this->have_lights() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_have_lights());
  }

  // int32 use_place = 26;
  if (this->use_place() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_use_place());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ItemFeatureBasic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RSP_ItemFeatureData.ItemFeatureBasic)
  GOOGLE_DCHECK_NE(&from, this);
  const ItemFeatureBasic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ItemFeatureBasic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RSP_ItemFeatureData.ItemFeatureBasic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RSP_ItemFeatureData.ItemFeatureBasic)
    MergeFrom(*source);
  }
}

void ItemFeatureBasic::MergeFrom(const ItemFeatureBasic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RSP_ItemFeatureData.ItemFeatureBasic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keyname_list_.MergeFrom(from.keyname_list_);
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.ll_id() != 0) {
    _internal_set_ll_id(from._internal_ll_id());
  }
  if (from.res_style() != 0) {
    _internal_set_res_style(from._internal_res_style());
  }
  if (from.style_id() != 0) {
    _internal_set_style_id(from._internal_style_id());
  }
  if (from.res_name() != 0) {
    _internal_set_res_name(from._internal_res_name());
  }
  if (from.class_id_1() != 0) {
    _internal_set_class_id_1(from._internal_class_id_1());
  }
  if (from.class_id_2() != 0) {
    _internal_set_class_id_2(from._internal_class_id_2());
  }
  if (from.class_id() != 0) {
    _internal_set_class_id(from._internal_class_id());
  }
  if (from.res_price() != 0) {
    _internal_set_res_price(from._internal_res_price());
  }
  if (from.pay_type() != 0) {
    _internal_set_pay_type(from._internal_pay_type());
  }
  if (from.up_time() != 0) {
    _internal_set_up_time(from._internal_up_time());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.res_type() != 0) {
    _internal_set_res_type(from._internal_res_type());
  }
  if (from.heart_level() != 0) {
    _internal_set_heart_level(from._internal_heart_level());
  }
  if (from.studio_id() != 0) {
    _internal_set_studio_id(from._internal_studio_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.is_single() != 0) {
    _internal_set_is_single(from._internal_is_single());
  }
  if (from.res_map() != 0) {
    _internal_set_res_map(from._internal_res_map());
  }
  if (from.has_3dl() != 0) {
    _internal_set_has_3dl(from._internal_has_3dl());
  }
  if (from.renderer_version() != 0) {
    _internal_set_renderer_version(from._internal_renderer_version());
  }
  if (from.res_good() != 0) {
    _internal_set_res_good(from._internal_res_good());
  }
  if (from.is_pano() != 0) {
    _internal_set_is_pano(from._internal_is_pano());
  }
  if (from.is_brand() != 0) {
    _internal_set_is_brand(from._internal_is_brand());
  }
  if (from.have_lights() != 0) {
    _internal_set_have_lights(from._internal_have_lights());
  }
  if (from.use_place() != 0) {
    _internal_set_use_place(from._internal_use_place());
  }
}

void ItemFeatureBasic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RSP_ItemFeatureData.ItemFeatureBasic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemFeatureBasic::CopyFrom(const ItemFeatureBasic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RSP_ItemFeatureData.ItemFeatureBasic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemFeatureBasic::IsInitialized() const {
  return true;
}

void ItemFeatureBasic::InternalSwap(ItemFeatureBasic* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  keyname_list_.InternalSwap(&other->keyname_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ItemFeatureBasic, use_place_)
      + sizeof(ItemFeatureBasic::use_place_)
      - PROTOBUF_FIELD_OFFSET(ItemFeatureBasic, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemFeatureBasic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ItemFeatureStatis::_Internal {
 public:
};

ItemFeatureStatis::ItemFeatureStatis(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RSP_ItemFeatureData.ItemFeatureStatis)
}
ItemFeatureStatis::ItemFeatureStatis(const ItemFeatureStatis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&ctcvr_30_days_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(ctcvr_30_days_));
  // @@protoc_insertion_point(copy_constructor:RSP_ItemFeatureData.ItemFeatureStatis)
}

void ItemFeatureStatis::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ctcvr_30_days_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(ctcvr_30_days_));
}

ItemFeatureStatis::~ItemFeatureStatis() {
  // @@protoc_insertion_point(destructor:RSP_ItemFeatureData.ItemFeatureStatis)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ItemFeatureStatis::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ItemFeatureStatis::ArenaDtor(void* object) {
  ItemFeatureStatis* _this = reinterpret_cast< ItemFeatureStatis* >(object);
  (void)_this;
}
void ItemFeatureStatis::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ItemFeatureStatis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ItemFeatureStatis& ItemFeatureStatis::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ItemFeatureStatis_redis_2fitem_5ffeature_5fdata_2eproto.base);
  return *internal_default_instance();
}


void ItemFeatureStatis::Clear() {
// @@protoc_insertion_point(message_clear_start:RSP_ItemFeatureData.ItemFeatureStatis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ctcvr_30_days_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(ctcvr_30_days_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemFeatureStatis::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float click_14_days = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          click_14_days_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float click_30_days = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          click_30_days_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ctr_14_days = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          ctr_14_days_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ctr_30_days = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          ctr_30_days_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float download_14_days = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          download_14_days_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float download_30_days = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          download_30_days_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ctcvr_14_days = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          ctcvr_14_days_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ctcvr_30_days = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          ctcvr_30_days_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ItemFeatureStatis::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RSP_ItemFeatureData.ItemFeatureStatis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // float click_14_days = 2;
  if (!(this->click_14_days() <= 0 && this->click_14_days() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_click_14_days(), target);
  }

  // float click_30_days = 3;
  if (!(this->click_30_days() <= 0 && this->click_30_days() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_click_30_days(), target);
  }

  // float ctr_14_days = 4;
  if (!(this->ctr_14_days() <= 0 && this->ctr_14_days() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_ctr_14_days(), target);
  }

  // float ctr_30_days = 5;
  if (!(this->ctr_30_days() <= 0 && this->ctr_30_days() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_ctr_30_days(), target);
  }

  // float download_14_days = 6;
  if (!(this->download_14_days() <= 0 && this->download_14_days() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_download_14_days(), target);
  }

  // float download_30_days = 7;
  if (!(this->download_30_days() <= 0 && this->download_30_days() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_download_30_days(), target);
  }

  // float ctcvr_14_days = 8;
  if (!(this->ctcvr_14_days() <= 0 && this->ctcvr_14_days() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_ctcvr_14_days(), target);
  }

  // float ctcvr_30_days = 9;
  if (!(this->ctcvr_30_days() <= 0 && this->ctcvr_30_days() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_ctcvr_30_days(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RSP_ItemFeatureData.ItemFeatureStatis)
  return target;
}

size_t ItemFeatureStatis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RSP_ItemFeatureData.ItemFeatureStatis)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // float click_14_days = 2;
  if (!(this->click_14_days() <= 0 && this->click_14_days() >= 0)) {
    total_size += 1 + 4;
  }

  // float click_30_days = 3;
  if (!(this->click_30_days() <= 0 && this->click_30_days() >= 0)) {
    total_size += 1 + 4;
  }

  // float ctr_14_days = 4;
  if (!(this->ctr_14_days() <= 0 && this->ctr_14_days() >= 0)) {
    total_size += 1 + 4;
  }

  // float ctr_30_days = 5;
  if (!(this->ctr_30_days() <= 0 && this->ctr_30_days() >= 0)) {
    total_size += 1 + 4;
  }

  // float download_14_days = 6;
  if (!(this->download_14_days() <= 0 && this->download_14_days() >= 0)) {
    total_size += 1 + 4;
  }

  // float download_30_days = 7;
  if (!(this->download_30_days() <= 0 && this->download_30_days() >= 0)) {
    total_size += 1 + 4;
  }

  // float ctcvr_14_days = 8;
  if (!(this->ctcvr_14_days() <= 0 && this->ctcvr_14_days() >= 0)) {
    total_size += 1 + 4;
  }

  // float ctcvr_30_days = 9;
  if (!(this->ctcvr_30_days() <= 0 && this->ctcvr_30_days() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ItemFeatureStatis::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RSP_ItemFeatureData.ItemFeatureStatis)
  GOOGLE_DCHECK_NE(&from, this);
  const ItemFeatureStatis* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ItemFeatureStatis>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RSP_ItemFeatureData.ItemFeatureStatis)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RSP_ItemFeatureData.ItemFeatureStatis)
    MergeFrom(*source);
  }
}

void ItemFeatureStatis::MergeFrom(const ItemFeatureStatis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RSP_ItemFeatureData.ItemFeatureStatis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (!(from.click_14_days() <= 0 && from.click_14_days() >= 0)) {
    _internal_set_click_14_days(from._internal_click_14_days());
  }
  if (!(from.click_30_days() <= 0 && from.click_30_days() >= 0)) {
    _internal_set_click_30_days(from._internal_click_30_days());
  }
  if (!(from.ctr_14_days() <= 0 && from.ctr_14_days() >= 0)) {
    _internal_set_ctr_14_days(from._internal_ctr_14_days());
  }
  if (!(from.ctr_30_days() <= 0 && from.ctr_30_days() >= 0)) {
    _internal_set_ctr_30_days(from._internal_ctr_30_days());
  }
  if (!(from.download_14_days() <= 0 && from.download_14_days() >= 0)) {
    _internal_set_download_14_days(from._internal_download_14_days());
  }
  if (!(from.download_30_days() <= 0 && from.download_30_days() >= 0)) {
    _internal_set_download_30_days(from._internal_download_30_days());
  }
  if (!(from.ctcvr_14_days() <= 0 && from.ctcvr_14_days() >= 0)) {
    _internal_set_ctcvr_14_days(from._internal_ctcvr_14_days());
  }
  if (!(from.ctcvr_30_days() <= 0 && from.ctcvr_30_days() >= 0)) {
    _internal_set_ctcvr_30_days(from._internal_ctcvr_30_days());
  }
}

void ItemFeatureStatis::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RSP_ItemFeatureData.ItemFeatureStatis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemFeatureStatis::CopyFrom(const ItemFeatureStatis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RSP_ItemFeatureData.ItemFeatureStatis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemFeatureStatis::IsInitialized() const {
  return true;
}

void ItemFeatureStatis::InternalSwap(ItemFeatureStatis* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ItemFeatureStatis, ctcvr_30_days_)
      + sizeof(ItemFeatureStatis::ctcvr_30_days_)
      - PROTOBUF_FIELD_OFFSET(ItemFeatureStatis, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemFeatureStatis::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ItemFeatureIndex::_Internal {
 public:
};

ItemFeatureIndex::ItemFeatureIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cf_item_(arena),
  click_occur_(arena),
  download_occur_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RSP_ItemFeatureData.ItemFeatureIndex)
}
ItemFeatureIndex::ItemFeatureIndex(const ItemFeatureIndex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cf_item_(from.cf_item_),
      click_occur_(from.click_occur_),
      download_occur_(from.download_occur_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:RSP_ItemFeatureData.ItemFeatureIndex)
}

void ItemFeatureIndex::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ItemFeatureIndex_redis_2fitem_5ffeature_5fdata_2eproto.base);
  timestamp_ = PROTOBUF_LONGLONG(0);
}

ItemFeatureIndex::~ItemFeatureIndex() {
  // @@protoc_insertion_point(destructor:RSP_ItemFeatureData.ItemFeatureIndex)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ItemFeatureIndex::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ItemFeatureIndex::ArenaDtor(void* object) {
  ItemFeatureIndex* _this = reinterpret_cast< ItemFeatureIndex* >(object);
  (void)_this;
}
void ItemFeatureIndex::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ItemFeatureIndex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ItemFeatureIndex& ItemFeatureIndex::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ItemFeatureIndex_redis_2fitem_5ffeature_5fdata_2eproto.base);
  return *internal_default_instance();
}


void ItemFeatureIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:RSP_ItemFeatureData.ItemFeatureIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cf_item_.Clear();
  click_occur_.Clear();
  download_occur_.Clear();
  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemFeatureIndex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .RSP_ItemFeatureData.IDWeight cf_item = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cf_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .RSP_ItemFeatureData.IDWeight click_occur = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_click_occur(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .RSP_ItemFeatureData.IDWeight download_occur = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_download_occur(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ItemFeatureIndex::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RSP_ItemFeatureData.ItemFeatureIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // repeated .RSP_ItemFeatureData.IDWeight cf_item = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cf_item_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_cf_item(i), target, stream);
  }

  // repeated .RSP_ItemFeatureData.IDWeight click_occur = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_click_occur_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_click_occur(i), target, stream);
  }

  // repeated .RSP_ItemFeatureData.IDWeight download_occur = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_download_occur_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_download_occur(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RSP_ItemFeatureData.ItemFeatureIndex)
  return target;
}

size_t ItemFeatureIndex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RSP_ItemFeatureData.ItemFeatureIndex)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RSP_ItemFeatureData.IDWeight cf_item = 2;
  total_size += 1UL * this->_internal_cf_item_size();
  for (const auto& msg : this->cf_item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .RSP_ItemFeatureData.IDWeight click_occur = 3;
  total_size += 1UL * this->_internal_click_occur_size();
  for (const auto& msg : this->click_occur_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .RSP_ItemFeatureData.IDWeight download_occur = 4;
  total_size += 1UL * this->_internal_download_occur_size();
  for (const auto& msg : this->download_occur_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ItemFeatureIndex::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RSP_ItemFeatureData.ItemFeatureIndex)
  GOOGLE_DCHECK_NE(&from, this);
  const ItemFeatureIndex* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ItemFeatureIndex>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RSP_ItemFeatureData.ItemFeatureIndex)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RSP_ItemFeatureData.ItemFeatureIndex)
    MergeFrom(*source);
  }
}

void ItemFeatureIndex::MergeFrom(const ItemFeatureIndex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RSP_ItemFeatureData.ItemFeatureIndex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cf_item_.MergeFrom(from.cf_item_);
  click_occur_.MergeFrom(from.click_occur_);
  download_occur_.MergeFrom(from.download_occur_);
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void ItemFeatureIndex::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RSP_ItemFeatureData.ItemFeatureIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemFeatureIndex::CopyFrom(const ItemFeatureIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RSP_ItemFeatureData.ItemFeatureIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemFeatureIndex::IsInitialized() const {
  return true;
}

void ItemFeatureIndex::InternalSwap(ItemFeatureIndex* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cf_item_.InternalSwap(&other->cf_item_);
  click_occur_.InternalSwap(&other->click_occur_);
  download_occur_.InternalSwap(&other->download_occur_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemFeatureIndex::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace RSP_ItemFeatureData
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RSP_ItemFeatureData::IDWeight* Arena::CreateMaybeMessage< ::RSP_ItemFeatureData::IDWeight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RSP_ItemFeatureData::IDWeight >(arena);
}
template<> PROTOBUF_NOINLINE ::RSP_ItemFeatureData::ItemFeatureBasic* Arena::CreateMaybeMessage< ::RSP_ItemFeatureData::ItemFeatureBasic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RSP_ItemFeatureData::ItemFeatureBasic >(arena);
}
template<> PROTOBUF_NOINLINE ::RSP_ItemFeatureData::ItemFeatureStatis* Arena::CreateMaybeMessage< ::RSP_ItemFeatureData::ItemFeatureStatis >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RSP_ItemFeatureData::ItemFeatureStatis >(arena);
}
template<> PROTOBUF_NOINLINE ::RSP_ItemFeatureData::ItemFeatureIndex* Arena::CreateMaybeMessage< ::RSP_ItemFeatureData::ItemFeatureIndex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RSP_ItemFeatureData::ItemFeatureIndex >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
